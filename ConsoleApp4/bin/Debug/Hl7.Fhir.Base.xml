<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hl7.Fhir.Base</name>
    </assembly>
    <members>
        <member name="M:Hl7.Fhir.ElementModel.ElementNode.ForPrimitive(System.Object)">
            <summary>
            Creates an implementation of ITypedElement that represents a primitive value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ElementNode.TryConvertToElementValue(System.Object,System.Object@)">
            <summary>
            Converts a .NET primitive to the expected object value to use in the
            value property of ITypedElement.
            </summary>
            <param name="value"></param>
            <param name="primitiveValue"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ElementNode.CreateList(System.Object[])">
            <summary>
            Create a fixed length set of values (but also support variable number of parameter values)
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ElementNode.CreateList(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Create a variable list of values using an enumeration
            - so doesn't have to be converted to an array in memory (issue with larger dynamic lists)
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ElementNode.importChild(Hl7.Fhir.Specification.IStructureDefinitionSummaryProvider,Hl7.Fhir.ElementModel.ElementNode,System.String,System.Nullable{System.Int32})">
            <summary>
            Will update the child to reflect it being a child of this element, but will not yet add the child at any position within this element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ElementNodeComparator.IsEqualTo(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Compares two <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> trees.
            </summary>
            <param name="expected">The tree that contains the expected, "correct" data.</param>
            <param name="actual">The tree to compare against the <paramref name="expected"/> tree.</param>
            <returns>A <see cref="T:Hl7.Fhir.ElementModel.TreeComparisonResult"/> that summarizes the differences between the trees.</returns>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.IBaseElementNavigator`1">
            <summary>
            The base interface for <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/>."/>
            </summary>
            <typeparam name="TDerived"></typeparam>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.IBaseElementNavigator`1.Children(System.String)">
            <summary>
            Enumerate the child nodes present in the source representation (if any)
            </summary>
            <param name="name">Return only the children with the given name.</param>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IBaseElementNavigator`1.Name">
            <summary>
            Name of the node, e.g. "active", "value".
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IBaseElementNavigator`1.InstanceType">
            <summary>
            Type of the node. If a FHIR type, this is just a simple string, otherwise a StructureDefinition url for a type defined as a logical model.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IBaseElementNavigator`1.Value">
             <summary>
             The value of the node (if it represents a primitive FHIR value)
             </summary>
             <remarks>
             FHIR primitives are mapped to underlying C# types as follows:
            
             instant         Hl7.Fhir.ElementModel.Types.DateTime
             time            Hl7.Fhir.ElementModel.Types.Time
             date            Hl7.Fhir.ElementModel.Types.Date
             dateTime        Hl7.Fhir.ElementModel.Types.DateTime
             decimal         decimal
             boolean         bool
             integer         int
             unsignedInt     int
             positiveInt     int
             long/integer64  long (name will be finalized in R5)
             string          string
             code            string
             id              string
             uri, oid, uuid, 
             canonical, url  string
             markdown        string
             base64Binary    string (uuencoded)
             xhtml           string
             </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ICdaInfoSupplier.XHtmlText">
            <summary>
            Retrieves the xHtml text of a cda logic model
            </summary>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.IResourceTypeSupplier">
            <summary>
            This interface is implemented by FHIR parsers to represent the resource type indicator
            found in the parsed data.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IResourceTypeSupplier.ResourceType">
            <summary>
            Gets the resource type found at the location of the node in the source data (if any).
            </summary>
            <value>The value of resource type indicator (e.g. <c>resourceType</c> in json, or contained node in XML) or
            <c>null</c> if such an indicator was not found.</value>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.IShortPathGenerator">
            <summary>
            This interface is implemented by implementers of <see cref="T:Hl7.Fhir.ElementModel.ITypedElement" /> to represent the short path
            to an element.
            </summary>
            <remarks>There is a difference between the <see cref="P:Hl7.Fhir.ElementModel.ITypedElement.Location"/> and the short path. The
            former always includes an index selector, even if the element does not repeat, whereas the short path
            only uses index selectors when necessary. As an example, a <c>Location</c> would be <c>Patient.active[0]</c>,
            whereas the short path for the same location would be <c>Patient.active</c>. For repeating nodes, the
            location and the short path are the same.</remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.IShortPathGenerator.ShortPath">
            <summary>
            Gets the short path of the node the <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> represents.
            (any single cardinality nodes will be stripped of their [0] array indexer)
            </summary>
            <value>Returns the short path, which is a dotted path notation to the node</value>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.ISourceNode">
            <summary>
            A node within a tree of FHIR data.
            </summary>
            <remarks>
            <para>This interface is typically implemented by a parser for one of the low-level serialization formats for FHIR, i.e.
            FHIR xml/json/rdf or v3 XML. The interface does not depend on the availability of FHIR metadata and definitions
            (in contrast to <see cref="T:Hl7.Fhir.ElementModel.ITypedElement" />), so the names of the nodes will have their type suffixes (for choice types) 
            and all primitives values are represented as strings, instead of native objects.</para>
            <para>Implementations of this interface that want to report errors while parsing should only do so on the 
            <see cref="M:Hl7.Fhir.ElementModel.ISourceNode.Children(System.String)"/> function and <see cref="P:Hl7.Fhir.ElementModel.ISourceNode.Text"/> getter.</para>
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ISourceNode.Name">
            <summary>
            Gets the name of the node, e.g. "active", "valueQuantity".
            </summary>
            <remarks>Since the node has no type information, choice elements are represented as their 
            name on the wire, possibly including the type suffix for choice elements.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ISourceNode.Text">
            <summary>
            Gets the text of the primitive value of the node
            </summary>
            <value>Returns the raw textual value as represented in the serialization, or null if there is no value in this node.</value>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ISourceNode.Location">
            <summary>
            Gets the location of this node within the tree of data.
            </summary>
            <value>A string of dot-separated names representing the path to the node within the tree, including indices
            to distinguish repeated occurences of an element.</value>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ISourceNode.Children(System.String)">
            <summary>
            Enumerates the direct child nodes of the current node (if any).
            </summary>
            <param name="name">Optional. The name filter for the children. Can be omitted to not filter by name.</param>
            <returns>The children of the node matching the given filter, or all children if no filter was specified.
            If no children match the given filter, the function returns an empty enumerable.</returns>
            <remarks>
            <para>If the <paramref name="name"/>parameter ends in an asterix ('*'),
            the function will return the children of which the name starts with the given name.</para>
            <para>Repeating elements will always be returned consecutively.</para></remarks>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.ITypedElement">
            <summary>
            A element within a tree of typed FHIR data.
            </summary>
            <remarks>
            This interface represents FHIR data as a tree of elements, including type information either present in 
            the instance or derived from fully aware of the FHIR definitions and types
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ITypedElement.Location">
            <summary>
            An indication of the location of this node within the data represented by the <c>ITypedElement</c>.
            </summary>
            <remarks>The format of the location is the dotted name of the property, including indices to make
            sure repeated occurences of an element can be distinguished. It needs to be sufficiently precise to aid 
            the user in locating issues in the data.</remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNode._includeAll">
            <summary>
            Set to true when a complex type property is mandatory so all its children need to be included
            </summary>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.MaskingNodeSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.ElementModel.MaskingNode"/> class.</summary>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.MaskingNodeSettings.PreserveBundleMode">
            <summary>
            The different ways in which Bundles are masked.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.MaskingNodeSettings.PreserveBundleMode.None">
            <summary>
            All Bundles (including nested) are masked like any other resource 
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.MaskingNodeSettings.PreserveBundleMode.Root">
            <summary>
            The Bundle at the root is preserved, nested bundles are masked
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.MaskingNodeSettings.PreserveBundleMode.All">
            <summary>
            All Bundles (including nested) are exempt from masking
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.PreserveBundle">
            <summary>
            Determines how Bundles are masked.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.IncludeMandatory">
            <summary>
            Include top-level mandatory elements, including all their children
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.IncludeInSummary">
            <summary>
            Include all elements marked "in summary" in the definition of the element
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.ExcludeNarrative">
            <summary>
            Exclude all elements of type "Narrative"
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.ExcludeMarkdown">
            <summary>
            Exclude all elements of type "Markdown"
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.IncludeAll">
            <summary>
            Start by including all elements
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.IncludeElements">
            <summary>
            List of names op top-level elements to include, including their children
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.MaskingNodeSettings.ExcludeElements">
            <summary>
            List of top-level elements to exclude
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.MaskingNodeSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.ElementModel.MaskingNodeSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.MaskingNodeSettings.#ctor(Hl7.Fhir.ElementModel.MaskingNodeSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.ElementModel.MaskingNodeSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.MaskingNodeSettings.CopyTo(Hl7.Fhir.ElementModel.MaskingNodeSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.ElementModel.MaskingNodeSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.MaskingNodeSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.ElementModel.MaskingNodeSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.MaskingNodeSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.ElementModel.MaskingNodeSettings"/> instance with default property values.</summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.PocoElementNode.FhirValue">
            <summary>
            This is only needed for search data extraction (and debugging)
            to be able to read the values from the selected node (if a coding, so can get the value and system)
            </summary>
            <remarks>Will return null if on id, value, url (primitive attribute props in xml)</remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.PrimitiveElement.Hl7#Fhir#Specification#IElementDefinitionSummary#IsModifier">
            <inheritdoc/>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.ScopedNode.ParentResource">
            <summary>
            Represents the most direct resource parent in which the current node is located.
            </summary>
            <remarks>
            When the node is the inital root, there is no parent and this property returns null.
            When the node is a (contained/bundled) resource itself, this property still returns
            that resource's most direct parent.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.LocalLocation">
            <summary>
            Returns the location of the current element within its most direct parent resource or datatype.
            </summary>
            <remarks>
            For deeper paths, this would return the direct path within the encompassing type, e.g. 
            for an element at Patient.identifier.use this property would return Identifier.use.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.Name">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.InstanceType">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.Value">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.Location">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.AtResource">
            <summary>
            Whether this node is a root element of a Resource.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.NearestResourceType">
            <summary>
            The instance type of the resource this element is part of.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.ResourceContext">
            <summary>
            The %resource context, as defined by FHIRPath
            </summary>
            <remarks>
            This is the original resource the current context is part of. When evaluating a datatype, 
            this would be the resource the element is part of. Do not go past a root resource into a bundle, 
            if it is contained in a bundle.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.Definition">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.ParentResources">
            <summary>
            Get the list of container parents in a list, nearest parent first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.Id">
            <summary>
            Returns the Id of the resource, if the current node is a resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.ContainedResources">
            <summary>
            When this node is the node of a resource, it will return its contained resources, if any.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.ScopedNode.BundledResource">
            <summary>
            A tuple of a bundled resource plus its Bundle.entry.fullUrl property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.BundledResources">
            <summary>
            When this node is the root of a Bundle, retrieves the bundled resources in its Bundle.entry.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.FullUrl">
            <summary>
            The full url of the resource this element is part of (if in a Bundle)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.ScopedNode.InstanceUri">
            <summary>
            The full uri from where the instance this node is part of was retrieved.
            </summary>
            <remarks>The initial (parent) ScopedNode must have been created supplying the instanceUri parameter
            of the constructor.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.Annotations(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNode.Children(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.ElementModel.ScopedNodeExtensions">
            <summary>
            A set of functions on <see cref="T:Hl7.Fhir.ElementModel.ScopedNode"/> (and <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/>) that
            help resolving references from one resource to another. This includes both resolving
            the reference within the resource (in en Bundle or contained resource) or reaching out
            to an external resolver.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNodeExtensions.MakeAbsolute(Hl7.Fhir.ElementModel.ScopedNode,Hl7.Fhir.Rest.ResourceIdentity)">
            <summary>
            Turn a relative reference into an absolute url, based on the fullUrl of the parent resource
            </summary>
            <remarks>See https://www.hl7.org/fhir/bundle.html#references for more information</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNodeExtensions.MakeAbsolute(Hl7.Fhir.ElementModel.ScopedNode,System.String)">
            <inheritdoc cref="M:Hl7.Fhir.ElementModel.ScopedNodeExtensions.MakeAbsolute(Hl7.Fhir.ElementModel.ScopedNode,Hl7.Fhir.Rest.ResourceIdentity)"/>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNodeExtensions.Resolve``1(``0,System.String,System.Func{System.String,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="reference"></param>
            <param name="externalResolver"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.ScopedNodeExtensions.Resolve``1(``0,System.Func{System.String,``0})">
            <summary>
            Where this element is a Reference datatype, get the reference from it and resolve it.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNode.FromNode(Hl7.Fhir.ElementModel.ISourceNode,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="recursive"></param>
            <param name="annotationsToCopy">Maybe: if null - copy all, if empty, copy none, else specifcy which</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Children(System.Collections.Generic.IEnumerable{Hl7.Fhir.ElementModel.ISourceNode},System.String)">
            <summary>
            Returns the direct children of a set of nodes.
            </summary>
            <param name="node">A list of nodes.</param>
            <param name="name"> Optional.The name filter for the children. Can be omitted to not filter by name.</param>
            <returns>The children of all nodes passed into <paramref name="node"/>, aggregated into a single list.</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Descendants(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Returns all descendants of a node.
            </summary>
            <param name="node">A node.</param>
            <returns>The descendants (children and by recursion all children of the children) of the node passed into 
            <paramref name="node"/></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Descendants(System.Collections.Generic.IEnumerable{Hl7.Fhir.ElementModel.ISourceNode})">
            <summary>
            Returns all descendants of a set of nodes.
            </summary>
            <param name="nodes">A list of nodes.</param>
            <returns>The descendants (children and by recursion all children of the children) of the node passed into 
            <paramref name="nodes"/></returns>
            <returns>The descendants of all nodes passed into <paramref name="nodes"/>, aggregated into a single list.</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.DescendantsAndSelf(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Returns a node and all descendants of that node.
            </summary>
            <param name="node">A node.</param>
            <returns>The node and descendants (children and by recursion all children of the children) of the node passed into 
            <paramref name="node"/></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{Hl7.Fhir.ElementModel.ISourceNode})">
            <summary>
            Returns nodes and all descendants of those nodes from a set of nodes.
            </summary>
            <param name="nodes">A list of nodes.</param>
            <returns>The node and descendants (children and by recursion all children of the children) of all
            nodes passed into <paramref name="nodes"/></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Visit(Hl7.Fhir.ElementModel.ISourceNode,System.Action{System.Int32,Hl7.Fhir.ElementModel.ISourceNode})">
            <summary>
            Runs an action on all nodes in a tree of nodes.
            </summary>
            <param name="root">The root of the tree.</param>
            <param name="visitor">The action to run on each node.</param>
            <remarks>The function does a depth-first traversal of the tree, starting at the root. The action is
            passed an integer representing the depth of the node in the tree, measured in steps from the node
            to the root.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Catch(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Utility.ExceptionNotificationHandler,System.Boolean)">
            <summary>
            Registers an <see cref="T:Hl7.Fhir.Utility.ExceptionNotificationHandler" /> with an <see cref="T:Hl7.Fhir.Utility.IExceptionSource"/>.
            </summary>
            <seealso cref="M:Hl7.Fhir.Utility.ExceptionSourceExtensions.Catch(Hl7.Fhir.Utility.IExceptionSource,Hl7.Fhir.Utility.ExceptionNotificationHandler,System.Boolean)"/>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.VisitAll(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Visit all nodes in a tree while invoking the <see cref="P:Hl7.Fhir.ElementModel.ISourceNode.Text" /> getter. />
            </summary>
            <param name="root">The root of the tree to visit.</param>
            <remarks>Since implementations of ISourceNode will report parsing errors when enumerating
            children and getting their <see cref="P:Hl7.Fhir.ElementModel.ISourceNode.Text"/> getter, this will trigger all
            parsing errors to be reported by the source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.VisitAndCatch(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Visits all nodes in a tree while catching any reported parsing errors. />
            </summary>
            <param name="root">The root of the tree to visit.</param>
            <returns>The list of all exceptions reported while visiting the tree passed in
            the <paramref name="root"/> argument.</returns>
            <seealso cref="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.VisitAll(Hl7.Fhir.ElementModel.ISourceNode)"/>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.GetResourceTypeIndicator(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Gets the <see cref="T:Hl7.Fhir.ElementModel.IResourceTypeSupplier" /> annotation from an <c>ISourceNode</c>
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Annotations(Hl7.Fhir.ElementModel.ISourceNode,System.Type)">
            <summary>
            Gets specific annotations from the list of annotations on the node.
            </summary>
            <returns>All of the annotations of the given type, or an empty list if none were found.</returns>
            <seealso cref="T:Hl7.Fhir.Utility.IAnnotated"/>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.Annotation``1(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Gets a specific annotation from the list of annotations on the node.
            </summary>
            <returns>The first of the annotations of the type given by <typeparamref name="T"/>,
            or an empty list if none were found.</returns>
            <seealso cref="T:Hl7.Fhir.Utility.IAnnotated"/>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.ToTypedElement(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.IStructureDefinitionSummaryProvider,System.String,Hl7.Fhir.ElementModel.TypedElementSettings)">
            <summary>
            Turns the <c>ISourceNode</c> into a <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> by adding type information to it.
            </summary>
            <param name="node">The node containing the source information.</param>
            <param name="provider">The provider which supplies type information.</param>
            <param name="type">Optional. The type of the element at the root.</param>
            <param name="settings"></param>
            <returns>An <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> that represents the data in the node, with type information
            added to it.</returns>
            <remarks>This extension method decorates the <c>ISourceNode</c> with a new instance of
            an <see cref="T:Hl7.Fhir.ElementModel.TypedElementOnSourceNode"/>, passing on the parameters of this extension method.</remarks>
            <seealso cref="T:Hl7.Fhir.ElementModel.ITypedElement"/>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.ToTypedElement(Hl7.Fhir.ElementModel.ISourceNode)">
            <summary>
            Adapting an <c>ISourceNode</c> to a <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> without adding type information to it.
            </summary>
            <param name="node"></param>
            <returns></returns>
            <remarks>In contrast to <see cref="M:Hl7.Fhir.ElementModel.SourceNodeExtensions.ToTypedElement(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.IStructureDefinitionSummaryProvider,System.String,Hl7.Fhir.ElementModel.TypedElementSettings)"/>,
            this method simulates an <c>ITypedElement</c> on top of an <c>ISourceNode</c>, without adding type information to
            it. This is used internally in a few places in the API, where the component using the <c>ITypedNode</c> is aware it
            cannot depend on type information being present, but should normally not be used.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementExtensions.ToTypedElement(Hl7.Fhir.Model.Base,Hl7.Fhir.Introspection.ModelInspector,System.String)">
            <summary>
            Converts a Poco to an ITypedElement.
            </summary>
            <param name="base">The Poco that should be converted to an <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/>.</param>
            <param name="modelInspector">The <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> containing the POCO classes to be used for deserialization.</param>
            <param name="rootName"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementExtensions.IsExactlyEqualTo``1(``0,``0,System.Boolean)">
            <summary>
            Determines whether the specified ITypedElement is equal to the current ITypedElement. You can discard the order of the elements
            by setting the <paramref name="ignoreOrder"/> to <c>true</c>.
            </summary>
            <param name="left">The current <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> to use in the equation.</param>
            <param name="right">The <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> to compare with the current ITyoedElement.</param>
            <param name="ignoreOrder">When <c>true</c> the order of the children is discarded. When <c>false</c> the order of children is part
            of the equation.</param>
            <returns><c>true</c> when the ITypedElements are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementExtensions.ValueEquality``2(``0,``1)">
            <summary>
            Determines whether the generic values <paramref name="val1"/> and <paramref name="val2"/> are equal.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementExtensions.Matches``1(``0,``0)">
            <summary>
            Determines whether a <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> matches a certain pattern.
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns><c>true</c> when <paramref name="value"/> matches the <paramref name="pattern"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementParseExtensions.ParseBindable(Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Parses a bindeable type (code, Coding, CodeableConcept, Quantity, string, uri) into a FHIR coded datatype.
            Extensions will be parsed from the 'value' of the (simple) extension.
            </summary>
            <param name="instance"></param>
            <returns>An Element of a coded type (code, Coding or CodeableConcept) dependin on the instance type,
            or null if no bindable instance data was found</returns>
            <remarks>The instance type is mapped to a codable type as follows:
              'code' => code
              'Coding' => Coding
              'CodeableConcept' => CodeableConcept
              'Quantity' => Coding
              'Extension' => depends on value[x]
              'string' => code
              'uri' => code
              'CodeableReference' => CodeableConcept if 'concept' is present, otherwise null
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementParseExtensions.ParseBindableInternal``1(Hl7.Fhir.ElementModel.IBaseElementNavigator{``0})">
            <inheritdoc cref="M:Hl7.Fhir.ElementModel.TypedElementParseExtensions.ParseBindable(Hl7.Fhir.ElementModel.ITypedElement)"/>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.TypedElementSettings.TypeErrorMode">
            <summary>
            Ways to handle missing type information for an element.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.TypedElementSettings.TypeErrorMode.Report">
            <summary>
            Raise an error when no type information is available.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.TypedElementSettings.TypeErrorMode.Ignore">
            <summary>
            Ignore the element, it will not be represented in the tree.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.TypedElementSettings.TypeErrorMode.Passthrough">
            <summary>
            The element will be represented in the tree, without type information.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.TypedElementSettings.ErrorMode">
            <summary>
            Determines how to proceed when an element is encountered for which there is no type information available.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.TypedElementSettings.TruncateDateTimeToDate">
            <summary>
            Allow to parse a FHIR dateTime values into an element of type date.
            </summary>
            <remarks>
            Needed for backward compatibility with old parser for resources which were saved and considered valid in the past.
            </remarks>>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.ElementModel.TypedElementSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementSettings.#ctor(Hl7.Fhir.ElementModel.TypedElementSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.ElementModel.TypedElementSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementSettings.CopyTo(Hl7.Fhir.ElementModel.TypedElementSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.ElementModel.TypedElementSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.ElementModel.TypedElementSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.TypedElementSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.ElementModel.TypedElementSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Any.TryGetSystemTypeByName(System.String,System.Type@)">
            <summary>
            Returns the concrete subclass of Any that is used to represent the
            type given in parmameter <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Any.TryConvert(System.Object,Hl7.Fhir.ElementModel.Types.Any@)">
            <summary>
            Try to convert a .NET instance to a Cql/FhirPath Any-based type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Any.Convert(System.Object)">
            <summary>
            Converts a .NET instance to a Cql/FhirPath Any-based type.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Date.Precision">
            <summary>
            The precision of the date available. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Date.Offset">
            <summary>
            The span of time ahead/behind UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Date.HasOffset">
            <summary>
            Whether the time specifies an offset to UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Date._originalParsedString">
            <summary>
            If this instance was constructed using Parse(), this is the original
            raw input to the parse. Used to guarantee roundtrippability.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.ToDateTimeOffset(System.TimeSpan)">
            <summary>
            Converts the date to a full DateTimeOffset instance.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.ToDateTimeOffset(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Converts the date to a full DateTimeOffset instance.
            </summary>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <param name="defaultOffset">Offset used when the datetime does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.ToDateTimeOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Converts the date to a full DateTimeOffset instance.
            </summary>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <param name="milliseconds"></param>
            <param name="defaultOffset">Offset used when the datetime does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.tryParse(System.String,Hl7.Fhir.ElementModel.Types.Date@)">
            <summary>
            Converts the date to a full DateTimeOffset instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.Equals(System.Object)">
            <summary>
            Determines if two dates are equal according to CQL equality rules.
            </summary>
            <returns>returns true if the values are both dates, have the same precision and each date component is exactly the same. 
            Dates with timezones are normalized to zulu before comparison is done.</returns>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.Date.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.CompareTo(System.Object)">
            <summary>
            Compare two dates according to CQL equality rules
            </summary>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.Date.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Date.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            Compares two dates according to CQL ordering rules.
            </summary> 
            <param name="other"></param>
            <returns>An <see cref="M:Hl7.Fhir.Utility.Result.Ok``1(``0)"/> with an integer value representing the reseult of the comparison: 0 if this and other are equal, 
            -1 if this is smaller than other and +1 if this is bigger than other, or the other is null. If the values are incomparable
            this function returns a <see cref="M:Hl7.Fhir.Utility.Result.Fail``1(System.Exception)"/> with the reason why the comparison between the two values was impossible.
            </returns>
            <remarks>The comparison is performed by considering each precision in order, beginning with years. 
            If the values are the same, comparison proceeds to the next precision; 
            if the values are different, the comparison stops and the result is false. If one input has a value 
            for the precision and the other does not, the comparison stops and the values cannot be compared; if neither
            input has a value for the precision, or the last precision has been reached, the comparison stops
            and the result is true.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.DateTime.RoundToPrecision(System.DateTimeOffset,Hl7.Fhir.ElementModel.Types.DateTimePrecision,System.Boolean)">
            <summary>
            Rounds the contents of a <see cref="T:System.DateTimeOffset"/> to the given precision, unused precision if filled out 
            as midnight, the first of january, GMT.
            </summary>
            <param name="source">The <see cref="T:System.DateTimeOffset"/> to round.</param>
            <param name="precision">The precision to round down to.</param>
            <param name="withOffset">Whether to use the timezone specified, or round it to <see cref="F:System.TimeSpan.Zero"/>.</param>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.DateTime.Offset">
            <summary>
            The span of time ahead/behind UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.DateTime.Precision">
            <summary>
            The precision of the date and time available. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.DateTime.HasOffset">
            <summary>
            Whether the time specifies an offset to UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.DateTime._originalParsedString">
            <summary>
            If this instance was constructed using Parse(), this is the original
            raw input to the parse. Used to guarantee roundtrippability.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.DateTime.ToDateTimeOffset(System.TimeSpan)">
            <summary>
            Converts the datetime to a full DateTimeOffset instance.
            </summary>
            <param name="defaultOffset">Offset used when the datetime does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.DateTime.Equals(System.Object)">
            <summary>
            Compare two datetimes based on CQL equality rules
            </summary>
            <returns>returns true if the values have the same precision, and each date component is exactly the same. Datetimes with timezones are normalized
            to zulu before comparison is done. Throws an <see cref="T:System.ArgumentException"/> if the arguments differ in precision.</returns>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.DateTime.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.DateTime.CompareTo(System.Object)">
            <summary>
            Compare two datetimes based on CQL equality rules
            </summary>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.DateTime.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.DateTime.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            Compares two datetimes according to CQL ordering rules.
            </summary> 
            <param name="other"></param>
            <returns>An <see cref="T:Hl7.Fhir.Utility.Ok`1"/> with an integer value representing the reseult of the comparison: 0 if this and other are equal, 
            -1 if this is smaller than other and +1 if this is bigger than other, or the other is null. If the values are incomparable
            this function returns a <see cref="T:Hl7.Fhir.Utility.Fail`1"/> with the reason why the comparison between the two values was impossible.
            </returns>
            <remarks>The comparison is performed by considering each precision in order, beginning with years. 
            If the values are the same, comparison proceeds to the next precision; 
            if the values are different, the comparison stops and the result is false. If one input has a value 
            for the precision and the other does not, the comparison stops and the values cannot be compared; if neither
            input has a value for the precision, or the last precision has been reached, the comparison stops
            and the result is true.</remarks>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.DateTimePrecision.Fraction">
            <summary>
            Milliseconds and fractions
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Decimal.Equals(System.Object)">
            <summary>
            Determines if two decimals are equal according to CQL equality rules.
            </summary>
            <remarks>The same as <see cref="M:Hl7.Fhir.ElementModel.Types.Decimal.Equals(Hl7.Fhir.ElementModel.Types.Any,Hl7.Fhir.ElementModel.Types.DecimalComparison)" />
            with comparison type <see cref="F:Hl7.Fhir.ElementModel.Types.Decimal.CQL_EQUALS_COMPARISON"/>. For decimals, CQL and .NET equality
            rules are aligned.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Decimal.Equals(Hl7.Fhir.ElementModel.Types.Any,Hl7.Fhir.ElementModel.Types.DecimalComparison)">
            <summary>
            Determines equality of two decimals using the specified type of decimal comparsion.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Decimal.Scale(System.Decimal,System.Boolean)">
            <summary>
            Calculates the scale of a decimal, which is the number of digits after the decimal separator.
            </summary>
            <param name="d"></param>
            <param name="ignoreTrailingZeroes">If true, trailing zeroes are ignored when counting
            the number of digits after the separator.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Decimal.CompareTo(System.Object)">
            <summary>
            Compares two decimals according to CQL equality rules
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>For decimals, CQL and .NET comparison rules are aligned.</remarks>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.Types.DecimalComparison">
            <summary>Specifies the comparison rules for decimals.</summary>
            <remarks>Options are aligned with the equality and equivalence  operations for decimals
            defined in the CQL specification. See https://cql.hl7.org/09-b-cqlreference.html#comparison-operators-4 
            for more details.
            </remarks>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.DecimalComparison.IgnoreTrailingZeroes">
            <summary>
            Trailing zeroes after the decimal are ignored in determining precision.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.DecimalComparison.RoundToSmallestScale">
            <summary>
            Comparison is done on values rounded to the scale of the
            least precise operand. Implies <see cref="F:Hl7.Fhir.ElementModel.Types.DecimalComparison.IgnoreTrailingZeroes" />.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Integer.Equals(System.Object)">
            <summary>
            Determines if two integers are equal according to CQL equality rules.
            </summary>
            <remarks>For integers, CQL and .NET equality rules are aligned.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Integer.CompareTo(System.Object)">
            <summary>
            Compares two integers, according to CQL equality rules
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>For integers, CQL and .NET comparison rules are aligned.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Long.Equals(System.Object)">
            <summary>
            Determines if two 64-bit integers are equal according to CQL equality rules.
            </summary>
            <remarks>For 64-bits integers, CQL and .NET equality rules are aligned.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Long.CompareTo(System.Object)">
            <summary>
            Compares two 64-bit integers according to CQL equality rules
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>For 64-bit integers, CQL and .NET comparison rules are aligned.</remarks>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.Types.QuantityUnitSystem">
            <summary>
            UCUM does not contain codes for calendar units. To support both the UCUM 'a' and 'mo' and
            the calender year and month, we keep track of multiple coding system for units.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.QuantityUnitSystem.UCUM">
            <summary>
            Unit is taken from the UCUM coding system (default).
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.QuantityUnitSystem.CalendarDuration">
            <summary>
            Unit is taken from the set of calendar units (year or month)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.ForCalendarDuration(System.Decimal,System.String)">
            <summary>
            Construct a non-UCUM calendar duration (currently only 'year' and 'month').
            </summary>
            <param name="value"></param>
            <param name="calendarUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.TryParseTimeUnit(System.String,System.String@,System.Boolean@)">
            <summary>
            Parses the literal time units either to UCUM or to a non-UCUM calendar unit.
            </summary>
            <param name="unitLiteral">The time unit as found in a quantity literal</param>
            <param name="unit">The parsed unit, either as a UCUM code or a non-UCUM calender unit.</param>
            <param name="isCalendarUnit">True is this is a non-UCUM calendar unit.</param>
            <returns>True if this is a recognized time unit literal, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.Equals(System.Object)">
            <summary>
            Compare two quantities based on CQL equality rules.
            </summary>
            <param name="obj"></param>
            <returns>true if the values have comparable units, and the converted values are the same according to decimal equality rules.
            </returns>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.Quantity.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.
            According to the .NET documentation Equals(object obj) cannot throw
            an exception. That is why we make sure that a bool is always returned. See 
            <see href="https://docs.microsoft.com/en-us/dotnet/api/system.object.equals"/></remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.TryEquals(Hl7.Fhir.ElementModel.Types.Any,Hl7.Fhir.ElementModel.Types.QuantityComparison)">
            <summary>
            Compares two quantities according to CQL equivalence rules.
            </summary>
            <remarks>For time-valued quantities, the comparison of
            calendar durations and definite quantity durations above seconds is determined by the <paramref name="comparisonType"/></remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.CompareTo(System.Object)">
            <summary>
            Compare two datetimes based on CQL equivalence rules
            </summary>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.Quantity.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any,Hl7.Fhir.ElementModel.Types.QuantityComparison)">
            <summary>
            Compares two quantities according to CQL ordering rules.
            </summary> 
            <returns>the result of the comparison: 0 if this and other are equal, 
            -1 if this is smaller than other and +1 if this is bigger than other.</returns>
            <remarks>the dimensions of each quantity must be the same, but not necessarily the unit. For example, units of 'cm' and 'm' can be compared, 
            but units of 'cm2' and 'cm' cannot. The comparison will be made using the most granular unit of either input. 
            Quantities with invalid units cannot be compared. 
            NOTE: in the current normative specification, there is a difference between comparing incompatible duration units (result: {}) 
            and performing the equals operator on incompatible units (result: false). This is going to be corrected
            (see https://jira.hl7.org/browse/FHIR-28144), and this code already reflects this decision.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Quantity.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            Compares two quantities according to CQL ordering rules.
            </summary> 
            <remarks>By default, calendar units (except year and month) are considered comparable to
            definite time units (execpt y and mo). Use the <see cref="M:Hl7.Fhir.ElementModel.Types.Quantity.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any,Hl7.Fhir.ElementModel.Types.QuantityComparison)"/> overload
            to specify comparison behaviour for date comparisons.</remarks>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.Types.QuantityComparison">
            <summary>Specifies the comparison rules for quantities.</summary>
            <remarks>Options are aligned with the equality and equivalence  operations for quantities
            defined in the CQL specification. See https://cql.hl7.org/09-b-cqlreference.html#comparison-operators-4 
            for more details.
            </remarks>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.QuantityComparison.CompareCalendarUnits">
            <summary>
            For time-valued quantities: calendar durations and definite quantity durations are considered comparable (and equivalent).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.String.Equals(Hl7.Fhir.ElementModel.Types.Any,Hl7.Fhir.ElementModel.Types.StringComparison)">
            <summary>
            Compares two strings according to CQL equivalence rules.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.ElementModel.Types.StringComparison">
            <summary>Specifies the comparison rules for string.</summary>
            <remarks>Options are aligned with the equality and equivalence  operations for string
            defined in the CQL specification. See https://cql.hl7.org/09-b-cqlreference.html#comparison-operators-4 
            for more details.
            </remarks>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.StringComparison.Unicode">
            <summary>
            Both strings are the same based on the Unicode values for the individual 
            characters in the strings.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.StringComparison.IgnoreCase">
            <summary>
            Ignore casing when comparing strings
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.StringComparison.NormalizeWhitespace">
            <summary>
            All whitespace characters are treated as equivalent.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.ElementModel.Types.StringComparison.IgnoreDiacritics">
            <summary>
            Ignore all Unicode non-spacing characters when comparing string
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Time.Precision">
            <summary>
            The precision of the time available. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Time.Offset">
            <summary>
            The span of time ahead/behind UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.ElementModel.Types.Time.HasOffset">
            <summary>
            Whether the time specifies an offset to UTC
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Time.ToDateTimeOffset(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Converts the time to a full DateTimeOffset instance.
            </summary>
            <param name="year">Year used to turn a time into a date</param>
            <param name="month">Month used to turn a time into a date</param>
            <param name="day">Day used to turn a time into a date</param>
            <param name="defaultOffset">Offset used when the time does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Time.ToTimeSpan">
            <summary>
            Converts the time to a TimeSpan instance, filled out to the whole hour.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Time.Equals(System.Object)">
            <summary>
            Compare two times based on CQL equality rules
            </summary>
            <returns>returns true if the values have the same precision, and each date component is exactly the same. Datetimes with timezones are normalized
            to zulu before comparison is done. Throws an <see cref="T:System.ArgumentException"/> if the arguments differ in precision.</returns>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.Time.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Time.CompareTo(System.Object)">
            <summary>
            Compare two times based on CQL equality rules
            </summary>
            <remarks>See <see cref="M:Hl7.Fhir.ElementModel.Types.Time.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)"/> for more details.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Time.TryCompareTo(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            Compares two times according to CQL ordering rules.
            </summary> 
            <param name="other"></param>
            <returns>An <see cref="T:Hl7.Fhir.Utility.Ok`1"/> with an integer value representing the reseult of the comparison: 0 if this and other are equal, 
            -1 if this is smaller than other and +1 if this is bigger than other, or the other is null. If the values are incomparable
            this function returns a <see cref="T:Hl7.Fhir.Utility.Fail`1"/> with the reason why the comparison between the two values was impossible.
            </returns>
            <remarks>The comparison is performed by considering each precision in order, beginning with hours. 
            If the values are the same, comparison proceeds to the next precision; 
            if the values are different, the comparison stops and the result is false. If one input has a value 
            for the precision and the other does not, the comparison stops and the values cannot be compared; if neither
            input has a value for the precision, or the last precision has been reached, the comparison stops
            and the result is true.</remarks>
        </member>
        <member name="M:Hl7.Fhir.ElementModel.Types.Ucum.TryCanonicalize(Hl7.Fhir.ElementModel.Types.Quantity,Hl7.Fhir.ElementModel.Types.Quantity@)">
            <summary>
            Try to canonicalize the system type quantity to Umum base quantity. So a 1,000 cm will be 10 m. Or an inch will be converted to a meter.
            </summary>
            <param name="quantity">A system type Quantity of system Ucum</param>
            <param name="canonicalizedQuantity">The converted system type Quantity when the conversion was a success.</param>
            <returns><c>true</c> when the conversion succeeded. Or <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.BaseTypedElement">
            <summary>
            A base class for creating components wrapping another <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> component.
            </summary>
            <remarks>
            By default, all members of <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> are forwarden to the instance passed in the
            constructor, but any of the members can be overridden in the subclass.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilder.BuildFrom(Hl7.Fhir.ElementModel.ISourceNode,System.Type)">
            <summary>
            Build a POCO from an ISourceNode.
            </summary>
            <param name="source"></param>
            <param name="dataType">Optional. Type of POCO to build. Should be one of the generated POCO classes.</param>
            <returns></returns>
            <remarks>If <paramref name="dataType"/> is not supplied, or is <code>Resource</code> or <code>DomainResource</code>,
            the builder will try to determine the actual type to create from the <paramref name="source"/>. </remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilder.BuildFrom(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Introspection.ClassMapping)">
            <summary>
            Build a POCO from an ISourceNode.
            </summary>
            <param name="source"></param>
            <param name="mapping">Optional. The <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> for the POCO to build. </param>
            <returns></returns>
            <remarks>If <paramref name="mapping"/> is not supplied, or is <code>Resource</code> or <code>DomainResource</code>,
            the builder will try to determine the actual type to create from the <paramref name="source"/>. </remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilder.BuildFrom(Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Build a POCO from an ITypedElement.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.PocoBuilderSettings">
            <summary>Configuration settings for the PocoBuilder class.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PocoBuilderSettings.AllowUnrecognizedEnums">
            <summary>
            Do not throw when encountering values not parseable as a member of an enumeration in a Poco.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PocoBuilderSettings.IgnoreUnknownMembers">
            <summary>
            Do not throw when the data has an element that does not map to a property in the Poco.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PocoBuilderSettings.TruncateDateTimeToDate">
            <summary>
            Allow to parse a FHIR dateTime values into an element of type date.
            </summary>
            <remarks>
            Needed for backward compatibility with old parser for resources which were saved and considered valid in the past.
            </remarks>>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PocoBuilderSettings.ExceptionHandler">
            <summary>
            A Handler to permit intercepting Exceptions during parsing
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilderSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.PocoBuilderSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilderSettings.#ctor(Hl7.Fhir.Serialization.PocoBuilderSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.PocoBuilderSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilderSettings.CopyTo(Hl7.Fhir.Serialization.PocoBuilderSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.PocoBuilderSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilderSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.PocoBuilderSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoBuilderSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.PocoBuilderSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer">
            <summary>
            Deserializes a byte stream into FHIR POCO objects.
            </summary>
            <remarks>The serializer uses the format documented in https://www.hl7.org/fhir/json.html. </remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="assembly">Assembly containing the POCO classes to be used for deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.#ctor(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="inspector">The <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> containing the POCO classes to be used for deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.#ctor(System.Reflection.Assembly,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="assembly">Assembly containing the POCO classes to be used for deserialization.</param>
            <param name="settings">A settings object to be used by this instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.#ctor(Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="inspector">The <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> containing the POCO classes to be used for deserialization.</param>
            <param name="settings">A settings object to be used by this instance.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.Settings">
            <summary>
            The settings that were passed to the constructor.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.TryDeserializeResource(System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Model.Resource@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)">
            <summary>
            Deserialize the FHIR Json from the reader and create a new POCO object containing the data from the reader.
            </summary>
            <param name="reader">A json reader positioned on the first token of the object, or the beginning of the stream.</param>
            <param name="instance">The result of deserialization. May be incomplete when there are issues.</param>
            <param name="issues">Issues encountered while deserializing. Will be empty when the function returns true.</param>
            <returns><c>false</c> if there are issues, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.TryDeserializeObject(System.Type,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Model.Base@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)">
            <summary>
            Reads a (subtree) of serialized FHIR Json data into a POCO object.
            </summary>
            <param name="targetType">The type of POCO to construct and deserialize</param>
            <param name="reader">A json reader positioned on the first token of the object, or the beginning of the stream.</param>
            <param name="instance">The result of deserialization. May be incomplete when there are issues.</param>
            <param name="issues">Issues encountered while deserializing. Will be empty when the function returns true.</param>
            <returns><c>false</c> if there are issues, <c>true</c> otherwise.</returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializedObjectKind">
            <summary>
            The kind of object we need to deserialize into, which will influence subtly
            how the <see cref="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.deserializeObjectInto``1(``0,Hl7.Fhir.Introspection.ClassMapping,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializedObjectKind,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState,System.Boolean)" />
            function will operate.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializedObjectKind.Complex">
            <summary>
            Deserialize into a complex datatype, and complain about the presence of
            a resourceType element.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializedObjectKind.Resource">
            <summary>
            Deserialize into a resource
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializedObjectKind.FhirPrimitive">
            <summary>
            Deserialize the non-value part of a FhirPrimitive, and do not call validation of
            the instance yet, since it will be done when the FhirPrimitive has been constructed
            completely, includin its value part.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.deserializeObjectInto``1(``0,Hl7.Fhir.Introspection.ClassMapping,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializedObjectKind,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState,System.Boolean)">
            <summary>
            Reads a complex object into an existing instance of a POCO.
            </summary>
            <param name="target"></param>
            <param name="mapping"></param>
            <param name="reader"></param>
            <param name="kind"></param>
            <param name="state"></param>
            <param name="stayOnLastToken">Normally, the reader will be on the first token *after* the object, however,
            System.Text.Json converters expect the readers on the last token of the object. Since all logic
            in this class assumes the first case, we make a special case for the outermost call to this function
            done by the <see cref="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.TryDeserializeObject(System.Type,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Model.Base@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)"/> function, which is in its
            turn called by System.Text.Json upon a <see cref="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" /></param>.
            <remarks>Reader will be on the first token after the object upon return, but see <paramref name="stayOnLastToken"/>.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.deserializePropertyValueInto(Hl7.Fhir.Model.Base,System.String,Hl7.Fhir.Introspection.PropertyMapping,Hl7.Fhir.Introspection.ClassMapping,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.ObjectParsingState,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState)">
             <summary>
             Reads the value of a json property.
             </summary>
             <param name="target">The target POCO which property will be set/updated during deserialization. If null, it will be
             be created based on the <paramref name="propertyMapping"/>, otherwise it will be updated.</param>
             <param name="propertyName">The literal name of the property in the json serialization.</param>
             <param name="propertyMapping">The cached metadata for the property we are setting.</param>
             <param name="propertyValueMapping">The cached metadata for the type of value we are setting the property to.</param>
             <param name="reader">The reader to deserialize from.</param>
             <param name="delayedValidations">Validations to be delayed until the target has been fully deserialized.
             This function will add to this list if necessary.</param>
             <param name="state">Object used to track all parsing state.</param>
            
             <remarks>Expects the reader to be positioned on the property value.
             Reader will be on the first token after the property value upon return.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.deserializeNormalList(System.Collections.IList,Hl7.Fhir.Introspection.ClassMapping,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Introspection.PropertyMapping,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState)">
            <summary>
            Reads the content of a list with non-FHIR-primitive content (so, no name/_name pairs to be dealt with). Note
            that the contents can only be complex in the current FHIR serialization, but we'll be prepared and handle
            other situations (e.g. repeating Extension.url's, if they would ever exist).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.deserializeFhirPrimitiveList(System.Collections.IList,System.String,Hl7.Fhir.Introspection.ClassMapping,System.Type,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.ObjectParsingState,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState)">
            <summary>
            Reads a list of FHIR primitives (either from a name or _name property).
            </summary>
            <remarks>Upon completion, reader will be located at the next token afther the list.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializeFhirPrimitive(Hl7.Fhir.Model.PrimitiveType,System.String,Hl7.Fhir.Introspection.ClassMapping,System.Type,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.ObjectParsingState,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState)">
            <summary>
            Deserializes a FHIR primitive, which can be a name or _name property.
            </summary>
            <remarks>Upon completion, reader will be located at the next token after the FHIR primitive.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.deserializeSingleValue(System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Introspection.ClassMapping,Hl7.Fhir.Introspection.PropertyMapping,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerState)">
            <summary>
            Deserializes a single object, either a resource, a FHIR primitive or a primitive value.
            </summary>
            <remarks>Upon completion, reader will be located at the next token afther the value.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DeserializePrimitiveValue(System.Text.Json.Utf8JsonReader@,System.Type,System.Type,Hl7.Fhir.Serialization.PathStack)">
            <summary>
            Does a best-effort parse of the data available at the reader, given the required type of the property the
            data needs to be read into.
            </summary>
            <returns>A value without an error if the data could be parsed to the required type, and a value with an error if the
            value could not be parsed - in which case the value returned is the raw value coming in from the reader.</returns>
            <remarks>Upon completion, the reader will be positioned on the token after the primitive.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.tryGetMatchingNumber(System.Text.Json.Utf8JsonReader@,System.Type,System.Type,Hl7.Fhir.Serialization.PathStack)">
            <summary>
            This function tries to map from the json-format "generic" number to the kind of numeric type defined in the POCO.
            </summary>
            <remarks>Reader must be positioned on a number token. This function will not move the reader to the next token.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.DetermineClassMappingFromInstance(System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.PathStack)">
            <summary>
            Returns the <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> for the object to be deserialized using the `resourceType` property.
            </summary>
            <remarks>Assumes the reader is on the start of an object.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer.tryGetMappedElementMetadata(Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Introspection.ClassMapping,System.Text.Json.Utf8JsonReader@,Hl7.Fhir.Serialization.PathStack,System.String)">
            <summary>
            Given a possibly suffixed property name (as encountered in the serialized form), lookup the
            mapping for the property and the mapping for the value of the property.
            </summary>
            <remarks>In case the name is a choice type, the type suffix will be used to determine the returned
            <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/>, otherwise the <see cref="P:Hl7.Fhir.Introspection.PropertyMapping.ImplementingType"/> is used. As well,
            since the property name is from the serialized form it may also be prefixed by '_'.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer">
            <summary>
            Serializes the contents of an IReadOnlyDictionary[string,object] according to the rules of FHIR Json serialization.
            </summary>
            <remarks>The serializer uses the format documented in https://www.hl7.org/fhir/json.html. Since all POCOs included
            in the SDK implement IReadOnlyDictionary, these methods can be used to serialize POCOs to Json.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.#ctor(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Construct a new serializer for a specific release of FHIR.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.#ctor(Hl7.Fhir.Specification.FhirRelease,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings)">
            <summary>
            Construct a new serializer for a specific release of FHIR.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.Release">
            <summary>
            The release of FHIR for which this serializer is configured.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.Settings">
            <summary>
            The settings that were passed to the constructor.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.Serialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.Utf8JsonWriter)">
            <summary>
            Serializes the given dictionary with FHIR data into Json.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.SerializeToString(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Serializes the given dictionary with FHIR data into a Json string.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.serializeInternal(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.Utf8JsonWriter,System.Boolean)">
            <summary>
            Serializes the given dictionary with FHIR data into Json, optionally skipping the "value" element.
            </summary>
            <remarks>Not serializing the "value" element is useful when serializing FHIR primitives into two properties, one
            with just the value, and one with the id/extensions.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.serializeFhirPrimitiveList(System.String,System.Collections.Generic.IReadOnlyCollection{Hl7.Fhir.Model.PrimitiveType},System.Text.Json.Utf8JsonWriter,System.Type)">
            <summary>
            Serializes a list of FHIR primitives into an array element with the given name
            </summary>
            <remarks>FHIR primitives are handled separately here since they may require
            serialization into two Json properties called "elementName" and "_elementName" and
            may use Json <c>null</c>s as placeholders.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.serializeFhirPrimitive(System.String,Hl7.Fhir.Model.PrimitiveType,System.Text.Json.Utf8JsonWriter,System.Type)">
            <summary>
            Serializes a FHIR primitive into an element with the given name
            </summary>
            <remarks>FHIR primitives are handled separately here since they may require
            serialization into two Json properties called "elementName" and "_elementName".</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer.SerializePrimitiveValue(System.Object,System.Text.Json.Utf8JsonWriter,System.Type)">
            <summary>
            Serialize a primitive .NET value that may occur in the POCOs into Json.
            </summary>
            <remarks>      
            To allow for future additions to the POCOs the list of primitives supported here
            is larger than the set used by the current POCOs. Note that <c>DateTimeOffset</c>c> and 
            <c>byte[]</c> are considered to be "primitive" values here (used as the value in
            <see cref="T:Hl7.Fhir.Model.Instant"/> and <see cref="T:Hl7.Fhir.Model.Base64Binary"/>).
            
            Note that the current version of System.Text.Json only allows numbers
            to be written that fit in .NET's <see cref="T:System.Decimal"/> type, which may be less 
            precision than required by the FHIR specification (http://hl7.org/fhir/json.html#primitive).
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="assembly">Assembly containing the POCO classes to be used for deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.#ctor(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="inspector">The <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> containing the POCO classes to be used for deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.#ctor(System.Reflection.Assembly,Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="assembly">Assembly containing the POCO classes to be used for deserialization.</param>
            <param name="settings">A settings object to be used by this instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.#ctor(Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings)">
            <summary>
            Initializes an instance of the deserializer.
            </summary>
            <param name="inspector">The <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> containing the POCO classes to be used for deserialization.</param>
            <param name="settings">A settings object to be used by this instance.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.Settings">
            <summary>
            The settings that were passed to the constructor.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.TryDeserializeResource(System.Xml.XmlReader,Hl7.Fhir.Model.Resource@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)">
            <summary>
            Deserialize the FHIR xml from the reader and create a new POCO resource containing the data from the reader.
            </summary>
            <param name="reader">An xml reader positioned on the first element, or the beginning of the stream.</param>
            <param name="instance">The result of deserialization. May be incomplete when there are issues.</param>
            <param name="issues">Issues encountered while deserializing. Will be empty when the function returns true.</param>
            <returns><c>false</c> if there are issues, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.TryDeserializeElement(System.Type,System.Xml.XmlReader,Hl7.Fhir.Model.Base@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)">
            <summary>
            Reads a (subtree) of serialzed FHIR Json data into a POCO object.
            </summary>
            <param name="targetType">The type of POCO to construct and deserialize</param>
            <param name="reader">An xml reader positioned on the first element, or the beginning of the stream.</param>
            <param name="instance">The result of deserialization. May be incomplete when there are issues.</param>
            <param name="issues">Issues encountered while deserializing. Will be empty when the function returns true.</param>
            <returns><c>false</c> if there are issues, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.readAttribute(Hl7.Fhir.Model.Base,Hl7.Fhir.Introspection.PropertyMapping,System.String,System.Xml.XmlReader,Hl7.Fhir.Serialization.FhirXmlPocoDeserializerState)">
            Parse current attribute value to set the value property of the target.
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.DetermineClassMappingFromInstance(System.Xml.XmlReader,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.PathStack)">
            <summary>
            Returns the <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> for the object to be deserialized using the root property.
            </summary>
            <remarks>Assumes the reader is on the start of an object.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer.tryGetMappedElementMetadata(Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Introspection.ClassMapping,System.Xml.XmlReader,Hl7.Fhir.Serialization.PathStack,System.String)">
            <summary>
            Given a possibly suffixed property name (as encountered in the serialized form), lookup the
            mapping for the property and the mapping for the value of the property.
            </summary>
            <remarks>In case the name is a choice type, the type suffix will be used to determine the returned
            <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/>, otherwise the <see cref="P:Hl7.Fhir.Introspection.PropertyMapping.ImplementingType"/> is used.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer">
            <summary>
            Serializes the contents of an IReadOnlyDictionary[string,object] according to the rules of FHIR Xml serialization.
            </summary>
            <remarks>The serializer uses the format documented in https://www.hl7.org/fhir/xml.html. Since all POCOs included
            in the SDK implement IReadOnlyDictionary, these methods can be used to serialize POCOs to Xml.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer.Release">
            <summary>
            The release of FHIR for which this serializer is configured.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer.#ctor(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Construct a new serializer for a specific release of FHIR.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer.Serialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Xml.XmlWriter,Hl7.Fhir.Serialization.SerializationFilter)">
            <summary>
            Serializes the given dictionary with FHIR data into Json.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer.SerializeToString(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Hl7.Fhir.Serialization.SerializationFilter)">
            <summary>
            Serializes the given dictionary with FHIR data into UTF8 encoded Json.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer.serializeInternal(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Xml.XmlWriter,Hl7.Fhir.Serialization.SerializationFilter)">
            <summary>
            Serializes the given dictionary with FHIR data into Json, optionally skipping the "value" element.
            </summary>
            <remarks>Not serializing the "value" element is useful when serializing FHIR primitives into two properties, one
            with just the value, and one with the id/extensions.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BaseFhirXmlPocoSerializer.SerializePrimitiveValue(System.String,System.Object,System.Xml.XmlWriter)">
            <summary>
            Serialize a primitive .NET value that may occur in the POCOs into XML.
            </summary>
            <remarks>      
            To allow for future additions to the POCOs the list of primitives supported here
            is larger than the set used by the current POCOs. Note that <c>DateTimeOffset</c>c> and 
            <c>byte[]</c> are considered to be "primitive" values here (used as the value in
            <see cref="T:Hl7.Fhir.Model.Instant"/> and <see cref="T:Hl7.Fhir.Model.Base64Binary"/>).
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.BundleFilter">
            <summary>
            A <see cref="T:Hl7.Fhir.Serialization.SerializationFilter"/> that passes the elements of the root resource
            Bundle untouched, but applies the filter in <see cref="P:Hl7.Fhir.Serialization.BundleFilter.ChildFilter"/> to all nested
            resources.
            </summary>
            <remarks>Used for creating summaries of search results, where the root Bundle is the transport
            and should not itself be summarized or filtered.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BundleFilter.#ctor(Hl7.Fhir.Serialization.SerializationFilter)">
            <summary>
            Creates a new filter, given the filter for its nested resources (e.g. in Bundle.entry).
            </summary>
            <param name="childFilter"></param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.BundleFilter.ChildFilter">
            <summary>
            The filter applies to the nested resources in the Bundle.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.BundleFilter.EnterObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Serialization.BundleFilter.TryEnterMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Serialization.BundleFilter.LeaveMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Serialization.BundleFilter.LeaveObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Serialization.CommonFhirJsonSerializer.SerializeToString(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String[])">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.CommonFhirJsonSerializer.SerializeToStringAsync(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String[])" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.CommonFhirJsonSerializer.SerializeToBytes(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String[])">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.CommonFhirJsonSerializer.SerializeToBytesAsync(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String[])" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.CommonFhirJsonSerializer.Serialize(Hl7.Fhir.Model.Base,Newtonsoft.Json.JsonWriter,Hl7.Fhir.Rest.SummaryType,System.String[])">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.CommonFhirJsonSerializer.SerializeAsync(Hl7.Fhir.Model.Base,Newtonsoft.Json.JsonWriter,Hl7.Fhir.Rest.SummaryType,System.String[])" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.CommonFhirXmlSerializer.SerializeToString(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String,System.String[])">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.CommonFhirXmlSerializer.SerializeToStringAsync(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String,System.String[])" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.CommonFhirXmlSerializer.SerializeToBytes(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String,System.String[])">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.CommonFhirXmlSerializer.SerializeToBytesAsync(Hl7.Fhir.Model.Base,Hl7.Fhir.Rest.SummaryType,System.String,System.String[])" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.CommonFhirXmlSerializer.Serialize(Hl7.Fhir.Model.Base,System.Xml.XmlWriter,Hl7.Fhir.Rest.SummaryType,System.String,System.String[])">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.CommonFhirXmlSerializer.SerializeAsync(Hl7.Fhir.Model.Base,System.Xml.XmlWriter,Hl7.Fhir.Rest.SummaryType,System.String,System.String[])" />
        </member>
        <member name="T:Hl7.Fhir.Serialization.DataAnnotationDeserialzationValidator">
            <summary>
            This validator uses the System.ComponentModel.DataAnnotations attributes to validate an instance,
            but simulates Validator.ValidateObject(), to avoid using reflection and use the cached reflection
            information on <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/> and <see cref="T:Hl7.Fhir.Introspection.PropertyMapping"/>.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.DataAnnotationDeserialzationValidator.NarrativeValidation">
            <summary>
            For performance reasons, validation of Xhtml again the rules specified in the FHIR
            specification for Narrative (http://hl7.org/fhir/narrative.html#2.4.0) is turned off by
            default. Set this property to any other value than <see cref="F:Hl7.Fhir.Validation.NarrativeValidationKind.None"/>
            to perform validation.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DataAnnotationDeserialzationValidator.ValidateProperty(System.Object@,Hl7.Fhir.Serialization.PropertyDeserializationContext@,Hl7.Fhir.Validation.CodedValidationException[]@)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.IDeserializationValidator.ValidateProperty(System.Object@,Hl7.Fhir.Serialization.PropertyDeserializationContext@,Hl7.Fhir.Validation.CodedValidationException[]@)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DataAnnotationDeserialzationValidator.ValidateInstance(System.Object,Hl7.Fhir.Serialization.InstanceDeserializationContext@,Hl7.Fhir.Validation.CodedValidationException[]@)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Serialization.PropertyDeserializationContext">
            <summary>
            Contains contextual information for the property that is currently being deserialized and is passed 
            to delegate methods implementing parts of user-definable deserialization and validation logic.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PropertyDeserializationContext.Path">
            <summary>
            The dotted path leading to this element from the root (has no indexers and includes the value virtual property on primitives)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PropertyDeserializationContext.InstancePath">
            <summary>
            The dotted FhirPath path leading to this element from the root with indexers (and no value property on primitives).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PropertyDeserializationContext.PropertyName">
            <summary>
            The property name for which an instance is currently being deserialized.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PropertyDeserializationContext.LineNumber">
            <summary>
            The approximate line number in the source data that is being deserialized.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PropertyDeserializationContext.LinePosition">
            <summary>
            The approximate line position in the source data that is being deserialized.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.PropertyDeserializationContext.ElementMapping">
            <summary>
            The metadata for the element that is currently being deserialized.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.InstanceDeserializationContext">
            <summary>
            Contains contextual information for the instance that is currently being deserialized and is passed 
            to delegate methods implementing parts of user-definable deserialization and validation logic.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.InstanceDeserializationContext.Path">
            <summary>
            The dotted FhirPath path leading to this element from the root.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.InstanceDeserializationContext.LineNumber">
            <summary>
            The approximate line number in the source data that is being deserialized.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.InstanceDeserializationContext.LinePosition">
            <summary>
            The approximate line position in the source data that is being deserialized.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.InstanceDeserializationContext.InstanceMapping">
            <summary>
            The metadata for the type of which the current property is part of.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.DeserializationFailedException">
            <summary>
            Contains the list of errors detected while deserializing data into .NET POCOs.
            </summary>
            <remarks>The deserializers will continue deserialization in the face of errors, and so will collect the full
            set of errors detected using this aggregate exception.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.DeserializationFailedException.PartialResult">
            <summary>
            The best-effort result of deserialization. Maybe invalid or incomplete because of the errors encountered.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.ElementMetadataFilter">
            <summary>
            Filters elements of a resource so its serialization will only contain elements that are
            selected by this filter.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ElementMetadataFilter.Invert">
            <summary>
            Inverts the logic of the filter: all elements are included, except those matching the filter.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ElementMetadataFilter.IncludeNames">
            <summary>
            The list of top-level elements that the filter will include.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ElementMetadataFilter.IncludeMandatory">
            <summary>
            Include top-level mandatory elements, including all their children
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ElementMetadataFilter.IncludeInSummary">
            <summary>
            Include all elements marked "in summary" in the definition of the element
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ElementMetadataFilter.IncludeIsModifier">
            <summary>
            Include all elements marked "is modifier" in the definition of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ElementMetadataFilter.EnterObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ElementMetadataFilter.LeaveMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ElementMetadataFilter.LeaveObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ElementMetadataFilter.TryEnterMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Serialization.ElementModelSerializationEngine">
            <summary>
            This is an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the
            "old" TypedElement-based parser and serializer. It is used as a switchable serialization
            in the <c>BaseFhirClient</c>.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirSerializationEngineFactory">
            <summary>
            Factory methods for creating the default implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/>, as used by the
            FhirClient.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Legacy">
            <summary>
            A named scope for the factory methods that use the legacy ElementModel-based (de)serializers.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Legacy.FromParserSettings(Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.ParserSettings)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the legacy parser and serializer
            using <see cref="P:Hl7.Fhir.Serialization.ParserSettings.PermissiveParsing"/> set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Legacy.Permissive(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the legacy parser and serializer
            using <see cref="P:Hl7.Fhir.Serialization.ParserSettings.PermissiveParsing"/> set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Legacy.Strict(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the legacy parser and serializer
            with <see cref="P:Hl7.Fhir.Serialization.ParserSettings.PermissiveParsing"/> set to <c>false</c>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Legacy.BackwardsCompatible(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the legacyt parser and serializer
            and is configured to allow errors that could occur when reading data from newer releases of FHIR. Note that this 
            parser may drop data that cannot be captured in the POCO model, such as new elements in future FHIR releases.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Legacy.Ostrich(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the legacy parser and serializer
            configured to allow errors and just continue parsing. Note that this may mean data loss.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Strict(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> configured to flag all parsing errors, 
            which uses the new Poco-based parser and serializer.
            </summary>
            <param name="inspector"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Recoverable(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> configured to ignore recoverable errors, 
            which uses the new Poco-based parser and serializer.
            </summary>
            <param name="inspector"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.BackwardsCompatible(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the new Poco-based parser and 
            serializers and is configured to allow errors that could occur when reading data from newer releases of FHIR.
            Note that this parser may drop data that cannot be captured in the POCO model, such as new elements in future
            FHIR releases.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirSerializationEngineFactory.Ostrich(Hl7.Fhir.Introspection.ModelInspector)">
            <summary>
            Create an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> configured to allow errors
            and just continue parsing. Note that this may mean data loss.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.IFhirSerializationEngine">
            <summary>
            Represents an object that can serialize/deserialize FHIR data from the supported
            serialization formats.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.IFhirSerializationEngine.DeserializeFromXml(System.String)">
            <summary>
            Deserialize an XML string to a FHIR Resource POCO.
            </summary>
            <exception cref="T:Hl7.Fhir.Serialization.DeserializationFailedException">Thrown when the deserializer encountered one or more errors in the FHIR Xml format.</exception>
            <returns>Null if the data did not contain a resource, but another FHIR datatype.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.IFhirSerializationEngine.DeserializeFromJson(System.String)">
            <summary>
            Deserialize a Json string to a FHIR Resource POCO.
            </summary>
            <exception cref="T:Hl7.Fhir.Serialization.DeserializationFailedException">Thrown when the deserializer encountered one or more errors in the FHIR Json format.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.IFhirSerializationEngine.SerializeToXml(Hl7.Fhir.Model.Resource)">
            <summary>
            Serialize a FHIR Resource POCO into a string of Xml.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.IFhirSerializationEngine.SerializeToJson(Hl7.Fhir.Model.Resource)">
            <summary>
            Serialize a FHIR Resource POCO into a string of Json.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.PocoDeserializationExtensions">
            <summary>
            Extension methods that provide additional utility methods for deserialization on top of
            the TryDeserialize() functions of the json and xml deserializers.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeResource(Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer,System.Xml.XmlReader)">
            <summary>
            Deserialize the FHIR xml from the reader and create a new POCO resource containing the data from the reader.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="reader">An xml reader positioned on the first element, or the beginning of the stream.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeResource(Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer,System.String)">
            <summary>
            Deserialize the FHIR xml from a string and create a new POCO resource containing the data from the reader.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="data">A string containing the XML from which to deserialize the resource.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.TryDeserializeResource(Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer,System.String,Hl7.Fhir.Model.Resource@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)">
            <summary>
            Deserialize the FHIR xml from a string and create a new POCO resource containing the data from the reader.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="data">A string containing the XML from which to deserialize the resource.</param>
            <param name="instance">The result of deserialization. May be incomplete when there are issues.</param>
            <param name="issues">Issues encountered while deserializing. Will be empty when the function returns true.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeElement(Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer,System.Type,System.Xml.XmlReader)">
            <summary>
            Reads a (subtree) of serialized FHIR Xml data into a POCO object.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="targetType">The type of POCO to construct and deserialize</param>
            <param name="reader">An xml reader positioned on the first element, or the beginning of the stream.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeElement``1(Hl7.Fhir.Serialization.BaseFhirXmlPocoDeserializer,System.Xml.XmlReader)">
            <summary>
            Reads a (subtree) of serialized FHIR Xml data into a POCO object.
            </summary>
            <typeparam name="T">The type of POCO to construct and deserialize</typeparam>
            <param name="deserializer">The deserializer to use.</param>
            <param name="reader">An xml reader positioned on the first element, or the beginning of the stream.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeResource(Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer,System.Text.Json.Utf8JsonReader@)">
            <summary>
            Deserialize the FHIR Json from the reader and create a new POCO object containing the data from the reader.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="reader">A json reader positioned on the first token of the object, or the beginning of the stream.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeResource(Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer,System.String)">
            <summary>
            Deserialize the FHIR Json from the reader and create a new POCO object containing the data from the reader.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="json">A string of json.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.TryDeserializeResource(Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer,System.String,Hl7.Fhir.Model.Resource@,System.Collections.Generic.IEnumerable{Hl7.Fhir.Utility.CodedException}@)">
            <summary>
            Deserialize the FHIR Json from the reader and create a new POCO object containing the data from the reader.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="json">A string of json.</param>
            <param name="instance">The result of deserialization. May be incomplete when there are issues.</param>
            <param name="issues">Issues encountered while deserializing. Will be empty when the function returns true.</param>
            <returns><c>false</c> if there are issues, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeObject(Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer,System.Type,System.Text.Json.Utf8JsonReader@)">
            <summary>
            Reads a (subtree) of serialized FHIR Json data into a POCO object.
            </summary>
            <param name="deserializer">The deserializer to use.</param>
            <param name="targetType">The type of POCO to construct and deserialize</param>
            <param name="reader">A json reader positioned on the first token of the object, or the beginning of the stream.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns> 
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoDeserializationExtensions.DeserializeObject``1(Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer,System.Text.Json.Utf8JsonReader@)">
            <summary>
            Reads a (subtree) of serialzed FHIR Json data into a POCO object.
            </summary>
            <typeparam name="T">The type of POCO to construct and deserialize</typeparam>
            <param name="deserializer">The deserializer to use.</param>
            <param name="reader">A json reader positioned on the first token of the object, or the beginning of the stream.</param>
            <returns>A fully initialized POCO with the data from the reader.</returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.PocoSerializationEngine">
            <summary>
            This is an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> which uses the
            new Poco-based parser and serializer, initialized with the default settings.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoSerializationEngine.#ctor(Hl7.Fhir.Introspection.ModelInspector,System.Predicate{Hl7.Fhir.Utility.CodedException},Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings,Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings)">
            <summary>
            Creates an implementation of <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> that uses the newer POCO (de)serializers.
            </summary>
            <param name="inspector">Reflection data of the POCO model to use.</param>
            <param name="ignoreFilter">Predicate specifying which exceptions to ignore</param>
            <param name="jsonSettings">Settings for json deserializing</param>
            <param name="xmlSettings">Settings for xml deserializing</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoSerializationEngine.DeserializeFromXml(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Serialization.PocoSerializationEngine.DeserializeFromJson(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Serialization.ExceptionAggregator">
            <summary>
            This class is used by the deserializers to collect errors while performing deserialization.
            </summary>
            <remarks>Is probably going to be used by the (future)XmlDynamicDeserializer too.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirFileFormats">
            <summary>Provides generic definitions and methods for FHIR file formats supported by the API.</summary>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirFileFormats.XmlFileExtension">
            <summary>Default Xml file extension: ".xml"</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirFileFormats.JsonFileExtension">
            <summary>Default Json file extension: ".json"</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasXmlExtension(System.String)">
            <summary>Determines if the file extension equals ".xml" (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasJsonExtension(System.String)">
            <summary>Determines if the file extension equals ".json" (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasXmlOrJsonExtension(System.String)">
            <summary>Determines if the file extension equals ".xml" or ".json" (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirFileFormats.HasExtension(System.String,System.String)">
            <summary>Determines if the file extension equals the specified value (case insensitive).</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.writeTo(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.JsonWriter,System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.writeToAsync(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.JsonWriter,System.String)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.WriteTo(Hl7.Fhir.ElementModel.ITypedElement,Newtonsoft.Json.JsonWriter,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.WriteToAsync(Hl7.Fhir.ElementModel.ITypedElement,Newtonsoft.Json.JsonWriter,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.WriteTo(Hl7.Fhir.ElementModel.ISourceNode,Newtonsoft.Json.JsonWriter,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.WriteToAsync(Hl7.Fhir.ElementModel.ISourceNode,Newtonsoft.Json.JsonWriter,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.ToJson(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.ToJsonAsync(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.ToJson(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.ToJsonAsync(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.ToJsonBytes(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonBuilderExtensions.ToJsonBytesAsync(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirJsonSerializationSettings)" />
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonConverterFactory">
            <summary>
            A converter factory to construct FhirJsonConverters for subclasses of <see cref="T:Hl7.Fhir.Model.Base"/>.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonConverter`1">
            <summary>
            FHIR Resource and datatype converter for FHIR deserialization.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.#ctor(System.Reflection.Assembly,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <summary>
            Constructs a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> that (de)serializes FHIR json for the 
            POCOs in a given assembly.
            </summary>
            <param name="assembly">The assembly containing classes to be used for deserialization.</param>
            <param name="serializerSettings">The optional features used during serialization.</param>
            <param name="deserializerSettings">The optional features used during deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.#ctor(Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <summary>
            Constructs a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> that (de)serializes FHIR json for the 
            POCOs in a given assembly.
            </summary>
            <param name="inspector">The <see cref="T:Hl7.Fhir.Introspection.ModelInspector" /> containing classes to be used for deserialization.</param>
            <param name="serializerSettings">The optional features used during serialization.</param>
            <param name="deserializerSettings">The optional features used during deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.#ctor(Hl7.Fhir.Serialization.BaseFhirJsonPocoDeserializer,Hl7.Fhir.Serialization.BaseFhirJsonPocoSerializer)">
            <summary>
            Constructs a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> that (de)serializes FHIR json for the 
            POCOs in a given assembly.
            </summary>
            <param name="deserializer">A custom deserializer to be used by the json converter.</param>
            <param name="serializer">A customer serializer to be used by the json converter.</param>
            <remarks>Since the standard serializer/deserializer will allow you to override its behaviour to produce
            custom behaviour, this constructor will allow the developer to use such custom serializers/deserializers instead
            of the defaults.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether the specified type can be converted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonConverter`1.SerializationFilter">
            <summary>
            The filter used to serialize a summary of the resource.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to a typed object.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonException">
            <summary>
            An error found during deserialization of Json data. These errors do not present issues
            with the Json itself, but issues in the data with regards to the rules for FHIR Json format described
            in http://hl7.org/fhir/json.html.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonException.IsRecoverableIssue(Hl7.Fhir.Serialization.FhirJsonException)">
            <summary>
            Whether this issue leads to dataloss or not. Recoverable issues mean that all data present in the parsed data could be retrieved and
            captured in the POCO model, even if the syntax or the data was not fully FHIR compliant.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonException.AllowedForBackwardsCompatibility(Hl7.Fhir.Utility.CodedException)">
            <summary>
            An issue is allowable for backwards compatibility if it could be caused because an older parser encounters data coming from a newer 
            FHIR release. This means allowing unknown elements, codes and types in a choice element. Note that the POCO model cannot capture
            these newer elements and data, so this means data loss may occur.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonNode.Read(Newtonsoft.Json.JsonReader,System.String,Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonNode.ReadAsync(Newtonsoft.Json.JsonReader,System.String,Hl7.Fhir.Serialization.FhirJsonParsingSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonNode.Parse(System.String,System.String,Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirJsonNode.ParseAsync(System.String,System.String,Hl7.Fhir.Serialization.FhirJsonParsingSettings)" />
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings">
            <summary>Parser configuration settings for the <see cref="T:Hl7.Fhir.Serialization.FhirJsonNode"/> class.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonParsingSettings.PermissiveParsing">
            <summary>
            Do not raise exceptions for recoverable errors.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonParsingSettings.AllowJsonComments">
            <summary>
            Allow DSTU2-style Json comment members.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonParsingSettings.ValidateFhirXhtml">
            <summary>
            Validate narrative against the FHIR Xhtml schema.
            </summary>
            <remarks>Validation of xhtml is expensive, so turned off by default.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonParsingSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonParsingSettings.#ctor(Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonParsingSettings.CopyTo(Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonParsingSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonParsingSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings">
            <summary>
            Specify the optional features for Json deserialization.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings.DisableBase64Decoding">
            <summary>
            If the caller will not access base64 data in the deserialized resources, base64 decoding
            of <see cref="T:Hl7.Fhir.Model.Base64Binary"/> values can be turned off to increase performance.
            </summary>
            <remarks>The <see cref="T:Hl7.Fhir.Model.Base64Binary" /> element's <see cref="P:Hl7.Fhir.Model.PrimitiveType.ObjectValue" /> will
            still contain the unparsed base64 data and will therefore be retained and round-tripped.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings.OnPrimitiveParseFailed">
            <summary>
            If set, this delegate is called when the deserializer fails to parse a primitive json value.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings.Validator">
            <summary>
            If set, this validator is invoked before the value is set in the object under construction to validate
            and possibly alter the value. Setting this property to <c>null</c> will disable validation completely.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings.ValidateOnFailedParse">
            <summary>
            Perform the parse time validation on the deserialized object even if parsing issues occurred.
            </summary>
            <remarks>
            This is useful for "strict mode" once pass validators and may result in spurious error messages
            from validating incomplete content.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings.AnnotateResourceParseExceptions">
            <summary>
            During parsing any contained resources (such as those in a bundle) that encounter some form of parse/validation exception
            will have a <c>List&lt;CodedException&gt;</c> of these exceptions added as an annotation to the child resource.
            </summary>
            <remarks>
            This is primarily added to ease the processing of bundles during a batch submission.
            (without requiring processing fhirpath expressions in the issues in the parsing operation outcome to determine if a 
            resource was clean and possibly ok to process).
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.PrimitiveParseHandler">
            <summary>
            A callback that can handle parsing failures for primitive types.
            </summary>
            <param name="reader">A json reader positioned on the primitive value that failed to parse.</param>
            <param name="targetType">The .NET type the deserializer needs this handler to return to be able to update the POCO under construction.</param>
            <param name="originalValue">The value the deserializer would have returned if this handler was not installed.</param>
            <param name="originalException">The exception the deserializer would have raised if this handler was not installed.</param>
            <remarks>Returns an object, an error or both depending on whether the handler succeeded in parsing. The returned exception
            may be the <c>originalException</c> and the returned value the <c>originalValue</c>.
            If both are returned, the parsing is considered to have failed, with the returned object as the partially parsed result.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings">
            <summary>
            Specify the optional features for Json serialization.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings.SummaryFilter">
            <summary>
            Specifies the filter to use for summary serialization.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.Serialization.FhirJsonBuilder"/> class.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.IgnoreUnknownElements">
            <summary>
            When encountering a member without type information, just skip it instead of reporting an error.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.Pretty">
            <summary>
            Format the json output when converted to a string.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.AppendNewLine">
            <summary>
            Add new line at the end of the json output when converted to a string.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.#ctor(Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.CopyTo(Hl7.Fhir.Serialization.FhirJsonSerializationSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirJsonSerializationSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirSerializationFormats">
            <summary>String constants that represent FHIR resource serialization formats supported by the API.</summary>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirFileFormats"/>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirSerializationFormats.Xml">
            <summary>Represents the FHIR XML resource serialization format.</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirSerializationFormats.Json">
            <summary>Represents the FHIR JSON resource serialization format.</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirSerializationFormats.All">
            <summary>Returns an array of all defined serialization formats.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.writeTo(System.Xml.Linq.XDocument,System.Xml.XmlWriter)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.writeToAsync(System.Xml.Linq.XDocument,System.Xml.XmlWriter)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.WriteTo(Hl7.Fhir.ElementModel.ISourceNode,System.Xml.XmlWriter,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.WriteToAsync(Hl7.Fhir.ElementModel.ISourceNode,System.Xml.XmlWriter,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.WriteTo(Hl7.Fhir.ElementModel.ITypedElement,System.Xml.XmlWriter,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.WriteToAsync(Hl7.Fhir.ElementModel.ITypedElement,System.Xml.XmlWriter,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.ToXml(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.ToXmlAsync(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.ToXml(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.ToXmlAsync(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.ToXmlBytes(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlBuilderExtensions.ToXmlBytesAsync(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Serialization.FhirXmlSerializationSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlException.IsRecoverableIssue(Hl7.Fhir.Serialization.FhirXmlException)">
            <summary>
            Whether this issue leads to dataloss or not. Recoverable issues mean that all data present in the parsed data could be retrieved and
            captured in the POCO model, even if the syntax or the data was not fully FHIR compliant.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlException.AllowedForBackwardsCompatibility(Hl7.Fhir.Utility.CodedException)">
            <summary>
            An issue is allowable for backwards compatibility if it could be caused because an older parser encounters data coming from a newer 
            FHIR release. This means allowing unknown elements, attributes, codes and types in a choice element. Note that the POCO model cannot capture
            these newer elements and data, so this means data loss may occur.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlNode.Read(System.Xml.XmlReader,Hl7.Fhir.Serialization.FhirXmlParsingSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlNode.ReadAsync(System.Xml.XmlReader,Hl7.Fhir.Serialization.FhirXmlParsingSettings)" />
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlNode.Parse(System.String,Hl7.Fhir.Serialization.FhirXmlParsingSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.FhirXmlNode.ParseAsync(System.String,Hl7.Fhir.Serialization.FhirXmlParsingSettings)" />
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings">
            <summary>Parser configuration settings for the <see cref="T:Hl7.Fhir.Serialization.FhirXmlNode"/> class.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlParsingSettings.AllowedExternalNamespaces">
            <summary>
            A list of namespaces which are allowed in addition to the normal FHIR namespaces. 
            </summary>
            <remarks>Normally, the only allowed namespaces are 'http://hl7.org/fhir' and the XHTML namespace.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlParsingSettings.DisallowSchemaLocation">
            <summary>
            Raise an errors when an xsi:schemaLocation attribute is found on the root.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlParsingSettings.PermissiveParsing">
            <summary>
            Do not raise exceptions for recoverable errors.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlParsingSettings.ValidateFhirXhtml">
            <summary>
            Validate narrative against the FHIR Xhtml schema.
            </summary>
            <remarks>Validation of xhtml is expensive, so turned off by default.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlParsingSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlParsingSettings.#ctor(Hl7.Fhir.Serialization.FhirXmlParsingSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlParsingSettings.CopyTo(Hl7.Fhir.Serialization.FhirXmlParsingSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlParsingSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlParsingSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirJsonSerializationSettings"/> instance with default property values.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings.DisableBase64Decoding">
            <summary>
            If the caller will not access base64 data in the deserialized resources, base64 decoding
            of <see cref="T:Hl7.Fhir.Model.Base64Binary"/> values can be turned off to increase performance.
            </summary>
            <remarks>The <see cref="T:Hl7.Fhir.Model.Base64Binary" /> element's <see cref="P:Hl7.Fhir.Model.PrimitiveType.ObjectValue" /> will
            still contain the unparsed base64 data and will therefore be retained and round-tripped.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings.Validator">
            <summary>
            If set, this validator is invoked before the value is set in the object under construction to validate
            and possibly alter the value. Setting this property to <c>null</c> will disable validation completely.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings.ValidateOnFailedParse">
            <summary>
            Perform the parse time validation on the deserialized object even if parsing issues occurred.
            </summary>
            <remarks>
            This is useful for "strict mode" once pass validators and may result in spurious error messages
            from validating incomplete content.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlPocoDeserializerSettings.AnnotateResourceParseExceptions">
            <summary>
            During parsing any contained resources (such as those in a bundle) that encounter some form of parse/validation exception
            will have a <c>List&lt;CodedException&gt;</c> of these exceptions added as an annotation to the child resource.
            </summary>
            <remarks>
            This is primarily added to ease the processing of bundles during a batch submission.
            (without requiring processing fhirpath expressions in the issues in the parsing operation outcome to determine if a 
            resource was clean and possibly ok to process).
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.FhirXmlSerializationSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.Serialization.FhirXmlBuilder"/> class.</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.IgnoreUnknownElements">
            <summary>
            When encountering a member without type information, just skip it instead of reporting an error.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.Pretty">
            <summary>
            Format the xml output when converted to a string.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.AppendNewLine">
            <summary>
            Add new line at the end of the xml output when converted to a string.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.TrimWhitespaces">
            <summary>
            Trims whitespaces add the beginning and the end of xml value attributes
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlSerializationSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.#ctor(Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlSerializationSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.CopyTo(Hl7.Fhir.Serialization.FhirXmlSerializationSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.FhirXmlSerializationSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlSerializationSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.FhirXmlSerializationSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.FhirXmlSerializationSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.IDeserializationValidator">
            <summary>
            A validator that will be run to validate values while deserializing a POCO.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.IDeserializationValidator.ValidateProperty(System.Object@,Hl7.Fhir.Serialization.PropertyDeserializationContext@,Hl7.Fhir.Validation.CodedValidationException[]@)">
            <summary>
            Implements validation logic to be run on a property value just before that value is used 
            to initialize the property.
            </summary>
            <param name="instance">The instance to be validated.</param>
            <param name="context">The current context of deserialization, like the path and the type under deserialization.</param>
            <param name="reportedErrors">null, zero or more validation errors which will be aggregated in the final result of deserialization.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.IDeserializationValidator.ValidateInstance(System.Object,Hl7.Fhir.Serialization.InstanceDeserializationContext@,Hl7.Fhir.Validation.CodedValidationException[]@)">
            <summary>
            Implements validation logic to be run on a deserialized instance.
            </summary>
            <param name="instance">The instance to be validated</param>
            <param name="context">The current context of deserialization, like the path and the type under deserialization.</param>
            <param name="reportedErrors">null, zero or more validation errors which will be aggregated in the final result of deserialization.</param>
        </member>
        <member name="T:Hl7.Fhir.Serialization.ISeekableEnumerator`1">
            <summary>
            Represents a stream of resources which is both enumerable and enables the user to return to previous positions.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.INavigatorStream">
            <summary>
            Provides a sequence of <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instances to efficiently
            extract information from a raw FHIR resource file, independent of the
            underlying resource serialization format. Also supports resource bundles.
            </summary>
            <remarks>
            Implements <see cref="T:System.Collections.Generic.IEnumerator`1"/>, but not <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Iteration state is tied to the stream instance.
            Nested enumeration is NOT supported.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.INavigatorStream.ResourceType">
            <summary>The typename of the underlying resource (container).</summary>
            <remarks>Call Current.Type to determine the type of the currently enumerated resource.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.INavigatorStream.IsBundle">
            <summary>Returns <c>true</c> if the underlying file represents a Bundle resource, or <c>false</c> otherwise.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.JsonNavigatorStream">
            <summary>
            Provides efficient extraction of summary information from a raw FHIR JSON resource file,
            without actually deserializing the full resource. Also supports resource bundles.
            </summary>
            <remarks>Replacement for JsonArtifactScanner (now obsolete).</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.FromPath(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified serialized json resource file.</summary>
            <param name="path">The filepath of a serialized json resource.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.FromPath(System.String,System.Boolean,Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified serialized json resource file.</summary>
            <param name="path">The filepath of a serialized json resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Dispose"/> method should also dispose the internal <see cref="T:System.IO.Stream"/> instance.</param>
            <param name="settings">Parser settings that control de-serialization behavior.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.#ctor(System.IO.Stream)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified json resource stream.</summary>
            <param name="stream">A stream that returns a serialized json resource.</param>
            <remarks>The <see cref="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Dispose"/> method also disposes the specified <paramref name="stream"/> instance.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified json resource stream.</summary>
            <param name="stream">A stream that returns a serialized json resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.#ctor(System.IO.Stream,System.Boolean,Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.JsonNavigatorStream"/> instance for the specified json resource stream.</summary>
            <param name="stream">A stream that returns a serialized json resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
            <param name="settings">Parser settings that control de-serialization behavior.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.ResourceType">
            <summary>The typename of the underlying resource (container).</summary>
            <remarks>Call Current.Type to determine the type of the currently enumerated resource.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.IsBundle">
            <summary>Returns <c>true</c> if the underlying file represents a Bundle resource, or <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Reset">
            <summary>
            Reset the stream to the start position.
            Requires the internal stream, as specified in the ctor, to support seeking.
            </summary>
            <exception cref="T:System.NotSupportedException">The internal stream does not support seeking.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonNavigatorStream.Seek(System.String)">
            <summary>Navigate to the artifact with the specified uri.</summary>
            <param name="position">The uri of the target artifact.</param>
            <returns><c>true</c> if found, or <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotSupportedException">The internal stream does not support seeking.</exception>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.Position">
            <summary>Returns the full resource uri of the current artifact.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.Current">
            <summary>Returns a new <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance for the current entry.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.JsonNavigatorStream.ParserSettings">
            <summary>Gets the configuration settings that control parsing behavior.</summary>
            <value>Returns a (non-<c>null</c>) <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> instance.</value>
        </member>
        <member name="T:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions">
            <summary>
            Utility extension method to initialize the <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use the System.Text.Json
            based (de)serializers.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)">
            <summary>
            Initialize the options to serialize using the JsonFhirConverter, producing compact output without whitespace.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Serialization.FhirJsonPocoSerializerSettings,Hl7.Fhir.Serialization.FhirJsonPocoDeserializerSettings)">
            <inheritdoc cref="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir(System.Text.Json.JsonSerializerOptions,Hl7.Fhir.Serialization.FhirJsonConverterFactory)">
            <summary>
            Initialize the options to serialize using the JsonFhirConverterFactory, producing compact output without whitespace.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.ForFhir``1(System.Text.Json.JsonSerializerOptions,Hl7.Fhir.Serialization.FhirJsonConverter{``0})">
            <summary>
            Initialize the options to serialize using the JsonFhirConverter, producing compact output without whitespace.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.Compact(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Initialize the options to serialize using the JsonFhirConverter, producing compact output without whitespace.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.JsonSerializerOptionsExtensions.Pretty(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Initialize the options to serialize using the JsonFhirConverter, producing pretty output.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.NavigatorStreamFactory">
            <summary>Delegate to create an <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance for the specified file path specification.</summary>
            <param name="filePath">The full path to a FHIR resource.</param>
            <returns>An <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance, or <c>null</c> if the file format is not recognized.</returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory">
            <summary>
            Factory to create new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instances for navigating
            serialized resources, independent of the underlying resource serialization format.
            <para>
            The internal XML and JSON parsers use the default configuration settings.
            Alternatively, use <see cref="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory"/> to specify custom parser settings.
            </para>
            </summary>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
            <seealso cref="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.IO.Stream,System.String)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource stream, independent of the serialization format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> for reading a serialized FHIR resource.</param>
            <param name="format">A string value that represents the FHIR resource serialization format, as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</returns>
            <remarks>Supports XML and JSON serialization formats.</remarks>
            <exception cref="T:System.NotSupportedException">The specified FHIR resource serialization format is not supported.</exception>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource stream, independent of the serialization format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> for reading a serialized FHIR resource.</param>
            <param name="format">A string value that represents the FHIR resource serialization format, as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>.</param>
            <param name="disposeStream">Determines if the <see cref="M:System.IDisposable.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</returns>
            <remarks>Supports XML and JSON serialization formats.</remarks>
            <exception cref="T:System.NotSupportedException">The specified FHIR resource serialization format is not supported.</exception>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.GetSerializationFormat(System.String)">
            <summary>Determines serialization format by inspecting the file extension.</summary>
            <param name="path">File path to a FHIR artifact.</param>
            <returns>A constant string value as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource, independent of the underlying resource serialization format.
            </summary>
            <param name="path">File path specification of a FHIR resource file.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance, or <c>null</c> (unsupported file extension).</returns>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
        </member>
        <member name="F:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.FactoryDelegate">
            <summary><see cref="T:Hl7.Fhir.Serialization.NavigatorStreamFactory"/> delegate for the <see cref="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.String)"/> method.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory.Create(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource, independent of the underlying resource serialization format.
            </summary>
            <param name="path">File path specification of a FHIR resource file.</param>
            <param name="disposeStream">Determines if the <see cref="M:System.IDisposable.Dispose"/> method should also dispose the internal <see cref="T:System.IO.Stream"/> instance.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance, or <c>null</c> (unsupported file extension).</returns>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory">
            <summary>
            Factory to create new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instances for navigating
            serialized resources, independent of the underlying resource serialization format.
            <para>
            The internal XML and JSON parsers use the specified configuration settings.
            Alternatively, use the <see cref="T:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory"/> to use default parser configuration settings.
            </para>
            </summary>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
            <seealso cref="T:Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.CreateDefault">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory"/> instance for the default parser settings.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.GetSerializationFormat(System.String)">
            <summary>Determines serialization format by inspecting the file extension.</summary>
            <param name="path">File path to a FHIR artifact.</param>
            <returns>A constant string value as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.#ctor(Hl7.Fhir.Serialization.FhirXmlParsingSettings,Hl7.Fhir.Serialization.FhirJsonParsingSettings)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory"/> instance for the specified parser configuration settings.</summary>
            <param name="xmlParsingSettings">Configuration settings that control the behavior of the internal XML parser.</param>
            <param name="jsonParsingSettings">Configuration settings that control the behavior of the internal JSON parser.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.#ctor(System.Boolean)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory"/> instance.</summary>
            <param name="permissiveParsing">Specify <c>true</c> to suppress raising exceptions for recoverable parsing errors.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.DisposeStream">
            <summary>Determines if disposing the <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> should also dispose the internal <see cref="T:System.IO.Stream"/> instance.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.ThrowOnUnsupportedFormat">
            <summary>
            Gets or sets a boolean value that controls behavior of the <see cref="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.Create(System.String)"/>
            methods when encountering an unsupported file/serialization format.
            <para>
            If <c>true</c>, throw a <see cref="T:System.NotSupportedException"/>, otherwise (<c>false</c>) return <c>null</c>.
            </para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.XmlParsingSettings">
            <summary>Gets the configuration settings that control the behavior of the XML parser.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.JsonParsingSettings">
            <summary>Gets the configuration settings that control the behavior of the JSON parser.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.Create(System.IO.Stream,System.String)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource stream, independent of the serialization format,
            using the current <see cref="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.XmlParsingSettings"/> or <see cref="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.JsonParsingSettings"/>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> for reading a serialized FHIR resource.</param>
            <param name="format">A string value that represents the FHIR resource serialization format, as defined by <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</returns>
            <remarks>Supports XML and JSON serialization formats.</remarks>
            <exception cref="T:System.NotSupportedException">The specified FHIR resource serialization format is not supported.</exception>
            <seealso cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance to access the contents of a
            serialized resource, independent of the underlying resource serialization format,
            using the current <see cref="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.XmlParsingSettings"/> or <see cref="P:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory.JsonParsingSettings"/>.
            </summary>
            <param name="path">File path specification of a FHIR resource file.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance, or <c>null</c> (unsupported file extension).</returns>
            <remarks>Supports FHIR resource files with ".xml" and ".json" extensions.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Serialization.NavigatorStreamHelper">
            <summary>Common utility methods for <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> implementations.</summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.NavigatorStreamHelper.DefaultCanonicalBaseUrlForBundleEntry">
            <summary>Default base url for generating canonical urls for Bundle entries.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.NavigatorStreamHelper.FormatCanonicalUrlForBundleEntry(System.String,System.String)">
            <summary>Generate a canonical url for a Bundle entry.</summary>
            <param name="resourceType">A resource type.</param>
            <param name="resourceId">A unique resource Id.</param>
            <returns>A fully qualified canonical url string.</returns>
            <remarks>The generated url starts with the <see cref="F:Hl7.Fhir.Serialization.NavigatorStreamHelper.DefaultCanonicalBaseUrlForBundleEntry"/>.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.NavigatorStreamHelper.FormatCanonicalUrl(System.String,System.String,System.String)">
            <summary>Generate a canonical url from the specified base Url, resource type and id.</summary>
            <param name="baseUrl">A base url.</param>
            <param name="resourceType">A resource type.</param>
            <param name="resourceId">A unique resource Id.</param>
            <returns>A fully qualified canonical url string.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.OperationOutcomeExtensions.ToOperationOutcome(Hl7.Fhir.Serialization.DeserializationFailedException)">
            <summary>
            Convert to an OperationOutcome
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="F:Hl7.Fhir.Serialization.OperationOutcomeExtensions.ValidationErrorMessageCodeSystem">
            <summary>
            CodeSystem to be used in generating error messages in the OperationOutcome
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.OperationOutcomeExtensions.ToIssue(Hl7.Fhir.Utility.ExtendedCodedException)">
            <summary>
            Convert to an OperationOutcome.Issue
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Serialization.ParserSettings">
            <summary>Common parser configuration settings for BaseFhirParser and subclasses.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ParserSettings.DisallowXsiAttributesOnRoot">
            <summary>
            Raise an error when an xsi:schemaLocation is encountered.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ParserSettings.AllowUnrecognizedEnums">
            <summary>
            Do not throw when encountering values not parseable as a member of an enumeration in a Poco.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ParserSettings.AcceptUnknownMembers">
            <summary>
            Do not throw when the data has an element that does not map to a property in the Poco.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ParserSettings.PermissiveParsing">
            <summary>
            Do not raise exceptions for recoverable errors.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ParserSettings.TruncateDateTimeToDate">
            <summary>
            Allow to parse a FHIR dateTime values into an element of type date.
            </summary>
            <remarks>
            Needed for backward compatibility with old parser for resources which were saved and considered valid in the past.
            </remarks>>
        </member>
        <member name="P:Hl7.Fhir.Serialization.ParserSettings.ExceptionHandler">
            <summary>
            A Handler to permit intercepting Exceptions during parsing
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ParserSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.ParserSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ParserSettings.#ctor(Hl7.Fhir.Serialization.ParserSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.ParserSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ParserSettings.CopyTo(Hl7.Fhir.Serialization.ParserSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.ParserSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ParserSettings.CopyTo(Hl7.Fhir.Serialization.PocoBuilderSettings)">
            <summary>
            Copy the necessary settings to PocoBuilderSettings
            </summary>
            <param name="settings">The instance where the settings are copied to.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ParserSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.ParserSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.ParserSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.ParserSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.PathStack">
            <summary>
            Tracks the position within an instance as a dotted path. Used in diagnostics for the parser/serializers.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PathStack.GetPath">
            <summary>
            Return the definition path (has no indexes). Note: in contained resources, this is just the path within the contained resource.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.PathStack.GetInstancePath">
            <summary>
            Return the fhirpath that includes the indexes. Note: in contained resources, this is just the path within the contained resource.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.SourceComments.CommentsBefore">
            <summary>
            Comments encountered before this node, but after the previous sibling
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.SourceComments.ClosingComments">
            <summary>
            Comments encountered after the last child of this element
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Serialization.SourceComments.DocumentEndComments">
            <summary>
            Comments encountered after the root element of the document
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.SerializationFilter">
            <summary>
            A filter that instructs the serializers which parts of a tree to serialize.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.EnterObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <summary>
            The serializer calls this function when it starts serializing a complex object.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.TryEnterMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <summary>
            The serializer calls this function when it needs to serialize the subtree contained in an element.
            When this function return false, the subtree will not be serialized.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.LeaveMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <summary>
            The serializer calls this function when it is done serializing the subtree for an element.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.LeaveObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <summary>
            The serializer calls this function when it is done serializing a complex object.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.ForSummary">
            <summary>
            Construct a new filter that conforms to the `_summary=true` summarized form.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.ForText">
            <summary>
            Construct a new filter that conforms to the `_summary=text` summarized form.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.ForData">
            <summary>
            Construct a new filter that conforms to the `_summary=data` summarized form.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializationFilter.ForElements(System.String[])">
            <summary>
            Construct a new filter that conforms to the `_elements=...` summarized form.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.SerializerSettings.Pretty">
            <summary>
            Format the serialized xml or json output.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.SerializerSettings.AppendNewLine">
            <summary>
            Add new line at the end of the serialized xml or json output.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.SerializerSettings.TrimWhiteSpacesInXml">
            <summary>
            Trim whitespaces at the beginning and end of xml attribute value
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.SerializerSettings.IncludeMandatoryInElementsSummary">
            <summary>
            Include mandatory elements when serializing a subset of chosen elements (_elements). 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializerSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Serialization.SerializerSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializerSettings.#ctor(Hl7.Fhir.Serialization.SerializerSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Serialization.SerializerSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializerSettings.CopyTo(Hl7.Fhir.Serialization.SerializerSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Serialization.SerializerSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializerSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.SerializerSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.SerializerSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Serialization.SerializerSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Serialization.TopLevelFilter">
            <summary>
            A filter that applies one filter to the top-level elements, and if such a filter allows
            an element to pass, another filter to the child elements of that top-level element.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.TopLevelFilter.#ctor(Hl7.Fhir.Serialization.SerializationFilter,Hl7.Fhir.Serialization.SerializationFilter)">
            <summary>
            Constructs a filter given a filter for the top-level elements and an optional filter for the
            children of top-level elements that matches the top-level filter.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.TopLevelFilter.ToplevelFilter">
            <summary>
            The filter that is applied to the top-level elements.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.TopLevelFilter.ChildrenFilter">
            <summary>
            The filter that is applied to children of top-level elements.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.TopLevelFilter.EnterObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.TopLevelFilter.LeaveObject(System.Object,Hl7.Fhir.Introspection.ClassMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.TopLevelFilter.LeaveMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Serialization.TopLevelFilter.TryEnterMember(System.String,System.Object,Hl7.Fhir.Introspection.PropertyMapping)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Serialization.XmlNavigatorStream">
            <summary>
            Provides efficient extraction of summary information from a raw FHIR XML resource file,
            without actually deserializing the full resource. Also supports resource bundles.
            </summary>
            <remarks>Replacement for XmlArtifactScanner (now obsolete).</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.FromPath(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified serialized xml resource file.</summary>
            <param name="path">The filepath of a serialized xml resource.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.FromPath(System.String,System.Boolean,Hl7.Fhir.Serialization.FhirXmlParsingSettings)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified serialized xml resource file.</summary>
            <param name="path">The filepath of a serialized xml resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Dispose"/> method should also dispose the internal <see cref="T:System.IO.Stream"/> instance.</param>
            <param name="settings">Parser settings that control de-serialization behavior.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.#ctor(System.IO.Stream)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified xml resource stream.</summary>
            <param name="stream">A stream that returns a serialized xml resource.</param>
            <remarks>The <see cref="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Dispose"/> method also disposes the specified <paramref name="stream"/> instance.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified xml resource stream.</summary>
            <param name="stream">A stream that returns a serialized xml resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.#ctor(System.IO.Stream,System.Boolean,Hl7.Fhir.Serialization.FhirXmlParsingSettings)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Serialization.XmlNavigatorStream"/> instance for the specified xml resource stream.</summary>
            <param name="stream">A stream that returns a serialized xml resource.</param>
            <param name="disposeStream">Determines if the <see cref="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Dispose"/> method should also dispose the specified <paramref name="stream"/> instance.</param>
            <param name="settings">Parser settings that control de-serialization behavior.</param>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.ResourceType">
            <summary>The typename of the underlying resource (container).</summary>
            <remarks>Call Current.Type to determine the type of the currently enumerated resource.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.IsBundle">
            <summary>Returns <c>true</c> if the underlying file represents a Bundle resource, or <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Reset">
            <summary>
            Reset the stream to the start position.
            Requires the internal stream, as specified in the ctor, to support seeking.
            </summary>
            <exception cref="T:System.NotSupportedException">The internal stream does not support seeking.</exception>
        </member>
        <member name="M:Hl7.Fhir.Serialization.XmlNavigatorStream.Seek(System.String)">
            <summary>Navigate to the artifact with the specified uri.</summary>
            <param name="position">The uri of the target artifact.</param>
            <returns><c>true</c> if found, or <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotSupportedException">The internal stream does not support seeking.</exception>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.Position">
            <summary>Returns the full resource uri of the current artifact.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.Current">
            <summary>Returns a new <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance for the current entry.</summary>
        </member>
        <member name="P:Hl7.Fhir.Serialization.XmlNavigatorStream.ParserSettings">
            <summary>Gets the configuration settings that control parsing behavior.</summary>
            <value>Returns a (non-<c>null</c>) <see cref="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings"/> instance.</value>
        </member>
        <member name="F:Hl7.Fhir.Serialization.XmlSerializationDetails.NodeText">
            <summary>
            All child XText nodes
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Language.TypeSpecifier.PrimitiveTypes">
            <summary>
            This is the list of supported types for the primitive values in ITypedElement.Value
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Language.TypeSpecifier.ForNativeType(System.Type)">
            <summary>
            Maps a C# type to a known TypeSpecifier.
            </summary>
            <param name="dotNetType">Value to determine the type for.</param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Language.Debugging.OutputEventArgs">
            <summary>
            The event indicates that the debuggee has produced some output.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.OutputEventArgs.Category">
            <summary>
            The output category.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.OutputEventArgs.Output">
            <summary>
            The output to report.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.OutputEventArgs.Source">
            <summary>
            An optional source location where the output was produced.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.OutputEventArgs.Line">
            <summary>
            An optional source location line where the output was produced.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.OutputEventArgs.Column">
            <summary>
            An optional source location column where the output was produced.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Language.Debugging.Source">
            <summary>
            A Source is a descriptor for source code. It is returned from the debug adapter as part of a StackFrame and 
            it is used by clients when specifying breakpoints.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.Source.Name">
            <summary>
            The short name of the source.
            </summary>
            <remarks>
            Every source returned from the debug adapter has a name. When sending a source to the debug adapter this name is optional.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.Source.Path">
            <summary>
             The path of the source to be shown in the UI.
            </summary>
            <remarks>It is only used to locate and load the content of the source if no sourceReference is specified (or its value is 0).
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.Source.SourceReference">
            <summary>
            Id for the source.
            </summary>
            <remarks>
            If sourceReference > 0 the contents of the source must be retrieved through the SourceRequest (even if a path is specified).
            A sourceReference is only valid for a session, so it must not be used to persist a source.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Language.Debugging.SourceBreakpoint">
            <summary>
            Properties of a breakpoint or logpoint passed to the setBreakpoints request.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.SourceBreakpoint.Line">
            <summary>
            The source line of the breakpoint or logpoint.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.SourceBreakpoint.Column">
            <summary>
            An optional source column of the breakpoint.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.SourceBreakpoint.Condition">
            <summary>
            An optional expression for conditional breakpoints.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Language.Debugging.StackFrame">
            <summary>
            Source location and other details about a stackframe.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.StackFrame.Id">
            <summary>
            An identifier for the stack frame. 
            </summary>
            <remarks>
            It must be unique across all threads. This id can be used to retrieve the scopes of the frame with the 
            'scopesRequest' or to restart the execution of a stackframe.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.StackFrame.Name">
            <summary>
            The name of the stack frame, typically a method name.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.StackFrame.Source">
            <summary>
            The optional source of the frame.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.StackFrame.Line">
            <summary>
            The line within the file of the frame. 
            </summary>
            <remarks>
            If source is null or doesn't exist, line is 0 and must be ignored.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Language.Debugging.StackFrame.Column">
            <summary>
            The column within the line.
            </summary>
            <remarks>
            If source is null or doesn't exist, column is 0 and must be ignored.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.ElementNavFhirExtensions.HasValue(Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Check if the node has a value, and not just extensions.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.ElementNavFhirExtensions.HtmlChecks(Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Check if the node has a value, and not just extensions.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.ElementNavFhirExtensions.Comparable(Hl7.Fhir.ElementModel.Types.Quantity,Hl7.Fhir.ElementModel.Types.Quantity)">
            <summary>
            Compares the singleton Quantity with the singleton other Quantity and determine their relationship to each other. Comparable means that both 
            have values and that the code and system for the units are the same (irrespective of system) or both have code + system, system is recognized 
            by the FHIRPath implementation and the codes are comparable within that code system. E.g. days and hours or inches and cm
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.ElementNavFhirExtensions.MemberOf(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <summary>
            When invoked on a single code-valued element, returns true if the code is a member of the given valueset. 
            When invoked on a single concept-valued element, returns true if any code in the concept is a member of the given valueset. 
            When invoked on a single string, returns true if the string is equal to a code in the valueset, so long as the valueset only contains one codesystem. 
            If the valueset in this case contains more than one codesystem, the return value is empty.
            
            If the valueset cannot be resolved as a uri to a value set, or the input is empty or has more than one value, the return value is empty.
            </summary>
            <param name="input">The input element for the function 'memberOf()'</param>
            <param name="valueset">The valueset</param>
            <param name="ctx">EvaluationContext of the FhirPath compiler</param>
            <returns>See summary</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.FhirEvaluationContext.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.FhirPath.FhirEvaluationContext"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.FhirEvaluationContext.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.FhirPath.FhirEvaluationContext"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.FhirEvaluationContext.#ctor(Hl7.Fhir.ElementModel.ITypedElement)">
            <inheritdoc cref="M:Hl7.FhirPath.EvaluationContext.#ctor(Hl7.Fhir.ElementModel.ITypedElement)"/>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.FhirEvaluationContext.#ctor(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.ElementModel.ITypedElement)">
            <inheritdoc cref="M:Hl7.FhirPath.EvaluationContext.#ctor(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.ElementModel.ITypedElement)"/>
        </member>
        <member name="M:Hl7.Fhir.FhirPath.FhirEvaluationContext.#ctor(Hl7.Fhir.ElementModel.ScopedNode)">
            <summary>
            Create a FhirEvaluationContext and also set the variables <c>%resource</c> and <c>%rootResource</c> to their correct values.
            </summary>
            <param name="node">input for determining the variables <c>%resource</c> and <c>%rootResource</c></param>
        </member>
        <member name="T:Hl7.Fhir.Introspection.BackboneTypeAttribute">
            <summary>
            This attribute is applied to classes that represent Backbone types.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.BackboneTypeAttribute.DefinitionPath">
            <summary>
            The path in the StructureDefinition where the backbone was defined.
            </summary>
            <remarks>When the backbone is reused in the resource, and thus appears on multiple paths,
            this is the initial path where the backbone was defined.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Introspection.BindableAttribute">
            <summary>
            This attribute is applied to classes that represent bindable types.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.BindingAttribute">
            <summary>
            Used to specify the name of the binding for a bound property.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.ChoiceType">
            <summary>
            The kind of choice an element in FHIR provides.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.ChoiceType.None">
            <summary>
            Not a choice element, element can only contain instances of the exact type of the element.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.ChoiceType.ResourceChoice">
            <summary>
            Element can contain a resource of any type.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.ChoiceType.DatatypeChoice">
            <summary>
            Element can contain instances of a specified list of types.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.ClassMapping">
            <summary>
            A container for the metadata of a FHIR datatype as present on the (generated) .NET POCO class.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ClassMapping.TryGetMappingForType(System.Type,Hl7.Fhir.Specification.FhirRelease,Hl7.Fhir.Introspection.ClassMapping@)">
            <summary>
            Gets the <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/> for the given <see cref="T:System.Type"/>. Calling this function multiple
            times for the same type and release will return the same ClassMapping.
            </summary>
            <returns>true if the mapping was found or false if it was not one of the supported and reflectable types.</returns>
            <remarks>For classes shared across FHIR versions, there may be metadata present for different versions
            of FHIR, the <paramref name="release"/> is used to select which subset of metadata to extract. </remarks>
            <seealso cref="M:Hl7.Fhir.Introspection.ClassMapping.TryCreate(System.Type,Hl7.Fhir.Introspection.ClassMapping@,Hl7.Fhir.Specification.FhirRelease)"/>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ClassMapping.TryCreate(System.Type,Hl7.Fhir.Introspection.ClassMapping@,Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Inspects the given type, extracting metadata from its attributes and creating a new <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/>.
            </summary>
            <remarks>For classes shared across FHIR versions, there may be metadata present for different versions
            of FHIR, the <paramref name="release"/> is used to select which subset of metadata to extract.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Release">
            <summary>
            The FHIR release which this mapping reflects.
            </summary>
            <remarks>The mapping will contain the metadata that applies to this version (or older), using the
            newest metadata when multiple exist.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Name">
            <summary>
            Name of the mapping.
            </summary>
            <remarks>
            This is the FHIR name for the type as specified in <see cref="P:Hl7.Fhir.Introspection.FhirTypeAttribute.Name"/> but not always:
            <list type="bullet">
            <item>FHIR <c>code</c> types with required bindings are modelled in the POCO as a <see cref="T:Hl7.Fhir.Model.Code`1"/>,
            the mapping name for these will be <c>code&lt;name of enum&gt;</c></item>
            <item>The System/CQL primitives from <see cref="N:Hl7.Fhir.ElementModel.Types"/> all have their names
            prepended with "System.", e.g. "System.Integer".</item>
            <item>.NET primitive types have their <see cref="P:System.Type.FullName"/> name prepended with "Net.", e.g. "Net.System.Int32".</item>
            </list>
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.NativeType">
            <summary>
            The .NET class that implements the FHIR datatype/resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsResource">
            <summary>
            Is <c>true</c> when this class represents a Resource datatype.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsFhirPrimitive">
            <summary>
            Is <c>true</c> when this class represents a FHIR primitive
            </summary>
            <remarks>This is different from a .NET primitive, as FHIR primitives are complex types with a primitive value.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsPrimitive">
            <summary>
            The element is of an atomic .NET type, not a FHIR generated POCO.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsCodeOfT">
            <summary>
            Is <c>true</c> when this class represents a code with a required binding.
            </summary>
            <remarks>See <see cref="P:Hl7.Fhir.Introspection.ClassMapping.Name"></see>.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsNestedType">
            <summary>
            Indicates whether this class represents the nested complex type for a backbone element.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsBackboneType">
            <summary>
            Indicates whether this class represents the nested complex type for a backbone element.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.DefinitionPath">
            <summary>
            If this is a backbone type (<see cref="P:Hl7.Fhir.Introspection.ClassMapping.IsBackboneType"/>), then this contains the path
            in the StructureDefinition where the backbone was defined first.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsBindable">
            <summary>
            Indicates whether this class can be used for binding.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Canonical">
            <summary>
            The canonical for the StructureDefinition defining this type
            </summary>
            <remarks>Will be null for backbone types.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.PropertyMappings">
            <summary>
            List of PropertyMappings for this class, in the order of listing in the FHIR specification.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.ValidationAttributes">
            <summary>
            The collection of zero or more <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> (or subclasses) declared
            on this class.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.PrimitiveValueProperty">
            <summary>
            Holds a reference to a property that represents the value of a FHIR Primitive. This
            property will also be present in the PropertyMappings collection. If this class has 
            no such property, it is null. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.IsPatientClass">
            <summary>
            This indicates that this class is representing the Patient data (and implements <see cref="T:Hl7.Fhir.Model.IPatient"/>).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.HasPrimitiveValueMember">
            <summary>
            Whether the reflected type has a member that represent a primitive value.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ClassMapping.FindMappedElementByName(System.String)">
            <summary>
            Returns the mapping for an element of this class by its name.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ClassMapping.FindMappedElementByChoiceName(System.String)">
            <summary>
            Returns the mapping for an element of this class by a name that
            might be suffixed by a type name (e.g. for choice elements).
            </summary>
            <remarks>Will also return properties for which the name is exactly the same,
            so for where there is no suffix. In this case, however, <see cref="M:Hl7.Fhir.Introspection.ClassMapping.FindMappedElementByName(System.String)"/>
            is faster.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Hl7#Fhir#Specification#IStructureDefinitionSummary#TypeName">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Hl7#Fhir#Specification#IStructureDefinitionSummary#IsAbstract">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Hl7#Fhir#Specification#IStructureDefinitionSummary#IsResource">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Introspection.ClassMapping.Hl7#Fhir#Specification#IStructureDefinitionSummary#GetElements">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.Factory">
            <summary>
            Gets a delegate that, when called, creates an instance for the <see cref="P:Hl7.Fhir.Introspection.ClassMapping.NativeType"/> represented by this mapping.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMapping.ListFactory">
            <summary>
            Gets a delegate that, when called, creates an instance of a List of the <see cref="P:Hl7.Fhir.Introspection.ClassMapping.NativeType"/> represented by this mapping.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ClassMappingCollection.Add(Hl7.Fhir.Introspection.ClassMapping)">
            <summary>
            Adds the mapped type to the collection, updating the indexed
            collections. Note: a newer mapping for the same canonical/name will overwrite
            the old one. This way, it is possible to substitute mappings if necessary.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMappingCollection.ByName">
            <summary>
            List of the class mappings, keyed by name.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMappingCollection.ByCanonical">
            <summary>
            List of the class mappings, keyed by canonical.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ClassMappingCollection.ByType">
            <summary>
            List of the class mappings, keyed by canonical.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.DeclaredTypeAttribute">
            <summary>
            Used to indicate that the type for this property in the POCO
            does not represent the type in the FHIR specification, but rather the type given
            in the constructor to this attribute.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.EnumMapping">
            <summary>
            A container for the metadata of a FHIR valueset as present on the .NET Enum.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.EnumMapping.TryGetMappingForEnum(System.Type,Hl7.Fhir.Specification.FhirRelease,Hl7.Fhir.Introspection.EnumMapping@)">
            <summary>
            Gets the <see cref="T:Hl7.Fhir.Introspection.EnumMapping"/> for the given <see cref="T:System.Type"/>. Calling this function multiple
            times for the same type and release will return the same <see cref="T:Hl7.Fhir.Introspection.EnumMapping"/>.
            </summary>
            <returns>true if the mapping was found or false if the type did not represent a FHIR valueset.</returns>
            <remarks>For enums shared across FHIR versions, there may be metadata present for different versions
            of FHIR, the <paramref name="release"/> is used to select which subset of metadata to extract. </remarks>
            <seealso cref="M:Hl7.Fhir.Introspection.EnumMapping.TryCreate(System.Type,Hl7.Fhir.Introspection.EnumMapping@,Hl7.Fhir.Specification.FhirRelease)"/>
        </member>
        <member name="M:Hl7.Fhir.Introspection.EnumMapping.TryCreate(System.Type,Hl7.Fhir.Introspection.EnumMapping@,Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Inspects the given enum type, extracting metadata from its attributes and creating a new <see cref="T:Hl7.Fhir.Introspection.EnumMapping"/>.
            </summary>
            <remarks>For classes shared across FHIR versions, there may be metadata present for different versions
            of FHIR, the <paramref name="release"/> is used to select which subset of metadata to extract.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMapping.Release">
            <summary>
            The FHIR release which this mapping reflects.
            </summary>
            <remarks>The mapping will contain the metadata that applies to this version (or older), using the
            newest metadata when multiple exist.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMapping.Name">
            <summary>
            Name of the mapping, derived from the valueset's name or id.
            </summary>
            <remarks>
            This is the FHIR name 
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMapping.Canonical">
            <summary>
            The canonical of the ValueSet where this enum was derived from.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMapping.NativeType">
            <summary>
            The code system of most of the member of the ValueSet
            </summary>
            <summary>
            The .NET class that implements the FHIR datatype/resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMapping.Members">
            <summary>
            The list of enum members.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.EnumMappingCollection.Add(Hl7.Fhir.Introspection.EnumMapping)">
            <summary>
            Adds the mapped valueset enum to the collection, updating the indexed
            collections. Note: a newer mapping for the same canonical/name will overwrite
            the old one. This way, it is possible to substitute mappings if necessary.
            </summary>
            <param name="mapping"></param>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMappingCollection.ByName">
            <summary>
            List of the enumerations, keyed by name.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMappingCollection.ByCanonical">
            <summary>
            List of the enums, keyed by canonical.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMappingCollection.ByType">
            <summary>
            List of the enums, keyed by canonical.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.EnumMemberMapping">
            <summary>
            A container for the metadata of a FHIR code from a valueset as present on the .NET Enum member.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMemberMapping.Code">
            <summary>
            The code that is represented by this member.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMemberMapping.System">
            <summary>
            The coding system that is associated with the code.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMemberMapping.Description">
            <summary>
            A description of the concept.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMemberMapping.Value">
            <summary>
            The .NET enum value for this enum member.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.EnumMemberMapping.NativeField">
            <summary>
            The original <see cref="T:System.Reflection.FieldInfo"/> the metadata was extracted from.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.EnumMemberMapping.TryCreate(System.Reflection.FieldInfo,Hl7.Fhir.Introspection.EnumMemberMapping@,Hl7.Fhir.Specification.FhirRelease,System.String)">
            <summary>
            Inspects the given enum member, extracting metadata from its attributes and creating a new <see cref="T:Hl7.Fhir.Introspection.EnumMemberMapping"/>.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirElementAttribute.Choice">
            <summary>
            Whether this element allows instances of more than one type.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirElementAttribute.Name">
            <summary>
            The name of the element in FHIR this property represents.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirElementAttribute.IsPrimitiveValue">
            <summary>
            The element represents the primitive `value` attribute/property in the FHIR serialization
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirElementAttribute.XmlSerialization">
            <summary>
            How this value is represented in XML.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirElementAttribute.InSummary">
            <summary>
            The order of the element in the Xml representation.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirElementAttribute.IsModifier">
            <summary>
            If this modifies the meaning of other elements
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.FhirModelAssemblyAttribute">
            <summary>
            Signals that the assembly contains classes that define metadata for the
            FHIR resources and datatypes.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Introspection.FhirTypeAttribute">
            <summary>
            This attribute is applied to classes that represent FHIR datatypes and resources.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirTypeAttribute.Name">
            <summary>
            The name of the FHIR type this class represents.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirTypeAttribute.IsNestedType">
            <summary>
            Indicates whether this class represents the nested complex type for a (backbone) element.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirTypeAttribute.IsResource">
            <summary>
            Indicates whether this class represents a Resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.FhirTypeAttribute.Canonical">
            <summary>
            The canonical of the StructureDefinition defining this type.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.IFhirVersionDependent.Since">
            <summary>
            First version of FHIR for which this attribute applies, as a major FHIR release number
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.FhirVersionDependentExtensions.AppliesToRelease(System.Attribute,Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Determines whether the given attribute applies to a given FHIR release.
            </summary>
            <remarks>An attribute is applicable to a given <see cref="T:Hl7.Fhir.Specification.FhirRelease"/> if
            the attribute has a <see cref="P:Hl7.Fhir.Introspection.IFhirVersionDependent.Since"/> value that
            equivalent to or older than <paramref name="release"/> or has no <c>Since</c>
            value at all.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Introspection.ModelInspector">
            <summary>
            A cache of FHIR type mappings found on .NET classes.
            </summary>
            <remarks>POCO's in the "base" assembly
            can reflect the definition of multiple releases of FHIR using <see cref="T:Hl7.Fhir.Introspection.IFhirVersionDependent"/>
            attributes. A <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> will always capture the metadata for one such
            <see cref="T:Hl7.Fhir.Specification.FhirRelease" /> which is passed to it in the constructor.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.Clear">
            <summary>
            Removes all known mappings from the inspector.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.GetClassMappingForType(System.Type)">
            <summary>
            Finds or creates the <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/> for a given type.
            Calling this function repeatedly for the same type will return the same ClassMapping.
            </summary>
            <remarks>If the type given is FHIR Release specific, the returned mapping will contain
            metadata for that release only. If the type is from the base assembly, it will contain
            metadata for that type from the most recent release of the base assembly.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.ForAssembly(System.Reflection.Assembly)">
            <summary>
            Returns a fully configured <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> with the
            FHIR metadata contents of the given assembly, plus all the assemblies it depends upon.
            Calling this function repeatedly for the same assembly will return the same inspector.
            </summary>
            <remarks>If the assembly given is FHIR Release specific, the returned inspector will contain
            metadata for that release only. If the assembly is the base assembly, it will contain
            metadata for the most recent release for those base classes.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.ForType(System.Type)">
            <summary>
            Returns a fully configured <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> with the
            FHIR metadata contents of the assembly where <paramref name="type"/> resides. Calling this function 
            repeatedly for the same type will return the same inspector.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.ForType``1">
            <summary>
            Returns a fully configured <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> with the
            FHIR metadata contents of the assembly where <typeparamref name="T"/> resides. Calling this function 
            repeatedly for the same type will return the same inspector.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ModelInspector.Base">
            <summary>
            Returns a fully configured <see cref="T:Hl7.Fhir.Introspection.ModelInspector"/> with the
            FHIR metadata contents of the base assembly
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.#ctor(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Constructs a ModelInspector that will reflect the FHIR metadata for the given FHIR release
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ModelInspector.FhirRelease">
            <summary>
            The release of FHIR (i.e. STU3, R4) that this metadata is constructor for.
            </summary>
            <remarks>This is taken in consideration when encountering versioned FHIR attributes, to be able to 
            use a single POCO class to reflect the members for different FHIR releases.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ModelInspector.FhirVersion">
            <summary>
            The detected version of FHIR (i.e. 4.0.2) on the loaded assembly.
            </summary>
            <remarks>This is taken from the ModelInfo.Version string when the ModelInspector
            reflects on a satellite assembly.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.Import(System.Reflection.Assembly)">
            <summary>
            Locates all types and enums in the assembly representing FHIR metadata and extracts
            the data into <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/> and <see cref="T:Hl7.Fhir.Introspection.EnumMapping"/>
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.ImportType(System.Type)">
            <summary>
            Extracts the FHIR metadata from a <see cref="T:System.Type"/> into a <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/> and
            possibly multiple <see cref="P:Hl7.Fhir.Introspection.ModelInspector.EnumMappings"/>. 
            </summary>
            <returns>The created ClassMapping.</returns>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindOrImportClassMapping(System.Type)">
            <summary>
            Tries to retrieve an already imported <see cref="T:Hl7.Fhir.Introspection.ClassMapping"/> and will import
            it when not found.
            </summary>
            <returns>May return <c>null</c> if the type cannot be imported.</returns>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindClassMapping(System.String)">
            <summary>
            Retrieves an already imported <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> given a FHIR type name.
            </summary>
            <remarks>The search for the mapping by namem is case-insensitive.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindClassMapping(System.Type)">
            <summary>
            Retrieves an already imported <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> given a Type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindClassMappingByCanonical(System.String)">
            <summary>
            Retrieves an already imported <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> given a canonical.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindEnumMapping(System.String)">
            <summary>
            Retrieves an already imported <see cref="T:Hl7.Fhir.Introspection.EnumMapping"/>, given the name of the valueset.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindEnumMapping(System.Type)">
            <summary>
            Retrieves an already imported <see cref="T:Hl7.Fhir.Introspection.EnumMapping" /> given the enum Type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.FindEnumMappingByCanonical(System.String)">
            <summary>
            Retrieves an already imported <see cref="T:Hl7.Fhir.Introspection.EnumMapping" /> given the valueset canonical.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ModelInspector.PatientMapping">
            <summary>
            The class mapping representing the Cql Patient type for the inspected model.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ModelInspector.ClassMappings">
            <summary>
            List of ClassMappings registered with the inspector.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.ModelInspector.EnumMappings">
            <summary>
            List of EnumMappings registered with the inspector.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.ModelInspector.Provide(System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Specification.IStructureDefinitionSummaryProvider.Provide(System.String)"/>
        </member>
        <member name="T:Hl7.Fhir.Introspection.PropertyMapping">
            <summary>
            A container for the metadata of an element of a FHIR datatype as present on a property of a (generated) .NET POCO class.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.Name">
            <summary>
            The name of the element in the FHIR specification.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.DeclaringClass">
            <summary>
            The ClassMapping for the type this property is a member of.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.IsCollection">
            <summary>
            Whether the element can repeat.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.IsPrimitive">
            <summary>
            The element is of an atomic .NET type, not a FHIR generated POCO.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.RepresentsValueElement">
            <summary>
            The element is a primitive (<seealso cref="P:Hl7.Fhir.Introspection.PropertyMapping.IsPrimitive"/>) and 
            represents the primitive `value` attribute/property in the FHIR serialization.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.InSummary">
            <summary>
            Whether the element appears in _summary 
            (see https://www.hl7.org/fhir/search.html#summary)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.IsModifier">
            <summary>
            If this modifies the meaning of other elements
            (see https://www.hl7.org/fhir/conformance-rules.html#isModifier)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.FiveWs">
            <summary>
            Five W's mappings of the element.
            <remarks>it represents the exact element name of one the elements of the 
            <c>FiveWs</c> pattern from http://hl7.org/fhir/fivews.html. Choice elements are spelled with the
            [x] suffix, like <c>done[x]</c>. </remarks>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.IsMandatoryElement">
            <summary>
            Whether the element has a cardinality higher than 0.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.ImplementingType">
            <summary>
            The native type of the element.
            </summary>
            <remarks>If the element is a collection or is nullable, this reflects the
            collection item or the type that is made nullable respectively.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.Order">
            <summary>
            The numeric order of the element (relevant for the XML serialization, which
            needs to be in order).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.SerializationHint">
            <summary>
            How this element is represented in the XML serialization.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.Choice">
            <summary>
            Specifies whether this element contains a choice (either a choice element or a
            contained resource).
            </summary>
            <remarks>In the case of a DataChoice, these elements have names ending in [x] in 
            the StructureDefinition and allow a (possibly restricted) set of types to be used. 
            These are reflected in the <see cref="P:Hl7.Fhir.Introspection.PropertyMapping.FhirType"/> property.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.FhirType">
            <summary>
            The list of possible FHIR types for this element, listed as the representative .NET types. 
            For non-choice types this is a single Type, for choices this is either a list of Types or 
            just <see cref="T:Hl7.Fhir.Model.DataType"/>.
            </summary>
            <remark>These are the defined (choice) types for this element as specified in the
            FHIR data definitions. It is derived from the actual property type,
            or, if present, via a list of types in the [AllowedTypes] attribute. Finally,
            it the property type does not represent FHIR metadata, it is overridden using
            the [DeclaredType] attribute.
            </remark>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.PropertyTypeMapping">
            <summary>
            The <see cref="T:Hl7.Fhir.Introspection.ClassMapping" /> that represents the type of this property.
            </summary>
            <remarks>This is effectively the ClassMapping for the <see cref="P:Hl7.Fhir.Introspection.PropertyMapping.ImplementingType" /> unless a
            <see cref="T:Hl7.Fhir.Introspection.DeclaredTypeAttribute" /> specifies otherwise.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.ValidationAttributes">
            <summary>
            The collection of zero or more <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> (or subclasses) declared
            on this property.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.PropertyMapping.NativeProperty">
            <summary>
            The original <see cref="T:System.Reflection.PropertyInfo"/> the metadata was obtained from.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.PropertyMapping.Release">
            <summary>
            The release of FHIR for which the metadata was extracted from the property.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.BindingName">
            <summary>
            For a bound element, this is the name of the binding.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.PropertyMapping.TryCreate(System.Reflection.PropertyInfo,Hl7.Fhir.Introspection.PropertyMapping@,Hl7.Fhir.Introspection.ClassMapping,Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Inspects the given PropertyInfo, extracting metadata from its attributes and creating a new <see cref="T:Hl7.Fhir.Introspection.PropertyMapping"/>.
            </summary>
            <remarks>There should generally be no reason to call this method, as you can easily get the required PropertyMapping via
            a ClassMapping - which will cache this information as well. This constructor is public for historical reasons only.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Introspection.PropertyMapping.GetInstantiableType">
            <summary>
            This function tried to figure out a concrete type for the element represented by this property.
            If it cannot derive a concrete type, it will just return <see cref="P:Hl7.Fhir.Introspection.PropertyMapping.ImplementingType"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.PropertyMapping.GetValue(System.Object)">
            <summary>
            Given an instance of the parent class, gets the value for this property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Introspection.PropertyMapping.SetValue(System.Object,System.Object)">
            <summary>
            Given an instance of the parent class, sets the value for this property.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.PropertyMapping.Hl7#Fhir#Specification#IElementDefinitionSummary#IsModifier">
            <inheritdoc/>
        </member>
        <member name="F:Hl7.Fhir.Introspection.PropertyMappingCollection.ByOrder">
            <summary>
            List of the properties, in the order of appearance.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.PropertyMappingCollection.ChoiceProperties">
            <summary>
            The list of properties that represent choice elements.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Introspection.PropertyMappingCollection.ByName">
            <summary>
            List of the properties, keyed by name.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Introspection.VersionedAttribute.Since">
            <inheritdoc cref="P:Hl7.Fhir.Introspection.IFhirVersionDependent.Since" />
        </member>
        <member name="P:Hl7.Fhir.Introspection.VersionedValidationAttribute.Since">
            <inheritdoc cref="P:Hl7.Fhir.Introspection.IFhirVersionDependent.Since" />
        </member>
        <member name="M:Hl7.Fhir.Model.Base.CopyTo(Hl7.Fhir.Model.IDeepCopyable)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <remarks>Does a deep-copy of all elements, except UserData</remarks>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.Model.Base.Children">
            <summary>
            Enumerate all child nodes.
            Return a sequence of child elements, components and/or properties.
            Child nodes are returned in the order defined by the FHIR specification.
            First returns child nodes inherited from any base class(es), recursively.
            Finally returns child nodes defined by the current class.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Base.NamedChildren">
            <summary>
            Enumerate all child nodes.
            Return a sequence of child elements, components and/or properties.
            Child nodes are returned as tuples with the name and the node itself, in the order defined 
            by the FHIR specification.
            First returns child nodes inherited from any base class(es), recursively.
            Finally returns child nodes defined by the current class.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Base64Binary">
            <summary>
            Primitive Type base64Binary
            A stream of bytes, base64 encoded
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Base64Binary.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Base64Binary.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Base64Binary.PATTERN">
            Must conform to the pattern "(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?"
        </member>
        <member name="P:Hl7.Fhir.Model.Base64Binary.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle">
            <summary>
            Contains a collection of resources
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.EntryComponent">
            <summary>
            Entry in the bundle - will have a resource or information
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.Link">
            <summary>
            Links related to this entry
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.FullUrlElement">
            <summary>
            URI for resource (e.g. the absolute URL server address, URI for UUID/OID, etc.)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.FullUrl">
            <summary>
            URI for resource (e.g. the absolute URL server address, URI for UUID/OID, etc.)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.Resource">
            <summary>
            A resource in the bundle
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.Search">
            <summary>
            Search related information
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.Request">
            <summary>
            Additional execution information (transaction/batch/history)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.EntryComponent.Response">
            <summary>
            Results of execution (transaction/batch/history)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Bundle.EntryComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.BundleType">
            <summary>
            Indicates the purpose of a bundle - how it is intended to be used.
            (url: http://hl7.org/fhir/ValueSet/bundle-type)
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.Document">
            <summary>
            The bundle is a document. The first resource is a Composition.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.Message">
            <summary>
            The bundle is a message. The first resource is a MessageHeader.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.Transaction">
            <summary>
            The bundle is a transaction - intended to be processed by a server as an atomic commit.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.TransactionResponse">
            <summary>
            The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.Batch">
            <summary>
            The bundle is a set of actions - intended to be processed by a server as a group of independent actions.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.BatchResponse">
            <summary>
            The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.History">
            <summary>
            The bundle is a list of resources from a history interaction on a server.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.Searchset">
            <summary>
            The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.Collection">
            <summary>
            The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.BundleType.SubscriptionNotification">
            <summary>
            The bundle has been generated by a Subscription to communicate information to a client.
            (system: http://hl7.org/fhir/bundle-type)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.LinkRelationTypes">
            <summary>
            Link Relation Types defined at https://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
            (url: http://hl7.org/fhir/ValueSet/iana-link-relations)
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.About">
            <summary>
            Refers to a resource that is the subject of the link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Acl">
            <summary>
            Asserts that the link target provides an access control description for the link context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Alternate">
            <summary>
            Refers to a substitute for this context
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Amphtml">
            <summary>
            Used to reference alternative content that uses the AMP profile of the HTML format.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Appendix">
            <summary>
            Refers to an appendix.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.AppleTouchIcon">
            <summary>
            Refers to an icon for the context. Synonym for icon.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.AppleTouchStartupImage">
            <summary>
            Refers to a launch screen for the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Archives">
            <summary>
            Refers to a collection of records, documents, or other
                  materials of historical interest.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Author">
            <summary>
            Refers to the context's author.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.BlockedBy">
            <summary>
            Identifies the entity that blocks access to a resource
                  following receipt of a legal demand.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Bookmark">
            <summary>
            Gives a permanent link to use for bookmarking purposes.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Canonical">
            <summary>
            Designates the preferred version of a resource (the IRI and its contents).
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Chapter">
            <summary>
            Refers to a chapter in a collection of resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.CiteAs">
            <summary>
            Indicates that the link target is preferred over the link context for the purpose of permanent citation.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Collection">
            <summary>
            The target IRI points to a resource which represents the collection resource for the context IRI.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Contents">
            <summary>
            Refers to a table of contents.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.ConvertedFrom">
            <summary>
            The document linked to was later converted to the
                  document that contains this link relation.  For example, an RFC can
                  have a link to the Internet-Draft that became the RFC; in that case,
                  the link relation would be "convertedFrom".
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Copyright">
            <summary>
            Refers to a copyright statement that applies to the
                link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.CreateForm">
            <summary>
            The target IRI points to a resource where a submission form can be obtained.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Current">
            <summary>
            Refers to a resource containing the most recent
                  item(s) in a collection of resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Describedby">
            <summary>
            Refers to a resource providing information about the
                  link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Describes">
            <summary>
            The relationship A 'describes' B asserts that
                  resource A provides a description of resource B. There are no
                  constraints on the format or representation of either A or B,
                  neither are there any further constraints on either resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Disclosure">
            <summary>
            Refers to a list of patent disclosures made with respect to 
                  material for which 'disclosure' relation is specified.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.DnsPrefetch">
            <summary>
            Used to indicate an origin that will be used to fetch required 
                  resources for the link context, and that the user agent ought to resolve 
                  as early as possible.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Duplicate">
            <summary>
            Refers to a resource whose available representations
                  are byte-for-byte identical with the corresponding representations of
                  the context IRI.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Edit">
            <summary>
            Refers to a resource that can be used to edit the
                  link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.EditForm">
            <summary>
            The target IRI points to a resource where a submission form for
                  editing associated resource can be obtained.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.EditMedia">
            <summary>
            Refers to a resource that can be used to edit media
                  associated with the link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Enclosure">
            <summary>
            Identifies a related resource that is potentially
                  large and might require special handling.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.External">
            <summary>
            Refers to a resource that is not part of the same site as the current context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.First">
            <summary>
            An IRI that refers to the furthest preceding resource
                in a series of resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Glossary">
            <summary>
            Refers to a glossary of terms.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Help">
            <summary>
            Refers to context-sensitive help.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Hosts">
            <summary>
            Refers to a resource hosted by the server indicated by
                  the link context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Hub">
            <summary>
            Refers to a hub that enables registration for
                notification of updates to the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Icon">
            <summary>
            Refers to an icon representing the link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Index">
            <summary>
            Refers to an index.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalAfter">
            <summary>
            refers to a resource associated with a time interval that ends before the beginning of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalBefore">
            <summary>
            refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalContains">
            <summary>
            refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalDisjoint">
            <summary>
            refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource, or ends before the beginning of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalDuring">
            <summary>
            refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalEquals">
            <summary>
            refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalFinishedBy">
            <summary>
            refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalFinishes">
            <summary>
            refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalIn">
            <summary>
            refers to a resource associated with a time interval that begins before or is coincident with the beginning of the time interval associated with the context resource, and ends after or is coincident with the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalMeets">
            <summary>
            refers to a resource associated with a time interval whose beginning coincides with the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalMetBy">
            <summary>
            refers to a resource associated with a time interval whose end coincides with the beginning of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalOverlappedBy">
            <summary>
            refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the beginning of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalOverlaps">
            <summary>
            refers to a resource associated with a time interval that begins before the end of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalStartedBy">
            <summary>
            refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.IntervalStarts">
            <summary>
            refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Item">
            <summary>
            The target IRI points to a resource that is a member of the collection represented by the context IRI.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Last">
            <summary>
            An IRI that refers to the furthest following resource
                  in a series of resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.LatestVersion">
            <summary>
            Points to a resource containing the latest (e.g.,
                  current) version of the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.License">
            <summary>
            Refers to a license associated with this context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Linkset">
            <summary>
            The link target of a link with the "linkset" relation
                  type provides a set of links, including links in which the link
                  context of the link participates.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Lrdd">
            <summary>
            Refers to further information about the link's context,
                  expressed as a LRDD ("Link-based Resource Descriptor Document")
                  resource.  See  for information about
                  processing this relation type in host-meta documents. When used
                  elsewhere, it refers to additional links and other metadata.
                  Multiple instances indicate additional LRDD resources. LRDD
                  resources MUST have an "application/xrd+xml" representation, and
                  MAY have others.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Manifest">
            <summary>
            Links to a manifest file for the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.MaskIcon">
            <summary>
            Refers to a mask that can be applied to the icon for the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.MediaFeed">
            <summary>
            Refers to a feed of personalised media recommendations relevant to the link context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Memento">
            <summary>
            The Target IRI points to a Memento, a fixed resource that will not change state anymore.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Micropub">
            <summary>
            Links to the context's Micropub endpoint.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Modulepreload">
            <summary>
            Refers to a module that the user agent is to preemptively fetch and store for use in the current context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Monitor">
            <summary>
            Refers to a resource that can be used to monitor changes in an HTTP resource.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.MonitorGroup">
            <summary>
            Refers to a resource that can be used to monitor changes in a specified group of HTTP resources.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Next">
            <summary>
            Indicates that the link's context is a part of a series, and
                  that the next in the series is the link target.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.NextArchive">
            <summary>
            Refers to the immediately following archive resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Nofollow">
            <summary>
            Indicates that the context’s original author or publisher does not endorse the link target.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Noopener">
            <summary>
            Indicates that any newly created top-level browsing context which results from following the link will not be an auxiliary browsing context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Noreferrer">
            <summary>
            Indicates that no referrer information is to be leaked when following the link.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Opener">
            <summary>
            Indicates that any newly created top-level browsing context which results from following the link will be an auxiliary browsing context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Openid2_local_id">
            <summary>
            Refers to an OpenID Authentication server on which the context relies for an assertion that the end user controls an Identifier.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Openid2_provider">
            <summary>
            Refers to a resource which accepts OpenID Authentication protocol messages for the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Original">
            <summary>
            The Target IRI points to an Original Resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.P3Pv1">
            <summary>
            Refers to a P3P privacy policy for the context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Payment">
            <summary>
            Indicates a resource where payment is accepted.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Pingback">
            <summary>
            Gives the address of the pingback resource for the link context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Preconnect">
            <summary>
            Used to indicate an origin that will be used to fetch required 
                  resources for the link context. Initiating an early connection, which 
                  includes the DNS lookup, TCP handshake, and optional TLS negotiation, 
                  allows the user agent to mask the high latency costs of establishing a 
                  connection.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.PredecessorVersion">
            <summary>
            Points to a resource containing the predecessor
                  version in the version history.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Prefetch">
            <summary>
            The prefetch link relation type is used to identify a resource 
                  that might be required by the next navigation from the link context, and 
                  that the user agent ought to fetch, such that the user agent can deliver a 
                  faster response once the resource is requested in the future.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Preload">
            <summary>
            Refers to a resource that should be loaded early in the 
                  processing of the link's context, without blocking rendering.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Prerender">
            <summary>
            Used to identify a resource that might be required by the next 
                  navigation from the link context, and that the user agent ought to fetch 
                  and execute, such that the user agent can deliver a faster response once 
                  the resource is requested in the future.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Prev">
            <summary>
            Indicates that the link's context is a part of a series, and
                  that the previous in the series is the link target.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Preview">
            <summary>
            Refers to a resource that provides a preview of the link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Previous">
            <summary>
            Refers to the previous resource in an ordered series
                  of resources.  Synonym for "prev".
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.PrevArchive">
            <summary>
            Refers to the immediately preceding archive resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.PrivacyPolicy">
            <summary>
            Refers to a privacy policy associated with the link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Profile">
            <summary>
            Identifying that a resource representation conforms
            to a certain profile, without affecting the non-profile semantics
            of the resource representation.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Publication">
            <summary>
            Links to a publication manifest. A manifest represents 
                  structured information about a publication, such as informative metadata, 
                  a list of resources, and a default reading order.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Related">
            <summary>
            Identifies a related resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Restconf">
            <summary>
            Identifies the root of RESTCONF API as configured on this HTTP server.
                  The "restconf" relation defines the root of the API defined in RFC8040.
                  Subsequent revisions of RESTCONF will use alternate relation values to support 
                  protocol versioning.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Replies">
            <summary>
            Identifies a resource that is a reply to the context
                  of the link.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Ruleinput">
            <summary>
            The resource identified by the link target provides an input value to an 
                instance of a rule, where the resource which represents the rule instance is 
                identified by the link context.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Search">
            <summary>
            Refers to a resource that can be used to search through
                  the link's context and related resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Section">
            <summary>
            Refers to a section in a collection of resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Self">
            <summary>
            Conveys an identifier for the link's context.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Service">
            <summary>
            Indicates a URI that can be used to retrieve a
                  service document.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.ServiceDesc">
            <summary>
            Identifies service description for the context that
                  is primarily intended for consumption by machines.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.ServiceDoc">
            <summary>
            Identifies service documentation for the context that
                  is primarily intended for human consumption.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.ServiceMeta">
            <summary>
            Identifies general metadata for the context that is
                  primarily intended for consumption by machines.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Sponsored">
            <summary>
            Refers to a resource that is within a context that is 
            		sponsored (such as advertising or another compensation agreement).
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Start">
            <summary>
            Refers to the first resource in a collection of
                  resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Status">
            <summary>
            Identifies a resource that represents the context's
                  status.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Stylesheet">
            <summary>
            Refers to a stylesheet.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Subsection">
            <summary>
            Refers to a resource serving as a subsection in a
                  collection of resources.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.SuccessorVersion">
            <summary>
            Points to a resource containing the successor version
                  in the version history.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Sunset">
            <summary>
            Identifies a resource that provides information about
                  the context's retirement policy.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Tag">
            <summary>
            Gives a tag (identified by the given address) that applies to
                  the current document.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.TermsOfService">
            <summary>
            Refers to the terms of service associated with the link's context.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Timegate">
            <summary>
            The Target IRI points to a TimeGate for an Original Resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Timemap">
            <summary>
            The Target IRI points to a TimeMap for an Original Resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Type">
            <summary>
            Refers to a resource identifying the abstract semantic type of which the link's context is considered to be an instance.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Ugc">
            <summary>
            Refers to a resource that is within a context that is User Generated Content.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Up">
            <summary>
            Refers to a parent document in a hierarchy of
                  documents.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.VersionHistory">
            <summary>
            Points to a resource containing the version history
                  for the context.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Via">
            <summary>
            Identifies a resource that is the source of the
                  information in the link's context.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.Webmention">
            <summary>
            Identifies a target URI that supports the Webmention protocol.
                This allows clients that mention a resource in some form of publishing process
                to contact that endpoint and inform it that this resource has been mentioned.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.WorkingCopy">
            <summary>
            Points to a working copy for this resource.
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.LinkRelationTypes.WorkingCopyOf">
            <summary>
            Points to the versioned resource from which this
                  working copy was obtained.
                
            (system: http://hl7.org/fhir/CodeSystem/iana-link-relations)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.SearchEntryMode">
            <summary>
            Why an entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
            (url: http://hl7.org/fhir/ValueSet/search-entry-mode)
            (system: http://hl7.org/fhir/search-entry-mode)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.SearchEntryMode.Match">
            <summary>
            This resource matched the search specification.
            (system: http://hl7.org/fhir/search-entry-mode)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.SearchEntryMode.Include">
            <summary>
            This resource is returned because it is referred to from another resource in the search set.
            (system: http://hl7.org/fhir/search-entry-mode)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.SearchEntryMode.Outcome">
            <summary>
            An OperationOutcome that provides additional information about the processing of a search.
            (system: http://hl7.org/fhir/search-entry-mode)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.HTTPVerb">
            <summary>
            HTTP verbs (in the HTTP command line). See [HTTP rfc](https://tools.ietf.org/html/rfc7231) for details.
            (url: http://hl7.org/fhir/ValueSet/http-verb)
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.HTTPVerb.GET">
            <summary>
            HTTP GET Command.
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.HTTPVerb.HEAD">
            <summary>
            HTTP HEAD Command.
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.HTTPVerb.POST">
            <summary>
            HTTP POST Command.
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.HTTPVerb.PUT">
            <summary>
            HTTP PUT Command.
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.HTTPVerb.DELETE">
            <summary>
            HTTP DELETE Command.
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Bundle.HTTPVerb.PATCH">
            <summary>
            HTTP PATCH Command.
            (system: http://hl7.org/fhir/http-verb)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.LinkComponent">
            <summary>
            Links related to this Bundle
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.LinkComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.LinkComponent.RelationElement">
            <summary>
            See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.LinkComponent.Relation">
            <summary>
            See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.LinkComponent.UrlElement">
            <summary>
            Reference details for the link
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.LinkComponent.Url">
            <summary>
            Reference details for the link
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Bundle.LinkComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.SearchComponent">
            <summary>
            Search related information
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.SearchComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.SearchComponent.ModeElement">
            <summary>
            match | include - why this is in the result set
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.SearchComponent.Mode">
            <summary>
            match | include - why this is in the result set
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.SearchComponent.ScoreElement">
            <summary>
            Search ranking (between 0 and 1)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.SearchComponent.Score">
            <summary>
            Search ranking (between 0 and 1)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Bundle.SearchComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.RequestComponent">
            <summary>
            Additional execution information (transaction/batch/history)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.MethodElement">
            <summary>
            GET | HEAD | POST | PUT | DELETE | PATCH
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.Method">
            <summary>
            GET | HEAD | POST | PUT | DELETE | PATCH
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.UrlElement">
            <summary>
            URL for HTTP equivalent of this entry
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.Url">
            <summary>
            URL for HTTP equivalent of this entry
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfNoneMatchElement">
            <summary>
            For managing cache validation
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfNoneMatch">
            <summary>
            For managing cache validation
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfModifiedSinceElement">
            <summary>
            For managing cache currency
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfModifiedSince">
            <summary>
            For managing cache currency
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfMatchElement">
            <summary>
            For managing update contention
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfMatch">
            <summary>
            For managing update contention
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfNoneExistElement">
            <summary>
            For conditional creates
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.RequestComponent.IfNoneExist">
            <summary>
            For conditional creates
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Bundle.RequestComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Bundle.ResponseComponent">
            <summary>
            Results of execution (transaction/batch/history)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.StatusElement">
            <summary>
            Status response code (text optional)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.Status">
            <summary>
            Status response code (text optional)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.LocationElement">
            <summary>
            The location (if the operation returns a location)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.Location">
            <summary>
            The location (if the operation returns a location)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.EtagElement">
            <summary>
            The Etag for the resource (if relevant)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.Etag">
            <summary>
            The Etag for the resource (if relevant)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.LastModifiedElement">
            <summary>
            Server's date time modified
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.LastModified">
            <summary>
            Server's date time modified
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.ResponseComponent.Outcome">
            <summary>
            OperationOutcome with hints and warnings (for batch/transaction)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Bundle.ResponseComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Identifier">
            <summary>
            Persistent identifier for the bundle
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.TypeElement">
            <summary>
            document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Type">
            <summary>
            document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.TimestampElement">
            <summary>
            When the bundle was assembled. Note: Element was introduced in R4, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Timestamp">
            <summary>
            When the bundle was assembled
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.TotalElement">
            <summary>
            If search, the total number of matches
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Total">
            <summary>
            If search, the total number of matches
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Link">
            <summary>
            Links related to this Bundle
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Entry">
            <summary>
            Entry in the bundle - will have a resource or information
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Signature">
            <summary>
            Digital Signature
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Bundle.Issues">
            <summary>
            Issues with the Bundle. Note: Element was introduced in R5, do not use when working with older releases.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Bundle.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.IsDeleted(Hl7.Fhir.Model.Bundle.EntryComponent)">
            <summary>
            Identifies if this entry is a deleted transaction (entry.Transaction.Method == DELETE)
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.FindEntry(Hl7.Fhir.Model.Bundle,Hl7.Fhir.Model.ResourceReference,System.Boolean)">
            <summary>
            Find all entries in a Bundle that match the given reference.
            </summary>
            <param name="bundle">Bundle to search in</param>
            <param name="reference">An absolute reference to match against the fullUrl of the entries in the bundle</param>
            <param name="includeDeleted">Whether to include deleted entries in the search. Optional.</param>
            <returns>A list of Resources with the given identity, or an empty list if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.FindEntry(Hl7.Fhir.Model.Bundle,System.String,System.Boolean)">
            <summary>
            Find all entries in a Bundle that match the given reference.
            </summary>
            <param name="bundle">Bundle to search in</param>
            <param name="reference">An absolute reference to match against the fullUrl of the entries in the bundle</param>
            <param name="includeDeleted">Whether to include deleted entries in the search. Optional.</param>
            <returns>A list of Resources with the given identity, or an empty list if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.FindEntry(Hl7.Fhir.Model.Bundle,System.Uri,System.Boolean)">
            <summary>
            Find all entries in a Bundle that match the given reference.
            </summary>
            <param name="bundle">Bundle to search in</param>
            <param name="reference">The identity to find</param>
            <param name="includeDeleted">Whether to include deleted entries in the search. Optional.</param>
            <returns>A list of Resources with the given identity, or an empty list if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.ByTag(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.Resource},Hl7.Fhir.Model.Coding)">
            <summary>
            Filter all BundleEntries that have a given tag.
            </summary>
            <param name="entries">List of bundle entries to filter on</param>
            <param name="tag">Tag to filter Resources on</param>
            <returns>A list of BundleEntries having the given tag, or an empty list if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.ByTag``1(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.Resource},Hl7.Fhir.Model.Coding)">
            <summary>
            Filter all ResourceEntries that have a given tag.
            </summary>
            <typeparam name="T">Type of Resource to filter</typeparam>
            <param name="entries">List of resources to filter on</param>
            <param name="tag">Tag to filter Resources on</param>
            <returns>A list of typed ResourceEntries having the given tag, or an empty list if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.BundleExtensions.ByResourceType``1(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.Bundle.EntryComponent})">
            <summary>
            Filter ResourceEntries containing a specific Resource type. No DeletedEntries are returned.
            </summary>
            <typeparam name="T">Type of Resource to filter</typeparam>
            <returns>All ResourceEntries containing the given type of resource, or an empty list if none were found.</returns>
        </member>
        <member name="T:Hl7.Fhir.Model.Canonical">
            <summary>
            Primitive Type canonical
            see [Canonical References](references.html#canonical)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.#ctor(System.Uri)">
            <summary>
            Constructs a Canonical based on a given <see cref="P:Hl7.Fhir.Model.Canonical.Uri"/>.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a canonical from its components.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.Deconstruct(System.String@,System.String@,System.String@)">
            <summary>
            Deconstructs the canonical into its uri and version.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.op_Implicit(System.String)~Hl7.Fhir.Model.Canonical">
            <summary>
            Converts a string to a canonical.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.op_Implicit(Hl7.Fhir.Model.Canonical)~System.String">
            <summary>
            Converts a canonical to a string.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.Version">
            <summary>
            The version string of the canonical (if present).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.Fragment">
            <summary>
            Optional anchor at the end of the canonical, without the '#' prefix.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.Uri">
            <summary>
            The uri part of the canonical, which is the canonical without the version indication.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Canonical.ToUri">
            <summary>
            Converts the canonical to a <see cref="T:System.Uri" />.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.IsAbsolute">
            <summary>
            Whether the canonical is a relative or an absolute uri.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.HasVersion">
            <summary>
            Whether the canonical has a version part.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.HasAnchor">
            <summary>
            Whether the canonical end with an anchor.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Canonical.PATTERN">
            Must conform to the pattern "\S*"
        </member>
        <member name="P:Hl7.Fhir.Model.Canonical.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Code">
            <summary>
            Primitive Type code
            A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Code.ToSystemCode">
            <summary>
            Creates a <see cref="T:Hl7.Fhir.ElementModel.Types.Code"/> from an instance of a <see cref="T:Hl7.Fhir.Model.Code"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Code.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Code.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Code.PATTERN">
            Must conform to the pattern "[^\s]+( [^\s]+)*"
        </member>
        <member name="P:Hl7.Fhir.Model.Code.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.CodeableConcept">
            <summary>
            Concept - reference to a terminology or just  text
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableConcept.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableConcept.Coding">
            <summary>
            Code defined by a terminology system
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableConcept.TextElement">
            <summary>
            Plain text representation of the concept
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableConcept.Text">
            <summary>
            Plain text representation of the concept
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.CodeableConcept.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.CodeableReference">
            <summary>
            Reference to a resource or a concept
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableReference.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableReference.Concept">
            <summary>
            Reference to a concept (by class)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.CodeableReference.Reference">
            <summary>
            Reference to a resource (by instance)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.CodeableReference.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Coding">
            <summary>
            A reference to a code defined by a terminology system
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.SystemElement">
            <summary>
            Identity of the terminology system
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.System">
            <summary>
            Identity of the terminology system
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.VersionElement">
            <summary>
            Version of the system - if relevant
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.Version">
            <summary>
            Version of the system - if relevant
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.CodeElement">
            <summary>
            Symbol in syntax defined by the system
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.Code">
            <summary>
            Symbol in syntax defined by the system
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.DisplayElement">
            <summary>
            Representation defined by the system
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.Display">
            <summary>
            Representation defined by the system
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.UserSelectedElement">
            <summary>
            If this coding was chosen directly by the user
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Coding.UserSelected">
            <summary>
            If this coding was chosen directly by the user
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Coding.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.ContactPoint">
            <summary>
            Details of a Technology mediated contact point (phone, fax, email, etc)
            </summary>
            <summary>
            Details of a Technology mediated contact point (phone, fax, email, etc.)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.ContactPoint.ContactPointSystem">
            <summary>
            Telecommunications form for contact point.
            (url: http://hl7.org/fhir/ValueSet/contact-point-system)
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Phone">
            <summary>
            The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Fax">
            <summary>
            The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Email">
            <summary>
            The value is an email address.
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Pager">
            <summary>
            The value is a pager number. These may be local pager numbers that are only usable on a particular pager system.
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Url">
            <summary>
            A contact that is not a phone, fax, pager or email address and is expressed as a URL.  This is intended for various institutional or personal contacts including web sites, blogs, Skype, Twitter, Facebook, etc. Do not use for email addresses.
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Sms">
            <summary>
            A contact that can be used for sending a sms message (e.g. mobile phones, some landlines).
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointSystem.Other">
            <summary>
            A contact that is not a phone, fax, page or email address and is not expressible as a URL.  E.g. Internal mail address.  This SHOULD NOT be used for contacts that are expressible as a URL (e.g. Skype, Twitter, Facebook, etc.)  Extensions may be used to distinguish "other" contact types.
            (system: http://hl7.org/fhir/contact-point-system)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.ContactPoint.ContactPointUse">
            <summary>
            Use of contact point.
            (url: http://hl7.org/fhir/ValueSet/contact-point-use)
            (system: http://hl7.org/fhir/contact-point-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointUse.Home">
            <summary>
            A communication contact point at a home; attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available.
            (system: http://hl7.org/fhir/contact-point-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointUse.Work">
            <summary>
            An office contact point. First choice for business related contacts during business hours.
            (system: http://hl7.org/fhir/contact-point-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointUse.Temp">
            <summary>
            A temporary contact point. The period can provide more detailed information.
            (system: http://hl7.org/fhir/contact-point-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointUse.Old">
            <summary>
            This contact point is no longer in use (or was never correct, but retained for records).
            (system: http://hl7.org/fhir/contact-point-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.ContactPoint.ContactPointUse.Mobile">
            <summary>
            A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent matters, not the first choice for routine business.
            (system: http://hl7.org/fhir/contact-point-use)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.SystemElement">
            <summary>
            phone | fax | email | pager | url | sms | other
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.System">
            <summary>
            phone | fax | email | pager | url | sms | other
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.ValueElement">
            <summary>
            The actual contact point details
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.Value">
            <summary>
            The actual contact point details
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.UseElement">
            <summary>
            home | work | temp | old | mobile - purpose of this contact point
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.Use">
            <summary>
            home | work | temp | old | mobile - purpose of this contact point
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.RankElement">
            <summary>
            Specify preferred order of use (1 = highest)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.Rank">
            <summary>
            Specify preferred order of use (1 = highest)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactPoint.Period">
            <summary>
            Time period when the contact point was/is in use
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.ContactPoint.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Date">
            <summary>
            Primitive Type date
            A date or partial date (e.g. just year or year + month). There is no UTC offset. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.op_Equality(Hl7.Fhir.Model.Date,Hl7.Fhir.Model.Date)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.op_Inequality(Hl7.Fhir.Model.Date,Hl7.Fhir.Model.Date)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.Today">
            <summary>
            Gets the current date in the local timezone.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.UtcToday">
            <summary>
            Gets the current date in UTC.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.TryToDate(Hl7.Fhir.ElementModel.Types.Date@)">
            <summary>
            Converts a Fhir Date to a <see cref="T:Hl7.Fhir.ElementModel.Types.Date"/>.
            </summary>
            <returns>true if the Fhir Date contains a valid date string, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.ToDate">
            <summary>
            Converts a Fhir Date to a <see cref="T:Hl7.Fhir.ElementModel.Types.Date"/>.
            </summary>
            <returns>The Date, or null if the <see cref="P:Hl7.Fhir.Model.Date.Value"/> is null.</returns>
            <exception cref="T:System.FormatException">Thrown when the Value does not contain a valid FHIR Date.</exception>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.ToDateTimeOffset">
            <summary>
            Converts this Fhir Fhir Date to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A DateTimeOffset filled out to midnight, january 1 (UTC) in case of a partial date.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.TryToDateTimeOffset(System.DateTimeOffset@)">
            <summary>
            Convert this Fhir Date to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>True if the value of the Fhir Date is not null and can be parsed as a DateTimeOffset, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Date.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Date.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Date.PATTERN">
            Must conform to the pattern "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?"
        </member>
        <member name="P:Hl7.Fhir.Model.Date.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.DomainResource">
            <summary>
            A resource with narrative, extensions, and contained resources
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.DomainResource.FindContainedResource(Hl7.Fhir.Model.ResourceReference)">
            <summary>
            Finds the contained resource defined by the <paramref name="reference"/>. A reference to a contained resource starts with the
            character #.
            </summary>
            <param name="reference">the reference to contained resource</param>
            <returns>The resource referenced by <paramref name="reference"/>, null otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.DomainResource.FindContainedResource(System.String)">
            <summary>
            Finds the contained resource defined by the <paramref name="reference"/>. A reference to a contained resource starts with the
            character #.
            </summary>
            <param name="reference">the reference to contained resource</param>
            <returns>The resource referenced by <paramref name="reference"/>, null otherwise.</returns>
        </member>
        <member name="P:Hl7.Fhir.Model.DomainResource.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.DomainResource.Text">
            <summary>
            Text summary of the resource, for human interpretation
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.DomainResource.Contained">
            <summary>
            Contained, inline Resources
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.DomainResource.Extension">
            <summary>
            Additional content defined by implementations
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.DomainResource.ModifierExtension">
            <summary>
            Extensions that cannot be ignored
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.DomainResource.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Element">
            <summary>
            Base for all elements
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Element.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Element.ElementId">
            <summary>
            Unique id for inter-element referencing
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Element.Extension">
            <summary>
            Additional Content defined by implementations
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Extension">
            <summary>
            Optional Extensions Element
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Extension.Url">
            <summary>
            identifies the meaning of the extension
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Extension.Value">
            <summary>
            Value of extension
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FhirBoolean">
            <summary>
            Primitive Type boolean
            Value of "true" or "false"
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirBoolean.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.FhirBoolean.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirBoolean.PATTERN">
            Must conform to the pattern "true|false"
        </member>
        <member name="P:Hl7.Fhir.Model.FhirBoolean.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FhirDateTime">
            <summary>
            Primitive Type dateTime
            UTC offset is allowed for dates and partial dates
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.op_Equality(Hl7.Fhir.Model.FhirDateTime,Hl7.Fhir.Model.FhirDateTime)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.op_Inequality(Hl7.Fhir.Model.FhirDateTime,Hl7.Fhir.Model.FhirDateTime)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirDateTime.FMT_FULL">
            <summary>
            A <c>string.Format</c> pattern to use when formatting a full datetime with timezone.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirDateTime.FMT_YEAR">
            <summary>
            A <c>string.Format</c> pattern to use when formatting a year.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirDateTime.FMT_YEARMONTH">
            <summary>
            A <c>string.Format</c> pattern to use when formatting a year and month.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirDateTime.FMT_YEARMONTHDAY">
            <summary>
            A <c>string.Format</c> pattern to use when formatting a date.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.TryToDateTime(Hl7.Fhir.ElementModel.Types.DateTime@)">
            <summary>
            Converts a FhirDateTime to a <see cref="T:Hl7.Fhir.ElementModel.Types.DateTime"/>.
            </summary>
            <returns>true if the FhirDateTime contains a valid date/time string, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.ToDateTime">
            <summary>
            Converts a FhirDateTime to a <see cref="T:Hl7.Fhir.ElementModel.Types.DateTime"/>.
            </summary>
            <returns>The DateTime, or null if the <see cref="P:Hl7.Fhir.Model.FhirDateTime.Value"/> is null.</returns>
            <exception cref="T:System.FormatException">Thrown when the Value does not contain a valid FHIR DateTime.</exception>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.ToDateTimeOffset(System.TimeSpan)">
            <summary>
            Converts this Fhir FhirDateTime to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="zone">Ensures the returned DateTimeOffset uses the the specified zone.</param>
            <remarks>In .NET the minimal value for DateTimeOffset is 1/1/0001 12:00:00 AM +00:00. That means,for example, 
            a FhirDateTime of "0001-01-01T00:00:00+01:00" could not be converted to a DateTimeOffset. In that case a 
            ArgumentOutOfRangeException will be thrown.</remarks>
            <returns>A DateTimeOffset filled out to midnight, january 1 (UTC) in case of a partial date/time. If the Fhir DateTime
            does not specify a timezone, the UTC (Coordinated Universal Time) is assumed. Note that the zone parameter has no
            effect on this, this merely converts the given Fhir datetime to the desired timezone</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.TryToDateTimeOffset(System.DateTimeOffset@)">
            <summary>
            Convert this FhirDateTime to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>True if the value of the FhirDateTime is not null, can be parsed as a DateTimeOffset and has a specified timezone, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.TryToDateTimeOffset(System.TimeSpan,System.DateTimeOffset@)">
            <summary>
            Convert this FhirDateTime to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="defaultOffset">Used when the partial FhirDateTime does not have an offset specified.</param>
            <param name="dto">The converted <see cref="T:System.DateTimeOffset"/>.</param>
            <returns>True if the value of the FhirDateTime is not null and can be parsed as a DateTimeOffset, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDateTime.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.FhirDateTime.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirDateTime.PATTERN">
            Must conform to the pattern "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?"
        </member>
        <member name="P:Hl7.Fhir.Model.FhirDateTime.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FhirDecimal">
            <summary>
            Primitive Type decimal
            Do not use an IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirDecimal.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.FhirDecimal.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirDecimal.PATTERN">
            Must conform to the pattern "-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?"
        </member>
        <member name="P:Hl7.Fhir.Model.FhirDecimal.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FhirString">
            <summary>
            Primitive Type string
            Note that FHIR strings SHALL NOT exceed 1,048,576 (1024*1024) characters in size
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirString.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.FhirString.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirString.PATTERN">
            Must conform to the pattern "^[\s\S]+$"
        </member>
        <member name="P:Hl7.Fhir.Model.FhirString.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FhirUri">
            <summary>
            Primitive Type uri
            see http://en.wikipedia.org/wiki/Uniform_resource_identifier
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirUri.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
            <remarks>Due to the way we use Urls in FHIR, some "valid" FHIR urls are
            actually no valid according to <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"/></remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.FhirUri.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirUri.PATTERN">
            Must conform to the pattern "\S*"
        </member>
        <member name="P:Hl7.Fhir.Model.FhirUri.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FhirUrl">
            <summary>
            Primitive Type url
            A URI that is a literal reference
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.FhirUrl.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.FhirUrl.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FhirUrl.PATTERN">
            Must conform to the pattern "\S*"
        </member>
        <member name="P:Hl7.Fhir.Model.FhirUrl.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Attachment">
            <summary>
            Content in a format defined elsewhere
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.ContentTypeElement">
            <summary>
            Mime type of the content, with charset etc.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.ContentType">
            <summary>
            Mime type of the content, with charset etc.
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.LanguageElement">
            <summary>
            Human language of the content (BCP-47)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Language">
            <summary>
            Human language of the content (BCP-47)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.DataElement">
            <summary>
            Data inline, base64ed
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Data">
            <summary>
            Data inline, base64ed
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.UrlElement">
            <summary>
            Uri where the data can be found
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Url">
            <summary>
            Uri where the data can be found
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.SizeElement">
            <summary>
            Number of bytes of content (if url provided)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Size">
            <summary>
            Number of bytes of content (if url provided)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.HashElement">
            <summary>
            Hash of the data (sha-1, base64ed)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Hash">
            <summary>
            Hash of the data (sha-1, base64ed)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.TitleElement">
            <summary>
            Label to display in place of the data
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Title">
            <summary>
            Label to display in place of the data
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.CreationElement">
            <summary>
            Date attachment was first created
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Creation">
            <summary>
            Date attachment was first created
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.HeightElement">
            <summary>
            Height of the image in pixels (photo/video). Note: Element was introduced in R5, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Height">
            <summary>
            Height of the image in pixels (photo/video)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.WidthElement">
            <summary>
            Width of the image in pixels (photo/video). Note: Element was introduced in R5, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Width">
            <summary>
            Width of the image in pixels (photo/video)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.FramesElement">
            <summary>
            Number of frames if &gt; 1 (photo). Note: Element was introduced in R5, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Frames">
            <summary>
            Number of frames if &gt; 1 (photo)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.DurationElement">
            <summary>
            Length in seconds (audio / video). Note: Element was introduced in R5, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Duration">
            <summary>
            Length in seconds (audio / video)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.PagesElement">
            <summary>
            Number of printed pages. Note: Element was introduced in R5, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Attachment.Pages">
            <summary>
            Number of printed pages
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Attachment.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.BackboneElement">
            <summary>
            Base for elements defined inside a resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.BackboneElement.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.BackboneElement.ModifierExtension">
            <summary>
            Extensions that cannot be ignored even if unrecognized
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.BackboneElement.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.BackboneType">
            <summary>
            Base for datatypes that can carry modifier extensions
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.BackboneType.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.BackboneType.ModifierExtension">
            <summary>
            Extensions that cannot be ignored even if unrecognized
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.BackboneType.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Binary">
            <summary>
            Pure binary content defined by a format other than FHIR
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.ContentTypeElement">
            <summary>
            MimeType of the binary content
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.ContentType">
            <summary>
            MimeType of the binary content
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.SecurityContext">
            <summary>
            Identifies another resource to use as proxy when enforcing access control
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.DataElement">
            <summary>
            The actual content. Note: Element was introduced in R4, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.Data">
            <summary>
            The actual content
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.ContentElement">
            <summary>
            The actual content. Note: Element is replaced by 'Binary.data' since R4. Do not use this element 'content' with R4 and newer releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Binary.Content">
            <summary>
            The actual content
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Binary.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.ContactDetail">
            <summary>
            Contact information
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactDetail.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactDetail.NameElement">
            <summary>
            Name of an individual to contact
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactDetail.Name">
            <summary>
            Name of an individual to contact
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ContactDetail.Telecom">
            <summary>
            Contact details for individual or organization
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.ContactDetail.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.DataType">
            <summary>
            Reuseable Types
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.DataType.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.DataType.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Id">
            <summary>
            Primitive Type id
            RFC 4122
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Id.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Id.PATTERN">
            Must conform to the pattern "[A-Za-z0-9\-\.]{1,64}"
        </member>
        <member name="P:Hl7.Fhir.Model.Id.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Id.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Identifier">
            <summary>
            An identifier intended for computation
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Identifier.IdentifierUse">
            <summary>
            Identifies the purpose for this identifier, if known .
            (url: http://hl7.org/fhir/ValueSet/identifier-use)
            (system: http://hl7.org/fhir/identifier-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Identifier.IdentifierUse.Usual">
            <summary>
            The identifier recommended for display and use in real-world interactions which should be used when such identifier is different from the "official" identifier.
            (system: http://hl7.org/fhir/identifier-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Identifier.IdentifierUse.Official">
            <summary>
            The identifier considered to be most trusted for the identification of this item. Sometimes also known as "primary" and "main". The determination of "official" is subjective and implementation guides often provide additional guidelines for use.
            (system: http://hl7.org/fhir/identifier-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Identifier.IdentifierUse.Temp">
            <summary>
            A temporary identifier.
            (system: http://hl7.org/fhir/identifier-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Identifier.IdentifierUse.Secondary">
            <summary>
            An identifier that was assigned in secondary use - it serves to identify the object in a relative context, but cannot be consistently assigned to the same object again in a different context.
            (system: http://hl7.org/fhir/identifier-use)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Identifier.IdentifierUse.Old">
            <summary>
            The identifier id no longer considered valid, but may be relevant for search purposes.  E.g. Changes to identifier schemes, account merges, etc.
            (system: http://hl7.org/fhir/identifier-use)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.UseElement">
            <summary>
            usual | official | temp | secondary | old (If known)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.Use">
            <summary>
            usual | official | temp | secondary | old (If known)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.Type">
            <summary>
            Description of identifier
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.SystemElement">
            <summary>
            The namespace for the identifier value
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.System">
            <summary>
            The namespace for the identifier value
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.ValueElement">
            <summary>
            The value that is unique
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.Value">
            <summary>
            The value that is unique
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.Period">
            <summary>
            Time period when id is/was valid for use
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Identifier.Assigner">
            <summary>
            Organization that issued id (may be just text)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Identifier.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Instant">
            <summary>
            Primitive Type instant
            Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. UTC offset is always required
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Instant.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Instant.PATTERN">
            Must conform to the pattern "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
        </member>
        <member name="P:Hl7.Fhir.Model.Instant.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Instant.op_Equality(Hl7.Fhir.Model.Instant,Hl7.Fhir.Model.Instant)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Instant.op_Inequality(Hl7.Fhir.Model.Instant,Hl7.Fhir.Model.Instant)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Instant.Now">
            <summary>
            Returns an Instant initialized with the current date and time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Instant.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Integer">
            <summary>
            Primitive Type integer
            32 bit number; for values larger than this, use decimal
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Integer.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Integer.PATTERN">
            Must conform to the pattern "[0]|[-+]?[1-9][0-9]*"
        </member>
        <member name="P:Hl7.Fhir.Model.Integer.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Integer.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Integer64">
            <summary>
            Primitive Type integer64
            Typically this is used for record counters (e.g. database keys)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Integer64.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Integer64.PATTERN">
            Must conform to the pattern "[0]|[-+]?[1-9][0-9]*"
        </member>
        <member name="P:Hl7.Fhir.Model.Integer64.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Integer64.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Markdown">
            <summary>
            Primitive Type markdown
            Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Markdown.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Markdown.PATTERN">
            Must conform to the pattern "^[\s\S]+$"
        </member>
        <member name="P:Hl7.Fhir.Model.Markdown.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Markdown.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Meta">
            <summary>
            Metadata about a resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.VersionIdElement">
            <summary>
            Version specific identifier
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.VersionId">
            <summary>
            Version specific identifier
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.LastUpdatedElement">
            <summary>
            When the resource version last changed
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.LastUpdated">
            <summary>
            When the resource version last changed
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.SourceElement">
            <summary>
            Identifies where the resource comes from. Note: Element was introduced in R4, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.Source">
            <summary>
            Identifies where the resource comes from
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.ProfileElement">
            <summary>
            Profiles this resource claims to conform to
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.Profile">
            <summary>
            Profiles this resource claims to conform to
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.Security">
            <summary>
            Security Labels applied to this resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Meta.Tag">
            <summary>
            Tags applied to this resource
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Meta.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Oid">
            <summary>
            Primitive Type oid
            RFC 3001. See also ISO/IEC 8824:1990 €
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Oid.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Oid.PATTERN">
            Must conform to the pattern "urn:oid:[0-2](\.(0|[1-9][0-9]*))+"
        </member>
        <member name="P:Hl7.Fhir.Model.Oid.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Oid.AsUri">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Model.FhirUri"/> based on this oid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Oid.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.OperationOutcome">
            <summary>
            Information about the success/failure of an action
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.OperationOutcome.IssueSeverity">
            <summary>
            How the issue affects the success of the action.
            (url: http://hl7.org/fhir/ValueSet/issue-severity)
            (system: http://hl7.org/fhir/issue-severity)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueSeverity.Fatal">
            <summary>
            The issue caused the action to fail and no further checking could be performed.
            (system: http://hl7.org/fhir/issue-severity)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueSeverity.Error">
            <summary>
            The issue is sufficiently important to cause the action to fail.
            (system: http://hl7.org/fhir/issue-severity)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueSeverity.Warning">
            <summary>
            The issue is not important enough to cause the action to fail but may cause it to be performed suboptimally or in a way that is not as desired.
            (system: http://hl7.org/fhir/issue-severity)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueSeverity.Information">
            <summary>
            The issue has no relation to the degree of success of the action.
            (system: http://hl7.org/fhir/issue-severity)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueSeverity.Success">
            <summary>
            The operation completed successfully.
            (system: http://hl7.org/fhir/issue-severity)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.OperationOutcome.IssueType">
            <summary>
            A code that describes the type of issue.
            (url: http://hl7.org/fhir/ValueSet/issue-type)
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Invalid">
            <summary>
            Content invalid against the specification or a profile.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Structure">
            <summary>
            A structural issue in the content such as wrong namespace, unable to parse the content completely, invalid syntax, etc.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Required">
            <summary>
            A required element is missing.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Value">
            <summary>
            An element or header value is invalid.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Invariant">
            <summary>
            A content validation rule failed - e.g. a schematron rule.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Security">
            <summary>
            An authentication/authorization/permissions issue of some kind.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Login">
            <summary>
            The client needs to initiate an authentication process.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Unknown">
            <summary>
            The user or system was not able to be authenticated (either there is no process, or the proferred token is unacceptable).
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Expired">
            <summary>
            User session expired; a login may be required.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Forbidden">
            <summary>
            The user does not have the rights to perform this action.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Suppressed">
            <summary>
            Some information was not or might not have been returned due to business rules, consent or privacy rules, or access permission constraints.  This information may be accessible through alternate processes.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Processing">
            <summary>
            Processing issues. These are expected to be final e.g. there is no point resubmitting the same content unchanged.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.NotSupported">
            <summary>
            The interaction, operation, resource or profile is not supported.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Duplicate">
            <summary>
            An attempt was made to create a duplicate record.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.MultipleMatches">
            <summary>
            Multiple matching records were found when the operation required only one match.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.NotFound">
            <summary>
            The reference provided was not found. In a pure RESTful environment, this would be an HTTP 404 error, but this code may be used where the content is not found further into the application architecture.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Deleted">
            <summary>
            The reference pointed to content (usually a resource) that has been deleted.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.TooLong">
            <summary>
            Provided content is too long (typically, this is a denial of service protection type of error).
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.CodeInvalid">
            <summary>
            The code or system could not be understood, or it was not valid in the context of a particular ValueSet.code.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Extension">
            <summary>
            An extension was found that was not acceptable, could not be resolved, or a modifierExtension was not recognized.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.TooCostly">
            <summary>
            The operation was stopped to protect server resources; e.g. a request for a value set expansion on all of SNOMED CT.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.BusinessRule">
            <summary>
            The content/operation failed to pass some business rule and so could not proceed.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Conflict">
            <summary>
            Content could not be accepted because of an edit conflict (i.e. version aware updates). (In a pure RESTful environment, this would be an HTTP 409 error, but this code may be used where the conflict is discovered further into the application architecture.).
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.LimitedFilter">
            <summary>
            Some search filters might not have applied on all results.  Data may have been included that does not meet all of the filters listed in the `self` `Bundle.link`.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Transient">
            <summary>
            Transient processing issues. The system receiving the message may be able to resubmit the same content once an underlying issue is resolved.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.LockError">
            <summary>
            A resource/record locking failure (usually in an underlying database).
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.NoStore">
            <summary>
            The persistent store is unavailable; e.g. the database is down for maintenance or similar action, and the interaction or operation cannot be processed.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Exception">
            <summary>
            An unexpected internal error has occurred.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Timeout">
            <summary>
            An internal timeout has occurred.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Incomplete">
            <summary>
            Not all data sources typically accessed could be reached or responded in time, so the returned information might not be complete (applies to search interactions and some operations).
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Throttled">
            <summary>
            The system is not prepared to handle this request due to load management.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Informational">
            <summary>
            A message unrelated to the processing success of the completed operation (examples of the latter include things like reminders of password expiry, system maintenance times, etc.).
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.OperationOutcome.IssueType.Success">
            <summary>
            The operation completed successfully.
            (system: http://hl7.org/fhir/issue-type)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.OperationOutcome.IssueComponent">
            <summary>
            A single issue associated with the action
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.SeverityElement">
            <summary>
            fatal | error | warning | information | success
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Severity">
            <summary>
            fatal | error | warning | information | success
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.CodeElement">
            <summary>
            Error or warning code
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Code">
            <summary>
            Error or warning code
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Details">
            <summary>
            Additional details about the error
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.DiagnosticsElement">
            <summary>
            Additional diagnostic information about the issue
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Diagnostics">
            <summary>
            Additional diagnostic information about the issue
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.LocationElement">
            <summary>
            Deprecated: Path of element(s) related to issue
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Location">
            <summary>
            Deprecated: Path of element(s) related to issue
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.ExpressionElement">
            <summary>
            FHIRPath of element(s) related to issue
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Expression">
            <summary>
            FHIRPath of element(s) related to issue
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.OperationOutcome.IssueComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Model.OperationOutcome.Issue">
            <summary>
            A single issue associated with the action
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.OperationOutcome.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Parameters">
            <summary>
            Operation Request or Response
            </summary>
            <summary>
            This is the Parameters partial class that adds all the specific functionality of a Parameters to the model
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Parameters.ParameterComponent">
            <summary>
            Operation Parameter
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.ParameterComponent.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.ParameterComponent.NameElement">
            <summary>
            Name from the definition
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.ParameterComponent.Name">
            <summary>
            Name from the definition
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.ParameterComponent.Value">
            <summary>
            If parameter is a data type
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.ParameterComponent.Resource">
            <summary>
            If parameter is a whole resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.ParameterComponent.Part">
            <summary>
            Named part of a multi-part parameter
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.ParameterComponent.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Model.Parameters.Parameter">
            <summary>
            Operation Parameter
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.Add(System.String,Hl7.Fhir.Model.Base)">
            <summary>
            Add a parameter with a given name and value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value of the parameter as a FHIR datatype or Resource</param>
            <returns>this (Parameters), so you can chain AddParameter calls</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.Add(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,Hl7.Fhir.Model.Base}})">
            <summary>
            Add a parameter with a given name and tuple value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="tuples">The value of the parameter as a list of tuples of (name,FHIR datatype or Resource)</param>
            <returns>this (Parameters), so you can chain AddParameter calls</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.Remove(System.String,System.Boolean)">
            <summary>
            Remove a parameter with a given name.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="matchPrefix">If true, will remove all parameters which begin with the string given in the "name" parameter</param>
            <remarks>No exception is thrown when the parameters were not found and nothing was removed.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.Get(System.String,System.Boolean)">
            <summary>
            Searches for a parameter with the given name, and returns the matching parameter(s)
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="matchPrefix">If true, will remove all parameters which begin with the string given in the "name" parameter</param>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.GetSingle(System.String,System.Boolean)">
            <summary>
            Searches for a parameter with the given name, and returns the matching parameter(s)
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="matchPrefix">If true, will remove all parameters which begin with the string given in the "name" parameter</param>
        </member>
        <member name="M:Hl7.Fhir.Model.Parameters.GetSingleValue``1(System.String,System.Boolean)">
            <summary>
            Returns the Value property of the requested parameter casted to the requested type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="matchPrefix"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Model.Period">
            <summary>
            Time range defined by start and end date/time
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Period.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Period.StartElement">
            <summary>
            Starting time with inclusive boundary
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Period.Start">
            <summary>
            Starting time with inclusive boundary
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Period.EndElement">
            <summary>
            End time with inclusive boundary, if not ongoing
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Period.End">
            <summary>
            End time with inclusive boundary, if not ongoing
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Period.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.PositiveInt">
            <summary>
            Primitive Type positiveInt
            An integer with a value that is positive (e.g. &gt;0)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.PositiveInt.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.PositiveInt.PATTERN">
            Must conform to the pattern "[1-9][0-9]*"
        </member>
        <member name="P:Hl7.Fhir.Model.PositiveInt.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.PositiveInt.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Quantity">
            <summary>
            A measured or measurable amount
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Quantity.QuantityComparator">
            <summary>
            How the Quantity should be understood and represented.
            (url: http://hl7.org/fhir/ValueSet/quantity-comparator)
            (system: http://hl7.org/fhir/quantity-comparator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Quantity.QuantityComparator.LessThan">
            <summary>
            The actual value is less than the given value.
            (system: http://hl7.org/fhir/quantity-comparator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Quantity.QuantityComparator.LessOrEqual">
            <summary>
            The actual value is less than or equal to the given value.
            (system: http://hl7.org/fhir/quantity-comparator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Quantity.QuantityComparator.GreaterOrEqual">
            <summary>
            The actual value is greater than or equal to the given value.
            (system: http://hl7.org/fhir/quantity-comparator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Quantity.QuantityComparator.GreaterThan">
            <summary>
            The actual value is greater than the given value.
            (system: http://hl7.org/fhir/quantity-comparator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Quantity.QuantityComparator.Ad">
            <summary>
            The actual value is sufficient for the total quantity to equal the given value.
            (system: http://hl7.org/fhir/quantity-comparator)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.ValueElement">
            <summary>
            Numerical value (with implicit precision)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.Value">
            <summary>
            Numerical value (with implicit precision)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.ComparatorElement">
            <summary>
            &lt; | &lt;= | &gt;= | &gt; | ad - how to understand the value
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.Comparator">
            <summary>
            &lt; | &lt;= | &gt;= | &gt; | ad - how to understand the value
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.UnitElement">
            <summary>
            Unit representation
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.Unit">
            <summary>
            Unit representation
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.SystemElement">
            <summary>
            System that defines coded unit form
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.System">
            <summary>
            System that defines coded unit form
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.CodeElement">
            <summary>
            Coded form of the unit
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Quantity.Code">
            <summary>
            Coded form of the unit
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Quantity.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Range">
            <summary>
            Set of values bounded by low and high
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Range.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Range.Low">
            <summary>
            Low limit
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Range.High">
            <summary>
            High limit
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Range.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Resource">
            <summary>
            Base Resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.IdElement">
            <summary>
            Logical id of this artifact
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.Id">
            <summary>
            Logical id of this artifact
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.Meta">
            <summary>
            Metadata about the resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.ImplicitRulesElement">
            <summary>
            A set of rules under which this content was created
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.ImplicitRules">
            <summary>
            A set of rules under which this content was created
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.LanguageElement">
            <summary>
            Language of the resource content
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.Language">
            <summary>
            Language of the resource content
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Resource.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Model.Resource.ResourceBase">
            <summary>
            This is the base URL of the FHIR server that this resource is hosted on
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Resource.SyncLock">
            <summary>
            This object is internally used for locking the resource in a multithreaded environment.
            </summary>
            <remarks>
            As a consumer of this API, please do not use this object.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Model.ResourceReference">
            <summary>
            A reference from one resource to another
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.ReferenceElement">
            <summary>
            Literal reference, Relative, internal or absolute URL
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.Reference">
            <summary>
            Literal reference, Relative, internal or absolute URL
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.TypeElement">
            <summary>
            Type the reference refers to (e.g. "Patient") - must be a resource in resources. Note: Element was introduced in R4, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.Type">
            <summary>
            Type the reference refers to (e.g. "Patient") - must be a resource in resources
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.Identifier">
            <summary>
            Logical reference, when literal reference is not known
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.DisplayElement">
            <summary>
            Text alternative for the resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.Display">
            <summary>
            Text alternative for the resource
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.ResourceReference.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.Url">
            <summary>
            Native .net typed version of the string Reference property
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.ResourceReference.IsContainedReference">
            <summary>
            Determines whether the ResourceReference is a reference to a contained resource (i.e. the reference value starts with an Url anchor ('#'))
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Signature">
            <summary>
            A Signature - XML DigSig, JWS, Graphical image of signature, etc.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.Type">
            <summary>
            Indication of the reason the entity signed the object(s).
            Note: Since R5 the cardinality is expanded to 0..* (previous it was 1..*).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.WhenElement">
            <summary>
            When the signature was created.
            Note: Since R5 the cardinality is expanded to 0..1 (previous it was 1..1).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.When">
            <summary>
            When the signature was created
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.Who">
            <summary>
            Who signed.
            Note 1: Since R4 the type of this element should be a fixed type (ResourceReference). For backwards compatibility it remains of type DataType.
            Note 2: Since R5 the cardinality is expanded to 0..1 (previous it was 1..1).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.OnBehalfOf">
            <summary>
            The party represented.
            Note: Since R4 the type of this element should be a fixed type (ResourceReference). For backwards compatibility it remains of type DataType.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.TargetFormatElement">
            <summary>
            The technical format of the signed resources. Note: Element was introduced in R4, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.TargetFormat">
            <summary>
            The technical format of the signed resources
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.ContentTypeElement">
            <summary>
            The technical format of the signature. Note: Element is deprecated since R4, do not use with R4 and newer releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.ContentType">
            <summary>
            The technical format of the signature
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.SigFormatElement">
            <summary>
            The technical format of the signature. Note: Element was introduced in R4, do not use when working with older releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.SigFormat">
            <summary>
            The technical format of the signature
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.DataElement">
            <summary>
            The actual signature content (XML DigSig. JWS, picture, etc.)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.Data">
            <summary>
            The actual signature content (XML DigSig. JWS, picture, etc.)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.BlobElement">
            <summary>
            The actual signature content (XML DigSig. JWS, picture, etc.). Note: Element is replaced by 'Signature.data' since R4. Do not use this element 'blob' with R4 and newer releases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Signature.Blob">
            <summary>
            The actual signature content (XML DigSig. JWS, picture, etc.)
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.Signature.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.FHIRVersion">
            <summary>
            All published FHIR Versions.
            (url: http://hl7.org/fhir/ValueSet/FHIR-version)
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_01">
            <summary>
            Oldest archived version of FHIR.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_05">
            <summary>
            1st Draft for Comment (Sept 2012 Ballot).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_06">
            <summary>
            2nd Draft for Comment (January 2013 Ballot).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_11">
            <summary>
            DSTU 1 Ballot version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_0">
            <summary>
            DSTU 1 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_0_80">
            <summary>
            DSTU 1 Official version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_0_81">
            <summary>
            DSTU 1 Official version Technical Errata #1.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_0_82">
            <summary>
            DSTU 1 Official version Technical Errata #2.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_4">
            <summary>
            January 2015 Ballot.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_4_0">
            <summary>
            Draft For Comment (January 2015 Ballot).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_5">
            <summary>
            May 2015 Ballot.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N0_5_0">
            <summary>
            DSTU 2 Ballot version (May 2015 Ballot).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_0">
            <summary>
            DSTU 2 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_0_0">
            <summary>
            DSTU 2 QA Preview + CQIF Ballot (Sep 2015).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_0_1">
            <summary>
            DSTU 2 (Official version).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_0_2">
            <summary>
            DSTU 2 (Official version) with 1 technical errata.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_1">
            <summary>
            GAO Ballot version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_1_0">
            <summary>
            GAO Ballot + draft changes to main FHIR standard.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_4">
            <summary>
            Connectathon 12 (Montreal) version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_4_0">
            <summary>
            CQF on FHIR Ballot + Connectathon 12 (Montreal).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_6">
            <summary>
            Connectathon 13 (Baltimore) version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_6_0">
            <summary>
            FHIR STU3 Ballot + Connectathon 13 (Baltimore).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_8">
            <summary>
            Connectathon 14 (San Antonio) version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N1_8_0">
            <summary>
            FHIR STU3 Candidate + Connectathon 14 (San Antonio).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_0">
            <summary>
            STU3 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_0_0">
            <summary>
            FHIR Release 3 (STU).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_0_1">
            <summary>
            FHIR Release 3 (STU) with 1 technical errata.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_0_2">
            <summary>
            FHIR Release 3 (STU) with 2 technical errata.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_3">
            <summary>
            R4 Ballot #1 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_3_0">
            <summary>
            R4 Ballot #1 + Connectaton 18 (Cologne).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_5">
            <summary>
            R4 Ballot #2 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N3_5_0">
            <summary>
            R4 Ballot #2 + Connectathon 19 (Baltimore).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_0">
            <summary>
            R4 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_0_0">
            <summary>
            FHIR Release 4 (Normative + STU).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_0_1">
            <summary>
            FHIR Release 4 (Normative + STU) with 1 technical errata.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_1">
            <summary>
            R4B Ballot #1 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_1_0">
            <summary>
            R4B Ballot #1 + Connectathon 27 (Virtual).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_2">
            <summary>
            R5 Preview #1 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_2_0">
            <summary>
            R5 Preview #1 + Connectathon 23 (Sydney).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_3">
            <summary>
            R4B version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_3_0">
            <summary>
            FHIR Release 4B (Normative + STU).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_3_0Cibuild">
            <summary>
            FHIR Release 4B CI-Builld.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_3_0Snapshot1">
            <summary>
            FHIR Release 4B Snapshot #1.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_4">
            <summary>
            R5 Preview #2 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_4_0">
            <summary>
            R5 Preview #2 + Connectathon 24 (Virtual).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_5">
            <summary>
            R5 Preview #3 version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_5_0">
            <summary>
            R5 Preview #3 + Connectathon 25 (Virtual).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_6">
            <summary>
            R5 Draft Ballot version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N4_6_0">
            <summary>
            R5 Draft Ballot + Connectathon 27 (Virtual).
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0">
            <summary>
            R5 Versions.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0">
            <summary>
            R5 Final Version.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0Cibuild">
            <summary>
            R5 Rolling ci-build.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0Snapshot1">
            <summary>
            R5 Preview #2.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0Snapshot2">
            <summary>
            R5 Interim tooling stage.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0Ballot">
            <summary>
            R5 Ballot.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0Snapshot3">
            <summary>
            R5 January 2023 Staging Release + Connectathon 32.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FHIRVersion.N5_0_0DraftFinal">
            <summary>
            R5 Final QA.
            (system: http://hl7.org/fhir/FHIR-version)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.FilterOperator">
            <summary>
            The kind of operation to perform as a part of a property based filter.
            (url: http://hl7.org/fhir/ValueSet/filter-operator)
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.Equal">
            <summary>
            The specified property of the code equals the provided value.
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.IsA">
            <summary>
            Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (include descendant codes and self).
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.DescendentOf">
            <summary>
            Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself (i.e. include descendant codes only).
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.IsNotA">
            <summary>
            The specified property of the code does not have an is-a relationship with the provided value.
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.Regex">
            <summary>
            The specified property of the code  matches the regex specified in the provided value.
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.In">
            <summary>
            The specified property of the code is in the set of codes or concepts specified in the provided value (comma-separated list).
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.NotIn">
            <summary>
            The specified property of the code is not in the set of codes or concepts specified in the provided value (comma-separated list).
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.Generalizes">
            <summary>
            Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (i.e. include ancestor codes and self).
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.ChildOf">
            <summary>
            Only concepts with a direct hierarchical relationship to the index code and no other concepts. This does not include the index code in the output.
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.DescendentLeaf">
            <summary>
            Includes concept ids that have a transitive is-a relationship with the concept Id provided as the value, but which do not have any concept ids with transitive is-a relationships with themselves.
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.FilterOperator.Exists">
            <summary>
            The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values).
            (system: http://hl7.org/fhir/filter-operator)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.PublicationStatus">
            <summary>
            The lifecycle status of an artifact.
            (url: http://hl7.org/fhir/ValueSet/publication-status)
            (system: http://hl7.org/fhir/publication-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.PublicationStatus.Draft">
            <summary>
            This resource is still under development and is not yet considered to be ready for normal use.
            (system: http://hl7.org/fhir/publication-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.PublicationStatus.Active">
            <summary>
            This resource is ready for normal use.
            (system: http://hl7.org/fhir/publication-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.PublicationStatus.Retired">
            <summary>
            This resource has been withdrawn or superseded and should no longer be used.
            (system: http://hl7.org/fhir/publication-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.PublicationStatus.Unknown">
            <summary>
            The authoring system does not know which of the status values currently applies for this resource.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
            (system: http://hl7.org/fhir/publication-status)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Time">
            <summary>
            Primitive Type time
            A time during the day, with no date specified
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Time.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Time.PATTERN">
            Must conform to the pattern "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?"
        </member>
        <member name="P:Hl7.Fhir.Model.Time.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.op_Equality(Hl7.Fhir.Model.Time,Hl7.Fhir.Model.Time)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.op_Inequality(Hl7.Fhir.Model.Time,Hl7.Fhir.Model.Time)">
            <summary>
            If you use this operator, you should check that a modifierExtension isn't changing the meaning
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.FromDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Takes the hour, minute and second of a given <see cref="T:System.DateTimeOffset"/> in the indicated timezone, and uses this
            to construct a new Time.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.TryToTime(Hl7.Fhir.ElementModel.Types.Time@)">
            <summary>
            Converts a Fhir Time to a <see cref="T:Hl7.Fhir.ElementModel.Types.Time"/>.
            </summary>
            <returns>true if the Fhir Time contains a valid time string, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.ToTime">
            <summary>
            Converts a Fhir Time to a <see cref="T:Hl7.Fhir.ElementModel.Types.Time"/>.
            </summary>
            <returns>The Time, or null if the <see cref="P:Hl7.Fhir.Model.Time.Value"/> is null.</returns>
            <exception cref="T:System.FormatException">Thrown when the Value does not contain a valid FHIR Time.</exception>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.ToTimeSpan">
            <summary>
            Converts this Fhir Time to a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.TryToTimeSpan(System.TimeSpan@)">
            <summary>
            Convert this FhirDateTime to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>True if the value of the Fhir Time is not null and can be parsed as a Time without an offset, false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Time.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.UnsignedInt">
            <summary>
            Primitive Type unsignedInt
            An integer with a value that is not negative (e.g. &gt;= 0)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.UnsignedInt.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.UnsignedInt.PATTERN">
            Must conform to the pattern "[0]|([1-9][0-9]*)"
        </member>
        <member name="P:Hl7.Fhir.Model.UnsignedInt.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.UnsignedInt.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.UsageContext">
            <summary>
            Describes the context of use for a conformance or knowledge resource
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.UsageContext.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.UsageContext.Code">
            <summary>
            Type of context being specified
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.UsageContext.Value">
            <summary>
            Value that defines the context
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.UsageContext.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Model.Uuid">
            <summary>
            Primitive Type uuid
            See The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Uuid.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Uuid.PATTERN">
            Must conform to the pattern "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
        </member>
        <member name="P:Hl7.Fhir.Model.Uuid.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Uuid.Generate">
            <summary>
            Generates a new, random Uuid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Uuid.AsUri">
            <summary>
            Creates a new <see cref="T:Hl7.Fhir.Model.FhirUri"/> based on the value of this uuid.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Uuid.IsValidValue(System.String)">
            <summary>
            Checks whether the given literal is correctly formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.XHtml">
            <summary>
            Primitive Type xhtml
            XHTML
            </summary>
            <summary>
            Helper functions to work with FHIR XHtml in narrative.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.XHtml.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.XHtml.Value">
            <summary>
            Primitive value of the element
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.XHtml.IsValidNarrativeXhtml(System.String,System.String[]@)">
            <summary>
            Verifies the given string of XML against the FHIR narrative requirements from https://www.hl7.org/fhir/narrative.html. 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.XHtml.IsValidNarrativeXhtml(System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Model.XHtml.IsValidNarrativeXhtml(System.String,System.String[]@)"/>
        </member>
        <member name="M:Hl7.Fhir.Model.XHtml.IsValidXml(System.String,System.String@)">
            <summary>
            Validates whether the given string of Xml is well-formatted.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.ICoded">
            <summary>
            Marks a resource that is coded.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.ICoded`1">
            <summary>
            Represents a resource that can be coded.
            </summary>
            <typeparam name="T">The type that is used to codify the resource, usually a (list of) <see cref="T:Hl7.Fhir.Model.Coding"/> or <see cref="T:Hl7.Fhir.Model.CodeableConcept"/>.</typeparam>
        </member>
        <member name="T:Hl7.Fhir.Model.CodedExtensions">
            <summary>
            Helper methods for working with coded types.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.CodedExtensions.ToCodings(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.DataType})">
            <summary>
            Maps a list of FHIR datatypes to a list of <see cref="T:Hl7.Fhir.Model.Coding"/>. See <see cref="M:Hl7.Fhir.Model.CodedExtensions.ToCodings(Hl7.Fhir.Model.DataType)"/> for more details.
            </summary>
            <exception cref="T:System.NotSupportedException">When the datatype is not bindeable, and thus not convertable to a Coding.</exception>
        </member>
        <member name="M:Hl7.Fhir.Model.CodedExtensions.ToCodings(Hl7.Fhir.Model.DataType)">
            <summary>
            Maps a FHIR datatype to a (list of) Coding, according to https://hl7.org/fhir/terminologies.html#4.1
            </summary>
            <exception cref="T:System.NotSupportedException">When the datatype is not bindeable, and thus not convertable to a Coding.</exception>
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.GetStringExtension(Hl7.Fhir.Model.IExtendable,System.String)">
            <summary>
            Return the first extension with the given uri as a string, or null if none was found
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
            <returns>The first uri, or null if no extension with the given uri was found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.GetExtension(Hl7.Fhir.Model.IExtendable,System.String)">
            <summary>
            Return the first extension with the given uri, or null if none was found
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
            <returns>The first uri, or null if no extension with the given uri was found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.GetExtensions(Hl7.Fhir.Model.IExtendable,System.String)">
            <summary>
            Find all extensions with the given uri.
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
            <returns>The list of extensions with a matching uri, or empty list if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.GetExtensions(Hl7.Fhir.Model.IModifierExtendable,System.String)">
            <summary>
            Find all extensions with the given uri.
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
            <returns>The list of extensions with a matching uri, or empty list if none were found.</returns>
            <remarks>If multiple extensions with the same uri are found, this function returns the first modifier extensions,
            otherwise the first normal extension.</remarks>        
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.AddExtension(Hl7.Fhir.Model.IExtendable,System.String,Hl7.Fhir.Model.DataType,System.Boolean)">
            <summary>
            Add an extension with the given uri and value
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
            <param name="value"></param>
            <param name="isModifier"></param>
            <returns>The newly added Extension</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.RemoveExtension(Hl7.Fhir.Model.IExtendable,System.String)">
            <summary>
            Remove all extensions with the current uri, if any.
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
        </member>
        <member name="M:Hl7.Fhir.Model.ExtensionExtensions.SetExtension(Hl7.Fhir.Model.IExtendable,System.String,Hl7.Fhir.Model.DataType,System.Boolean)">
            <summary>
            Add an extension with the given uri and value, removing any pre-existsing extensions
            with the same uri.
            </summary>
            <param name="extendable"></param>
            <param name="uri"></param>
            <param name="value"></param>
            <param name="isModifier"></param>
            <returns>The newly added extension</returns>
        </member>
        <member name="T:Hl7.Fhir.Model.IIdentifiable">
            <summary>
            Marks a resource that can be identified by some assigned identifier.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.IIdentifiable`1">
            <summary>
            Represents a resource that can be identified by some assigned identifier.
            </summary>
            <typeparam name="T">The type that is used to identify the resource, usually a (list of) <see cref="P:Hl7.Fhir.Model.IIdentifiable`1.Identifier"/>.</typeparam>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.GetIdentifier(Hl7.Fhir.Model.IIdentifiable{System.Collections.Generic.List{Hl7.Fhir.Model.Identifier}},System.String)">
            <summary>
            Gets the first identifier having the specified system. If none is being found, <c>null</c> will be returned.
            </summary>
            <param name="identifiable">The identifiable containing the identifiers to search.</param>
            <param name="system">The system to search for (case sensitive).</param>
            <returns>The first identifier having the specified system or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.TryGetIdentifier(Hl7.Fhir.Model.IIdentifiable{System.Collections.Generic.List{Hl7.Fhir.Model.Identifier}},System.String,Hl7.Fhir.Model.Identifier@)">
            <summary>
            Tries to get the identifier having the specified system.
            </summary>
            <param name="identifiable">The identifiable containing the identifiers to search.</param>
            <param name="system">The system to search for (case sensitive).</param>
            <param name="identifier">The first identifier having the specified system, if it could be found; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the identifier was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.GetIdentifier(Hl7.Fhir.Model.IIdentifiable{Hl7.Fhir.Model.Identifier},System.String)">
            <summary>
            Matches the identifier with the specified system. If the systems differ, <c>null</c> will be returned.
            </summary>
            <param name="identifiable">The identifiable containing an identifier to match.</param>
            <param name="system">The system to search for (case sensitive).</param>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.TryGetIdentifier(Hl7.Fhir.Model.IIdentifiable{Hl7.Fhir.Model.Identifier},System.String,Hl7.Fhir.Model.Identifier@)">
            <summary>
            Tries to match the identifier with the specified system.
            </summary>
            <param name="identifiable">The identifiable containing an identifier to match.</param>
            <param name="system">The system to search for (case sensitive).</param>
            <param name="identifier">The identifier if it matches the specified system, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.GetIdentifier``1(Hl7.Fhir.Model.IIdentifiable{``0},System.String)">
            <summary>
            Catches the unsupported invocations of GetIdentifier.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.TryGetIdentifier``1(Hl7.Fhir.Model.IIdentifiable{``0},System.String,Hl7.Fhir.Model.Identifier@)">
            <summary>
            Catches the unsupported invocations of TryGetIdentifier.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.GetIdentifier(Hl7.Fhir.Model.IIdentifiable,System.String)">
            <summary>
            Gets the first identifier having the specified system. If none is being found, <c>null</c> will be returned.
            </summary>
            <param name="identifiable">The identifiable containing the identifiers to search.</param>
            <param name="system">The system to search for (case sensitive).</param>
            <returns>The first identifier having the specified system or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Model.IdentifiableExtensions.TryGetIdentifier(Hl7.Fhir.Model.IIdentifiable,System.String,Hl7.Fhir.Model.Identifier@)">
            <summary>
            Tries to match the identifier(s) with the specified system.
            </summary>
            <param name="identifiable">The identifiable containing an identifier(s) to match.</param>
            <param name="system">The system to search for (case sensitive).</param>
            <param name="identifier">The identifier if it matches the specified system, otherwise <c>null</c>.</param>
        </member>
        <member name="P:Hl7.Fhir.Model.IModelInfo.FhirVersion">
            <summary>
            The version indicator (e.g. 4.0.1) of the FHIR version that is represented by this model info
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.CanonicalUriForFhirCoreType(System.String)">
            <summary>
            Given a FHIR core typename, return the canonical for that type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.CanonicalUriForFhirCoreType(System.Type)">
            <summary>
            Given the POCO representing a FHIR core type, return the canonical for that type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.GetTypeForFhirType(System.String)">
            <summary>
            Returns the POCO <see cref="T:System.Type"/> that represents the FHIR type with the specified name.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsBindable(System.String)">
            <summary>
            Indicates whether the given type can be bound against a valueset.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsConformanceResource(System.String)">
            <summary>
            Determines if the specified value represents a FHIR conformance resource type
            (resources under the Conformance/Terminology/Implementation Support header in resourcelist.html)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsConformanceResource(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> value represents a FHIR conformance resource type
            (resources under the Conformance/Terminology/Implementation Support header in resourcelist.html)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsCoreModelType(System.String)">
            <summary>Determines if the specified value represents the canonical uri of a core FHIR Resource, FHIR Datatype or FHIR primitive.</summary>
            <remarks>This function does not recognize "system" types, these are the basic types that the FHIR
            datatypes are built upon, but are not specific to the FHIR datamodel.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsCoreModelType(System.Type)">
            <summary>Determines if the specified value represents the type of a core Resource, Datatype or primitive.</summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsCoreModelTypeUri(System.Uri)">
            <summary>Determines if the specified value represents the canonical uri of a core FHIR Resource, FHIR Datatype or FHIR primitive.</summary>
            <remarks>This function does not recognize "system" types, these are the basic types that the FHIR
            datatypes are built upon, but are not specific to the FHIR datamodel.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsCoreSuperType(System.String)">
            <summary>
            Returns whether the value has subclasses in the core spec.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsCoreSuperType(System.Type)">
            <summary>
            Returns whether the value has subclasses in the core spec.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsDataType(System.String)">
            <summary>
            Determines if the specified value represents the name of a FHIR complex data type (NOT including resources and primitives).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsDataType(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> instance represents a FHIR complex data type (NOT including resources and primitives).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsInstanceTypeFor(System.String,System.String)">
            <summary>
            Determines whether the given subclass has the superclass as a parent in the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsInstanceTypeFor(System.Type,System.Type)">
            <summary>
            Determines whether the given subclass has the superclass as a parent in the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsKnownResource(System.String)">
            <summary>
            Determines if the specified value represents the name of a known FHIR resource.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsKnownResource(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> instance represents a known FHIR resource.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsPrimitive(System.String)">
            <summary>
            Determines if the specified value represents the name of a FHIR primitive data type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsPrimitive(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> instance represents a FHIR primitive data type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsReference(System.String)">
            <summary>
            Determines if the specified value represents the type name of a FHIR Reference, i.e. equals "Reference".
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.IsReference(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> instance represents a FHIR Reference type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.IModelInfo.GetFhirTypeNameForType(System.Type)">
            <summary>
            Returns the FHIR type name represented by the specified C# <see cref="T:System.Type"/>, or <c>null</c>.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.IPatient">
            <summary>
            Represents the patient subject.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.ISystemAndCode">
            <summary>
            Provides a way to access the system and code from a Code&lt;T&gt; derived class, without having to mess
            about with the generic types/additional nasty reflection
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.IValue`1">
            <summary>Common generic Value property interface.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="P:Hl7.Fhir.Model.IValue`1.Value">
            <summary>Gets or sets the value</summary>
        </member>
        <member name="T:Hl7.Fhir.Model.INullableValue`1">
            <summary>Common generic nullable value property interface.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:Hl7.Fhir.Model.Narrative">
            <summary>
            Human-readable summary of the resource (essential clinical and business information)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Narrative.#ctor(System.String)">
            <summary>
            Initializes the html portion of the narrative and sets the status to <see cref="F:Hl7.Fhir.Model.Narrative.NarrativeStatus.Generated"/>.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Narrative.TypeName">
            <summary>
            FHIR Type Name
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Narrative.NarrativeStatus">
            <summary>
            The status of a resource narrative.
            (url: http://hl7.org/fhir/ValueSet/narrative-status)
            (system: http://hl7.org/fhir/narrative-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Narrative.NarrativeStatus.Generated">
            <summary>
            The contents of the narrative are entirely generated from the core elements in the content.
            (system: http://hl7.org/fhir/narrative-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Narrative.NarrativeStatus.Extensions">
            <summary>
            The contents of the narrative are entirely generated from the core elements in the content and some of the content is generated from extensions. The narrative SHALL reflect the impact of all modifier extensions.
            (system: http://hl7.org/fhir/narrative-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Narrative.NarrativeStatus.Additional">
            <summary>
            The contents of the narrative may contain additional information not found in the structured data. Note that there is no computable way to determine what the extra information is, other than by human inspection.
            (system: http://hl7.org/fhir/narrative-status)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Model.Narrative.NarrativeStatus.Empty">
            <summary>
            The contents of the narrative are some equivalent of "No human-readable text provided in this case".
            (system: http://hl7.org/fhir/narrative-status)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Narrative.StatusElement">
            <summary>
            generated | extensions | additional | empty
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Narrative.Status">
            <summary>
            generated | extensions | additional | empty
            </summary>
            <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Narrative.Div">
            <summary>
            Limited xhtml content
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.PrimitiveType">
            <summary>
            The base class for all FHIR primitives, which are defined in the datatype section of FHIR.
            These FHIR primitives all contain a "real" primitive value and optionally an id or one or more
            extensions.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.PrimitiveType.TypeName">
            <inheritdoc />
        </member>
        <member name="F:Hl7.Fhir.Model.PrimitiveType._objectValue">
            <summary>
            The value of the primitive, stored as an object. Will generally contain the same value as the
            `Value` property and allows the user to retrieve a primitive value regardless of actual type.
            </summary>
            <remarks>Both <c>Value</c> and <c>ObjectValue</c> may contain invalid values according to the 
            primitive's official domain. E.g. <c>Value</c> is a <c>string</c> for <see cref="T:Hl7.Fhir.Model.FhirDateTime"/>,
            and may contain illegally formatted values. Additionally, the deserializers will use this property
            to store the original serialized string form of the value in the wire format when a parsing error is
            encountered.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.CopyTo(Hl7.Fhir.Model.IDeepCopyable)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.DeepCopy">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.Matches(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.IsExactly(Hl7.Fhir.Model.IDeepComparable)">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.Model.PrimitiveType.Children">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.Model.PrimitiveType.NamedChildren">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.TryGetValue(System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Model.PrimitiveType.GetElementPairs">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.Model.PrimitiveType.HasElements">
            <summary>
            Returns true if the primitive has any child elements (currently in FHIR this can
            be only the element id and zero or more extensions).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.ResourceIdentityExtensions.ResourceIdentity(Hl7.Fhir.Model.Resource,System.String)">
            <summary>
            Returns the entire URI of the location that this resource was retrieved from
            </summary>
            <remarks>
            It is not stored, but reconstructed from the components of the resource
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Support.Poco.FhirTypeConstants">
            <summary>
            List of Fhir types constants. This will be removed when we introduce ModelSpace, but for now we will use this.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Support.Issue.Create(System.Int32,Hl7.Fhir.Model.OperationOutcome.IssueSeverity,Hl7.Fhir.Model.OperationOutcome.IssueType)">
            <summary>Factory method.</summary>
        </member>
        <member name="T:Hl7.Fhir.Support.ResolvingConflictException">
            <summary>
            The exception that is thrown to report a resource resolving conflict.
            <para>
            Indicates that the source was unable to resolve a single target resource,
            because it found multiple existing resources matching the specified identifier.
            </para>
            </summary>
            <remarks>Generic replacement for the obsolete <seealso cref="T:Hl7.Fhir.Support.ResolvingConflictException"/>.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.ResourceUriConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting resources with the same Resource Uri identifier.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.CanonicalUrlConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting naming system resources with the same unique identifier.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.NamingSystemUniqueIdConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting NamingSystem resources with the same unique identifier.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.CodeSystemConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting CodeSystem resources with the same ValueSet url.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.ConceptMapUrlConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting ConceptMap resources with the same source or target url.</summary>
        </member>
        <member name="T:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict">
            <summary>
            Provides information about a specific resolving conflict,
            as reported by the <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Create a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict"/> instance.</summary>
            <param name="identifier">An identifier that matches multiple conflicting resources.</param>
            <param name="origins">The original locations (e.g. file paths) of the conflicting resources that match the specified <paramref name="identifier"/> value.</param>
        </member>
        <member name="P:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.Identifier">
            <summary>The identifier value matched by multiple conflicting resources.</summary>
        </member>
        <member name="P:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.Origins">
            <summary>The original locations (e.g. file paths) of conflicting resources that match the specified <see cref="P:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.Identifier"/> value.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.#ctor(System.String,System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>
            Create a new generic <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> instance.
            <para>
            The <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> class also provides static
            factory methods to create exceptions for specific types of conflicts.
            </para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Support.ResolvingConflictException.Conflicts">
            <summary>Returns a list of resolving conflicts.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.DateExtensions.ToFhirDate(System.DateTime)">
            <summary>
            This function will return only the date part (as a string) of the Datetime parameter. 
            Be aware: this function will not bother about the timezone. 21-11-2018 23:00 in Amsterdam is not the same as in Austrilia: the date 
            will be there already 22-11-2018.
            </summary>
            <param name="me">a Date time</param>
            <returns>The date part of the datetime as a string</returns>
        </member>
        <member name="M:Hl7.Fhir.Support.DateExtensions.ToFhirDate(System.Nullable{System.DateTime})">
            <summary>
            This function will return only the date part (as a string) of the Datetime parameter. 
            Be aware: this function will not bother about the timezone. 21-11-2018 23:00 in Amsterdam is not the same as in Austrilia: the date 
            will be there already 22-11-2018.
            </summary>
            <param name="me">a Date time</param>
            <returns>if me is empty then return null otherwie return the date part of the datetime as a string</returns>
        </member>
        <member name="M:Hl7.Fhir.Support.DateExtensions.ToFhirDateTime(System.DateTime,System.TimeSpan)">
            <summary>
            Returns a FHIR datetime as a string
            </summary>
            <param name="me">A date and time.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns a FHIR datetime as a string</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.PatchParameterExtensions.AddAddPatchParameter(Hl7.Fhir.Model.Parameters,System.String,System.String,Hl7.Fhir.Model.DataType)">
            <summary>
            Add an "add" patch operation as a parameter
            </summary>
            <param name="parameters">Parameters resource this operation should be added to</param>
            <param name="path">Path at which to add the content</param>
            <param name="name">Name of the property to add</param>
            <param name="value">Value to add at nominated place</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.PatchParameterExtensions.AddInsertPatchParameter(Hl7.Fhir.Model.Parameters,System.String,Hl7.Fhir.Model.DataType,System.Int32)">
            <summary>
            Add an "insert" patch operation as a parameter
            </summary>
            <param name="parameters">Parameters resource this operation should be added to</param>
            <param name="path">Path of the collection in which to insert the content</param>
            <param name="value">Value to add at nominated place</param>
            <param name="index">Index at which to insert</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.PatchParameterExtensions.AddDeletePatchParameter(Hl7.Fhir.Model.Parameters,System.String)">
            <summary>
            Add a "delete" patch operation as a parameter
            </summary>
            <param name="parameters">Parameters resource this operation should be added to</param>
            <param name="path">Path of the content to delete (if found)</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.PatchParameterExtensions.AddReplacePatchParameter(Hl7.Fhir.Model.Parameters,System.String,Hl7.Fhir.Model.DataType)">
            <summary>
            Add a "replace" patch operation as a parameter
            </summary>
            <param name="parameters">Parameters resource this operation should be added to</param>      
            <param name="path">Path of the content to replace</param>
            <param name="value">value to replace it with</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.PatchParameterExtensions.AddMovePatchParameter(Hl7.Fhir.Model.Parameters,System.String,System.Int32,System.Int32)">
            <summary>
            Add a "move" patch operation as a parameter
            </summary>
            <param name="parameters">Parameters resource this operation should be added to</param>
            <param name="path">Path of the collection in which to move the content</param>
            <param name="source">List index to move from</param>
            <param name="destination">List index to move to</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.#ctor(System.Uri,System.Net.Http.HttpMessageHandler,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Rest.FhirClientSettings)">
            <summary>
            Creates a new client using a default endpoint
            If the endpoint does not end with a slash (/), it will be added.
            </summary>
            <remarks>
            If the messageHandler is provided then it must be disposed by the caller
            </remarks>
            <param name="endpoint">
            The URL of the server to connect to.<br/>
            If the trailing '/' is not present, then it will be appended automatically
            </param>
            <param name="messageHandler"></param>
            <param name="inspector"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.#ctor(System.Uri,System.Net.Http.HttpClient,Hl7.Fhir.Introspection.ModelInspector,Hl7.Fhir.Rest.FhirClientSettings)">
            <summary>
            Creates a new client using a default endpoint
            If the endpoint does not end with a slash (/), it will be added.
            </summary>
            <remarks>
            The httpClient must be disposed by the caller
            </remarks>
            <param name="endpoint">
            The URL of the server to connect to.<br/>
            If the trailing '/' is not present, then it will be appended automatically
            </param>
            <param name="settings"></param>
            <param name="httpClient"></param>
            <param name="inspector"></param>
        </member>
        <member name="P:Hl7.Fhir.Rest.BaseFhirClient.RequestHeaders">
            <summary>
            Default request headers that can be modified to persist default headers to internal client.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.BaseFhirClient.Endpoint">
            <summary>
            The default endpoint for use with operations that use discrete id/version parameters
            instead of explicit uri endpoints. This will always have a trailing "/"
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.BaseFhirClient.LastResult">
            <summary>
            The last transaction result that was executed on this connection to the FHIR server
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.BaseFhirClient.LastBody">
            <summary>
            The raw body returned by the last http request.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.BaseFhirClient.LastBodyAsText">
            <summary>
            The body returned by the last http request as text (or null if it could not be parsed as text).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.BaseFhirClient.LastBodyAsResource">
            <summary>
            The body returned by the last http request as a FHIR resource (or null if the body did not have a FHIR payload).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.ReadAsync``1(System.Uri,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Fetches a typed resource from a FHIR resource endpoint.
            </summary>
            <param name="location">The url of the Resource to fetch. This can be a Resource id url or a version-specific
            Resource url.</param>
            <param name="ifNoneMatch">The (weak) ETag to use in a conditional read. Optional.</param>
            <param name="ifModifiedSince">Last modified since date in a conditional read. Optional. (refer to spec 2.1.0.5) If this is used, the client will throw an exception you need</param>
            <param name="ct" />
            <typeparam name="TResource">The type of resource to read. Resource or DomainResource is allowed if exact type is unknown</typeparam>
            <returns>
            The requested resource. This operation will throw an exception
            if the resource has been deleted or does not exist. 
            The specified may be relative or absolute, if it is an absolute
            url, it must reference an address within the endpoint.
            </returns>
            <remarks>Since ResourceLocation is a subclass of Uri, you may pass in ResourceLocations too.</remarks>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">This will occur if conditional request returns a status 304 and optionally an OperationOutcome</exception>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Read``1(System.Uri,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Fetches a typed resource from a FHIR resource endpoint.
            </summary>
            <param name="location">The url of the Resource to fetch. This can be a Resource id url or a version-specific
            Resource url.</param>
            <param name="ifNoneMatch">The (weak) ETag to use in a conditional read. Optional.</param>
            <param name="ifModifiedSince">Last modified since date in a conditional read. Optional. (refer to spec 2.1.0.5) If this is used, the client will throw an exception you need</param>
            <typeparam name="TResource">The type of resource to read. Resource or DomainResource is allowed if exact type is unknown</typeparam>
            <returns>
            The requested resource. This operation will throw an exception
            if the resource has been deleted or does not exist. 
            The specified may be relative or absolute, if it is an absolute
            url, it must reference an address within the endpoint.
            </returns>
            <remarks>Since ResourceLocation is a subclass of Uri, you may pass in ResourceLocations too.</remarks>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">This will occur if conditional request returns a status 304 and optionally an OperationOutcome</exception>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.ReadAsync``1(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Fetches a typed resource from a FHIR resource endpoint.
            </summary>
            <param name="location">The url of the Resource to fetch as a string. This can be a Resource id url or a version-specific
            Resource url.</param>
            <param name="ifNoneMatch">The (weak) ETag to use in a conditional read. Optional.</param>
            <param name="ifModifiedSince">Last modified since date in a conditional read. Optional.</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource to read. Resource or DomainResource is allowed if exact type is unknown</typeparam>
            <returns>The requested resource</returns>
            <remarks>This operation will throw an exception
            if the resource has been deleted or does not exist. The specified may be relative or absolute, if it is an absolute
            url, it must reference an address within the endpoint.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Read``1(System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Fetches a typed resource from a FHIR resource endpoint.
            </summary>
            <param name="location">The url of the Resource to fetch as a string. This can be a Resource id url or a version-specific
            Resource url.</param>
            <param name="ifNoneMatch">The (weak) ETag to use in a conditional read. Optional.</param>
            <param name="ifModifiedSince">Last modified since date in a conditional read. Optional.</param>
            <typeparam name="TResource">The type of resource to read. Resource or DomainResource is allowed if exact type is unknown</typeparam>
            <returns>The requested resource</returns>
            <remarks>This operation will throw an exception
            if the resource has been deleted or does not exist. The specified may be relative or absolute, if it is an absolute
            url, it must reference an address within the endpoint.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.RefreshAsync``1(``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Refreshes the data in the resource passed as an argument by re-reading it from the server
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="current">The resource for which you want to get the most recent version.</param>
            <param name="ct"></param>
            <returns>A new instance of the resource, containing the most up-to-date data</returns>
            <remarks>This function will not overwrite the argument with new data, rather it will return a new instance
            which will have the newest data, leaving the argument intact.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Refresh``1(``0)">
            <summary>
            Refreshes the data in the resource passed as an argument by re-reading it from the server
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="current">The resource for which you want to get the most recent version.</param>
            <returns>A new instance of the resource, containing the most up-to-date data</returns>
            <remarks>This function will not overwrite the argument with new data, rather it will return a new instance
            which will have the newest data, leaving the argument intact.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.UpdateAsync``1(``0,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Update (or create) a resource
            </summary>
            <param name="resource">The resource to update</param>
            <param name="versionAware">If true, asks the server to verify we are updating the latest version</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource that is being updated</typeparam>
            <returns>The body of the updated resource, unless ReturnFullResource is set to "false"</returns>
            <remarks>Throws an exception when the update failed, in particular when an update conflict is detected and the server returns a HTTP 409.
            If the resource does not yet exist - and the server allows client-assigned id's - a new resource with the given id will be
            created.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Update``1(``0,System.Boolean)">
            <summary>
            Update (or create) a resource
            </summary>
            <param name="resource">The resource to update</param>
            <param name="versionAware">If true, asks the server to verify we are updating the latest version</param>
            <typeparam name="TResource">The type of resource that is being updated</typeparam>
            <returns>The body of the updated resource, unless ReturnFullResource is set to "false"</returns>
            <remarks>Throws an exception when the update failed, in particular when an update conflict is detected and the server returns a HTTP 409.
            If the resource does not yet exist - and the server allows client-assigned id's - a new resource with the given id will be
            created.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.UpdateAsync``1(``0,Hl7.Fhir.Rest.SearchParams,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Conditionally update (or create) a resource
            </summary>
            <param name="resource">The resource to update</param>
            <param name="condition">Criteria used to locate the resource to update</param>
            <param name="versionAware">If true, asks the server to verify we are updating the latest version</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource that is being updated</typeparam>
            <returns>The body of the updated resource, unless ReturnFullResource is set to "false"</returns>
            <remarks>Throws an exception when the update failed, in particular when an update conflict is detected and the server returns a HTTP 409.
            If the criteria passed in condition do not match a resource a new resource with a server assigned id will be created.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Update``1(``0,Hl7.Fhir.Rest.SearchParams,System.Boolean)">
            <summary>
            Conditionally update (or create) a resource
            </summary>
            <param name="resource">The resource to update</param>
            <param name="condition">Criteria used to locate the resource to update</param>
            <param name="versionAware">If true, asks the server to verify we are updating the latest version</param>
            <typeparam name="TResource">The type of resource that is being updated</typeparam>
            <returns>The body of the updated resource, unless ReturnFullResource is set to "false"</returns>
            <remarks>Throws an exception when the update failed, in particular when an update conflict is detected and the server returns a HTTP 409.
            If the criteria passed in condition do not match a resource a new resource with a server assigned id will be created.</remarks>        
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.DeleteAsync(System.Uri,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Delete a resource at the given endpoint.
            </summary>
            <param name="location">endpoint of the resource to delete</param>
            <param name="ct"></param>
            <returns>Throws an exception when the delete failed, though this might
            just mean the server returned 404 (the resource didn't exist before) or 410 (the resource was
            already deleted).</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Delete(System.Uri)">
            <summary>
            Delete a resource at the given endpoint.
            </summary>
            <param name="location">endpoint of the resource to delete</param>
            <returns>Throws an exception when the delete failed, though this might
            just mean the server returned 404 (the resource didn't exist before) or 410 (the resource was
            already deleted).</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.DeleteAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Delete a resource at the given endpoint.
            </summary>
            <param name="location">endpoint of the resource to delete</param>
            <param name="ct"></param>
            <returns>Throws an exception when the delete failed, though this might
            just mean the server returned 404 (the resource didn't exist before) or 410 (the resource was
            already deleted).</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Delete(System.String)">
            <summary>
            Delete a resource at the given endpoint.
            </summary>
            <param name="location">endpoint of the resource to delete</param>
            <returns>Throws an exception when the delete failed, though this might
            just mean the server returned 404 (the resource didn't exist before) or 410 (the resource was
            already deleted).</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.DeleteAsync(Hl7.Fhir.Model.Resource,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Delete a resource
            </summary>
            <param name="resource">The resource to delete</param>
            <param name="ct"></param>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Delete(Hl7.Fhir.Model.Resource)">
            <summary>
            Delete a resource
            </summary>
            <param name="resource">The resource to delete</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.DeleteAsync(System.String,Hl7.Fhir.Rest.SearchParams,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Conditionally delete a resource
            </summary>
            <param name="resourceType">The type of resource to delete</param>
            <param name="condition">Criteria to use to match the resource to delete.</param>
            <param name="ct"></param>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Delete(System.String,Hl7.Fhir.Rest.SearchParams)">
            <summary>
            Conditionally delete a resource
            </summary>
            <param name="resourceType">The type of resource to delete</param>
            <param name="condition">Criteria to use to match the resource to delete.</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.CreateAsync``1(``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Create a resource on a FHIR endpoint
            </summary>
            <param name="resource">The resource instance to create</param>
            <param name="ct"></param>
            <returns>The resource as created on the server, or an exception if the create failed.</returns>
            <typeparam name="TResource">The type of resource to create</typeparam>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Create``1(``0)">
            <summary>
            Create a resource on a FHIR endpoint
            </summary>
            <param name="resource">The resource instance to create</param>
            <returns>The resource as created on the server, or an exception if the create failed.</returns>
            <typeparam name="TResource">The type of resource to create</typeparam>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.CreateAsync``1(``0,Hl7.Fhir.Rest.SearchParams,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Conditionally Create a resource on a FHIR endpoint
            </summary>
            <param name="resource">The resource instance to create</param>
            <param name="condition">The criteria</param>
            <param name="ct"></param>
            <returns>The resource as created on the server, or an exception if the create failed.</returns>
            <typeparam name="TResource">The type of resource to create</typeparam>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Create``1(``0,Hl7.Fhir.Rest.SearchParams)">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.CreateAsync``1(``0,Hl7.Fhir.Rest.SearchParams,System.Nullable{System.Threading.CancellationToken})"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.PatchAsync(System.Uri,Hl7.Fhir.Model.Parameters,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Patch a resource on a FHIR Endpoint
            </summary>
            <param name="location">Location of the resource</param>
            <param name="patchParameters">A Parameters resource that includes the patch operation(s) to perform</param>
            <param name="ct"></param>
            <returns>The patched resource</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Patch(System.Uri,Hl7.Fhir.Model.Parameters)">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.PatchAsync(System.Uri,Hl7.Fhir.Model.Parameters,System.Nullable{System.Threading.CancellationToken})"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.PatchAsync``1(System.String,Hl7.Fhir.Model.Parameters,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Patch a resource on a FHIR Endpoint
            </summary>
            <typeparam name="TResource">Type of resource to patch</typeparam>
            <param name="id">Id of the resource to patch</param>
            <param name="patchParameters">A Parameters resource that includes the patch operation(s) to perform</param>
            <param name="versionId">version id of the resource to patch</param>
            <param name="ct"></param>
            <returns>The patched resource</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Patch``1(System.String,Hl7.Fhir.Model.Parameters,System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.PatchAsync``1(System.String,Hl7.Fhir.Model.Parameters,System.String,System.Nullable{System.Threading.CancellationToken})"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.PatchAsync``1(Hl7.Fhir.Rest.SearchParams,Hl7.Fhir.Model.Parameters,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Conditionally patch a resource on a FHIR Endpoint
            </summary>
            <typeparam name="TResource">Type of resource to patch</typeparam>
            <param name="condition">Criteria used to locate the resource to update</param>
            <param name="patchParameters">A Parameters resource that includes the patch operation(s) to perform</param>
            <param name="ct"></param>
            <returns>The patched resource</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Patch``1(Hl7.Fhir.Rest.SearchParams,Hl7.Fhir.Model.Parameters)">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.PatchAsync``1(Hl7.Fhir.Rest.SearchParams,Hl7.Fhir.Model.Parameters,System.Nullable{System.Threading.CancellationToken})"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.TypeHistoryAsync(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieve the version history for a specific resource type
            </summary>
            <param name="resourceType">The type of Resource to get the history for</param>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <param name="ct"></param>        
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.TypeHistory(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType})">
            <summary>
            Retrieve the version history for a specific resource type
            </summary>
            <param name="resourceType">The type of Resource to get the history for</param>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>        
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.TypeHistoryAsync``1(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieve the version history for a specific resource type
            </summary>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of Resource to get the history for</typeparam>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.TypeHistory``1(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType})">
            <summary>
            Retrieve the version history for a specific resource type
            </summary>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <typeparam name="TResource">The type of Resource to get the history for</typeparam>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.HistoryAsync(System.Uri,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieve the version history for a resource at a given location
            </summary>
            <param name="location">The address of the resource to get the history for</param>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <param name="ct"></param>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.History(System.Uri,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType})">
            <summary>
            Retrieve the version history for a resource at a given location
            </summary>
            <param name="location">The address of the resource to get the history for</param>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.HistoryAsync(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieve the version history for a resource at a given location
            </summary>
            <param name="location">The address of the resource to get the history for</param>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <param name="ct"></param>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.History(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType})">
            <summary>
            Retrieve the version history for a resource at a given location
            </summary>
            <param name="location">The address of the resource to get the history for</param>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Asks the server to only provide the fields defined for the summary</param>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemHistoryAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieve the full version history of the server
            </summary>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Indicates whether the returned resources should just contain the minimal set of elements</param>
            <param name="ct"></param>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemHistory(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType})">
            <summary>
            Retrieve the full version history of the server
            </summary>
            <param name="since">Optional. Returns only changes after the given date</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Indicates whether the returned resources should just contain the minimal set of elements</param>
            <returns>A bundle with the history for the indicated instance, may contain both 
            ResourceEntries and DeletedEntries.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.TransactionAsync(Hl7.Fhir.Model.Bundle,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Send a set of creates, updates and deletes to the server to be processed in one transaction
            </summary>
            <param name="bundle">The bundled creates, updates and deleted</param>
            <param name="ct"></param>
            <returns>A bundle as returned by the server after it has processed the transaction, or 
            a FhirOperationException will be thrown if an error occurred.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Transaction(Hl7.Fhir.Model.Bundle)">
            <summary>
            Send a set of creates, updates and deletes to the server to be processed in one transaction
            </summary>
            <param name="bundle">The bundled creates, updates and deleted</param>
            <returns>A bundle as returned by the server after it has processed the transaction, or 
            a FhirOperationException will be thrown if an error occurred.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Get(System.Uri)">
            <summary>
            Invoke a general GET on the server. If the operation fails, then this method will throw an exception
            </summary>
            <param name="url">A relative or absolute url. If the url is absolute, it has to be located within the endpoint of the client.</param>
            <returns>A resource that is the outcome of the operation. The type depends on the definition of the operation at the given url</returns>
            <remarks>parameters to the method are simple, and are in the URL, and this is a GET operation</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.GetAsync(System.Uri,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Invoke a general GET on the server. If the operation fails, then this method will throw an exception
            </summary>
            <param name="url">A relative or absolute url. If the url is absolute, it has to be located within the endpoint of the client.</param>
            <param name="ct"></param>
            <returns>A resource that is the outcome of the operation. The type depends on the definition of the operation at the given url</returns>
            <remarks>parameters to the method are simple, and are in the URL, and this is a GET operation</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Get(System.String)">
            <summary>
            Invoke a general GET on the server. If the operation fails, then this method will throw an exception
            </summary>
            <param name="url">A relative or absolute url. If the url is absolute, it has to be located within the endpoint of the client.</param>
            <returns>A resource that is the outcome of the operation. The type depends on the definition of the operation at the given url</returns>
            <remarks>parameters to the method are simple, and are in the URL, and this is a GET operation</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Invoke a general GET on the server. If the operation fails, then this method will throw an exception
            </summary>
            <param name="url">A relative or absolute url. If the url is absolute, it has to be located within the endpoint of the client.</param>
            <param name="ct"></param>
            <returns>A resource that is the outcome of the operation. The type depends on the definition of the operation at the given url</returns>
            <remarks>parameters to the method are simple, and are in the URL, and this is a GET operation</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.ValidateResponse(System.Net.Http.HttpResponseMessage,System.Collections.Generic.IEnumerable{System.Net.HttpStatusCode},Hl7.Fhir.Serialization.IFhirSerializationEngine,System.String)">
            <summary>
            Validates the <see cref="T:System.Net.Http.HttpResponseMessage"/> and throws the appropriate exceptions.
            It also simulates the exception-throwing behaviour of the original TypedElement-based parsers.
            </summary>        
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">The body content type could not be handled or the response status indicated failure, or we received an unexpected success status.</exception>
            <exception cref="T:System.FormatException">Thrown when the original ITypedElement-based parsers are used and a parse exception occurred.</exception>
            <exception cref="T:Hl7.Fhir.Serialization.DeserializationFailedException">Thrown when a newer parsers is used and a parse exception occurred.</exception>
            <seealso cref="M:Hl7.Fhir.Rest.HttpContentParsers.ExtractResponseData(System.Net.Http.HttpResponseMessage,Hl7.Fhir.Serialization.IFhirSerializationEngine)"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchAsync(Hl7.Fhir.Rest.SearchParams,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources based on criteria specified in a Query resource
            </summary>
            <param name="q">The Query resource containing the search parameters</param>
            <param name="resourceType">The type of resource to filter on (optional). If not specified, will search on all resource types.</param>
            <param name="ct"></param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Search(Hl7.Fhir.Rest.SearchParams,System.String)">
            <summary>
            Search for Resources based on criteria specified in a Query resource
            </summary>
            <param name="q">The Query resource containing the search parameters</param>
            <param name="resourceType">The type of resource to filter on (optional). If not specified, will search on all resource types.</param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPostAsync(Hl7.Fhir.Rest.SearchParams,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources based on criteria specified in a Query resource
            </summary>
            <param name="q">The Query resource containing the search parameters</param>
            <param name="resourceType">The type of resource to filter on (optional). If not specified, will search on all resource types.</param>
            <param name="ct"></param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost(Hl7.Fhir.Rest.SearchParams,System.String)">
            <summary>
            Search for Resources based on criteria specified in a Query resource
            </summary>
            <param name="q">The Query resource containing the search parameters</param>
            <param name="resourceType">The type of resource to filter on (optional). If not specified, will search on all resource types.</param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchAsync``1(Hl7.Fhir.Rest.SearchParams,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources based on criteria specified in a Query resource
            </summary>
            <param name="q">The Query resource containing the search parameters</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource to filter on</typeparam>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Search``1(Hl7.Fhir.Rest.SearchParams)">
            <summary>
            Search for Resources based on criteria specified in a Query resource
            </summary>
            <param name="q">The Query resource containing the search parameters</param>
            <typeparam name="TResource">The type of resource to filter on</typeparam>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchAsync``1(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource to list</typeparam>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Search``1(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <typeparam name="TResource">The type of resource to list</typeparam>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPostAsync``1(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource to list</typeparam>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPostAsync``1(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:SearchUsingPostAsync&lt;TResource&gt;(string[], (string path, IncludeModifier modifier)[], int?, SummaryType?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost``1(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <typeparam name="TResource">The type of resource to list</typeparam>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost``1(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost``1(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchAsync(System.String,System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchAsync(System.String,System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:SearchAsync(string, string[], (string path, IncludeModifier modifier)[], int?, SummaryType?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Search(System.String,System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Search(System.String,System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.Search(System.String,System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPostAsync(System.String,System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPostAsync(System.String,System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:SearchUsingPostAsync(string, string, (string path, IncludeModifier modifier)[], int?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost(System.String,System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])">
            <summary>
            Search for Resources of a certain type that match the given criteria
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost(System.String,System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.SearchUsingPost(System.String,System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchAsync(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources across the whole server that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchAsync(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:WholeSystemSearchAsync(string[], (string path, IncludeModifier modifier)[], int?, SummaryType?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearch(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])">
            <summary>
            Search for Resources across the whole server that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearch(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearch(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchUsingPostAsync(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for Resources across the whole server that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchUsingPostAsync(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:WholeSystemSearchUsingPostAsync(string[], (string path, IncludeModifier modifier)[], int?, SummaryType?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchUsingPost(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])">
            <summary>
            Search for Resources across the whole server that match the given criteria
            </summary>
            <param name="criteria">Optional. The search parameters to filter the resources on. Each
            given string is a combined key/value pair (separated by '=')</param>
            <param name="includes">Optional. A list of include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="summary">Optional. Whether to include only return a summary of the resources in the Bundle</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <returns>A Bundle with all resources found by the search, or an empty Bundle if none were found.</returns>
            <remarks>All parameters are optional, leaving all parameters empty will return an unfiltered list 
            of all resources of the given Resource type</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchUsingPost(System.String[],System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.WholeSystemSearchUsingPost(System.String[],System.String[],System.Nullable{System.Int32},System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String[])"/>       
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdAsync``1(System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource to search for</typeparam>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdAsync``1(System.String,System.String[],System.Nullable{System.Int32},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:SearchByIdAsync&lt;TResource&gt;(string, (string path, IncludeModifier modifier)[], int?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchById``1(System.String,System.String[],System.Nullable{System.Int32},System.String[])">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <typeparam name="TResource">The type of resource to search for</typeparam>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchById``1(System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.SearchById(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPostAsync``1(System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <typeparam name="TResource">The type of resource to search for</typeparam>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPost``1(System.String,System.String[],System.Nullable{System.Int32},System.String[])">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <typeparam name="TResource">The type of resource to search for</typeparam>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPost``1(System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPost``1(System.String,System.String[],System.Nullable{System.Int32},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdAsync(System.String,System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdAsync(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.SearchById(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchById(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[])">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchById(System.String,System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="!:SearchByIdAsync(string, string, (string path, IncludeModifier modifier)[], int?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPostAsync(System.String,System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <param name="ct"></param>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPostAsync(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc cref="!:SearchByIdUsingPostAsync(string, string, (string path, IncludeModifier modifier)[], int?, (string path, IncludeModifier modifier)[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPost(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[])">
            <summary>
            Search for resources based on a resource's id.
            </summary>
            <param name="resource">The type of resource to search for</param>
            <param name="id">The id of the resource to search for</param>
            <param name="includes">Zero or more include paths</param>
            <param name="pageSize">Optional. Asks server to limit the number of entries per page returned</param>
            <param name="revIncludes">Optional. A list of reverse include paths</param>
            <returns>A Bundle with the BundleEntry as identified by the id parameter or an empty
            Bundle if the resource wasn't found.</returns>
            <remarks>This operation is similar to Read, but additionally,
            it is possible to specify include parameters to include resources in the bundle that the
            returned resource refers to.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPost(System.String,System.String,System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[],System.Nullable{System.Int32},System.ValueTuple{System.String,Hl7.Fhir.Rest.IncludeModifier}[])">
            <inheritdoc cref="M:Hl7.Fhir.Rest.BaseFhirClient.SearchByIdUsingPost(System.String,System.String,System.String[],System.Nullable{System.Int32},System.String[])"/>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.ContinueAsync(Hl7.Fhir.Model.Bundle,Hl7.Fhir.Rest.PageDirection,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Uses the FHIR paging mechanism to go navigate around a series of paged result Bundles
            </summary>
            <param name="current">The bundle as received from the last response</param>
            <param name="direction">Optional. Direction to browse to, default is the next page of results.</param>
            <param name="ct"></param>
            <returns>A bundle containing a new page of results based on the browse direction, or null if
            the server did not have more results in that direction.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.BaseFhirClient.Continue(Hl7.Fhir.Model.Bundle,Hl7.Fhir.Rest.PageDirection)">
            <summary>
            Uses the FHIR paging mechanism to go navigate around a series of paged result Bundles
            </summary>
            <param name="current">The bundle as received from the last response</param>
            <param name="direction">Optional. Direction to browse to, default is the next page of results.</param>
            <returns>A bundle containing a new page of results based on the browse direction, or null if
            the server did not have more results in that direction.</returns>
        </member>
        <member name="T:Hl7.Fhir.Rest.ResourceFormat">
            <summary>
            The supported formats for Fhir Resources
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.GetResourceFormatFromFormatParam(System.String)">
            <summary>
            Converts a format string to a ResourceFormat
            </summary>
            <param name="format">A format string, as used by the _format Url parameter</param>
            <returns>The Resource format or the special value Unknow if the format was unrecognized</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.GetResourceFormatFromContentType(System.String)">
            <summary>
            Converts a content type to a ResourceFormat
            </summary>
            <param name="contentType">The content type, as it appears on e.g. a Http Content-Type header</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.BuildContentType(Hl7.Fhir.Rest.ResourceFormat,System.String)">
            <summary>
            Creates a string for use in a Content-Type header, given the serialization format and the fhir version in use.
            </summary>
            <param name="format">Whether the body is xml or json.</param>
            <param name="fhirVersion">Optional. The version of FHIR to add to the header.</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.BuildMediaType(Hl7.Fhir.Rest.ResourceFormat,System.String)">
            <summary>
            Creates a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for use in a Content-Type header, 
            given the serialization format and the fhir version in use.
            </summary>
            <param name="format">Whether the body is xml or json.</param>
            <param name="fhirVersion">Optional. The version of FHIR to add to the header.</param>
            <exception cref="T:System.ArgumentException">Unsupported serialization.</exception>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.BuildFormatParam(Hl7.Fhir.Rest.ResourceFormat)">
            <summary>
            Returns the string to use for the _format parameter in a FHIR REST url, given the desired serialization.
            </summary>
            <param name="format"></param>
            <exception cref="T:System.ArgumentException">Unsupported serialization.</exception>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.IsValidResourceContentType(System.String)">
            <summary>
            Checks whether a given content type is valid as a content type for resource data
            </summary>
            <param name="contentType">The content type, as it appears on e.g. a Http Content-Type header</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ContentType.IsValidFormatParam(System.String)">
            <summary>
            Checks whether a given format parameter is a valid as a content type for resource data
            </summary>
            <param name="paramValue">The content type, as it appears on the URL parameter</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.EntryToHttpExtensions.toHttpMethod(Hl7.Fhir.Model.Bundle.HTTPVerb,System.Nullable{Hl7.Fhir.Rest.InteractionType})">
            <summary>
            Converts the <see cref="T:Hl7.Fhir.Model.Bundle.HTTPVerb" /> (e.g. from a <see cref="P:Hl7.Fhir.Model.Bundle.RequestComponent.Method"/>) to a <see cref="T:System.Net.Http.HttpMethod"/>. />
            </summary>
            <param name="bundleVerb">The FHIR HTTPVerb.</param>
            <param name="interaction">The kind of FHIR interaction, if known.</param>
            <exception cref="T:System.ArgumentException">The given HTTPVerb cannot be translated to a .NET HttpMethod.</exception>
        </member>
        <member name="T:Hl7.Fhir.Rest.RestOperation">
            <summary>
            Collection of the valid Operation values supported as const strings
            </summary>
            <remarks>
            This static class is required to keep the operation const values
            separate from the methods in the Fhir Client.
            Specifically the Meta operation clashes with the META const value.
            This would make it un-usable from VB.Net
            </remarks>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.TRANSLATE">
            <summary>
            "translate" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.VALIDATE_RESOURCE">
            <summary>
            "validate" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.FETCH_PATIENT_RECORD">
            <summary>
            "everything" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.META">
            <summary>
            "meta" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.META_ADD">
            <summary>
            "meta-add" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.META_DELETE">
            <summary>
            "meta-delete" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.EXPAND_VALUESET">
            <summary>
            "expand" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.CONCEPT_LOOKUP">
            <summary>
            "lookup" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.VALIDATE_CODE">
            <summary>
            "validate-code" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.CLOSURE">
            <summary>
            "closure" operation
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.RestOperation.SUBSUMES">
            <summary>
            "subsumes" operation
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions">
            <summary>
            A set of extension methods to configure the serialization/deserialization engine used by the client to some common defaults.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithLegacySerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the legacy serialization behaviour, using the <see cref="F:Hl7.Fhir.Rest.FhirClientSettings.ParserSettings"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithStrictSerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the newer POCO-based serializer, configured to parse the incoming data strictly.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithStrictLegacySerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the legacy serializer, configured to parse the incoming data strictly.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithLenientSerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the newer POCO-based serializer, configured to ignore recoverable errors in the
            the incoming data.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithPermissiveLegacySerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the legacy serializer, configured to be permissive.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithBackwardsCompatibleSerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the newer POCO-based serializer, configured to ignore errors that can
            be caused when encountering data from a newer version of FHIR. NB: This may cause data loss.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithBackwardsCompatibleLegacySerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the legacy serializer, configured to ignore errors that can
            be caused when encountering data from a newer version of FHIR. NB: This may cause data loss.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithOstrichModeSerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the newer POCO-based serializer, configured to ignore all errors.
            NB: This may cause data loss.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSerializationEngineExtensions.WithOstrichModeLegacySerializer(Hl7.Fhir.Rest.BaseFhirClient)">
            <summary>
            Configures the FhirClient to use the legacy serializer, configured to ignore all errors.
            NB: This may cause data loss.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.VerifyFhirVersion">
            <summary>
            Whether or not to ask the server for a CapabilityStatement and verify FHIR version compatibility before
            issuing requests to the server.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.ExplicitFhirVersion">
            <summary>
            Normally, the FhirClient will derive the FHIR version (e.g. 4.0.3) the client is communicating with
            from the metadata of the assembly containing the resource POCOs. Use this member to override this version.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.PreferredFormat">
            <summary>
            The preferred format of the content to be used when communicating with the FHIR server (XML or JSON)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.UseFormatParameter">
            <summary>
            When passing the content preference, use the _format parameter instead of the request header
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.UseFhirVersionInAcceptHeader">
            <summary>
            When <see langword="true"/> the MIME-type parameter fhirVersion will be added the Accept header. This is necessary 
            when the FHIR server supports multiple FHIR versions.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.Timeout">
            <summary>
            The timeout (in milliseconds) to be used when making calls to the FHIR server
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.FhirClientSettings.PreferredReturn">
            <inheritdoc cref="F:Hl7.Fhir.Rest.FhirClientSettings.ReturnPreference"/>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.ReturnPreference">
            <summary>
            Should calls to Create, Update and transaction operations return the whole updated content, 
            minimal content or an OperationOutcome (see https://hl7.org/fhir/http.html#return).
            </summary>
            <remarks>When null, no Prefer header with a "return=" prefix will be sent.</remarks>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.UseAsync">
            <summary>
            Request the server to use the asynchronous request pattern (https://hl7.org/fhir/async.html).
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.PreferredParameterHandling">
            <summary>
            Should server return which search parameters were supported after executing a search?
            </summary>
            <remarks>If set to null, no Prefer header with a "handling=" prefix will be sent.</remarks>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.PreferCompressedResponses">
            <summary>
            This will do 2 things:
            1. Add the header Accept-Encoding: gzip, deflate
            2. decompress any responses that have Content-Encoding: gzip (or deflate)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.FhirClientSettings.CompressRequestBody">
            <summary>
            Compress any Request bodies using GZip.
            </summary>
            <remarks>If a server does not handle compressed requests using GZip, it will return a 415 response.</remarks>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.RequestBodyCompressionMethod">
            <summary>
            Compress request bodies using the selected method. Note: only <see cref="F:System.Net.DecompressionMethods.Deflate"/> and
            <see cref="F:System.Net.DecompressionMethods.GZip"/> are currently supported.
            </summary>
            <remarks>If a server does not handle compressed requests using this method, it will return a 415 response.</remarks>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.SerializationEngine">
            <summary>
            Can be used to specifically override the serialization behaviour of the FhirClient to turn
            POCO's into FHIR xml/json data and vice versa. If not set, the FhirClient will use the default
            behaviour which is compatible with the pre-5.0 SDK.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.FhirClientSettings.ParserSettings">
            <summary>
            ParserSettings for the pre-5.0 SDK parsers. Are only used when <see cref="F:Hl7.Fhir.Rest.FhirClientSettings.SerializationEngine"/> is not set.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSettings.#ctor(Hl7.Fhir.Rest.FhirClientSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Rest.FhirClientSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSettings.CopyTo(Hl7.Fhir.Rest.FhirClientSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Rest.FhirClientSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Rest.FhirClientSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirClientSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Rest.FhirClientSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.FhirOperationException">
            <summary>
            Represents HL7 FHIR errors that occur during application execution.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.FhirOperationException.Outcome">
            <summary>Gets or sets the outcome of the operation <see cref="T:Hl7.Fhir.Model.OperationOutcome"/>.</summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.FhirOperationException.Status">
            <summary>The HTTP Status Code that resulted in this Exception.</summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirOperationException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>Initializes a new instance of the <see cref="T:Hl7.Fhir.Rest.FhirOperationException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">The http status code associated with the message</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirOperationException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.Fhir.Rest.FhirOperationException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="status">The http status code associated with the message</param>
            <param name="inner">The exception that is the cause of the current exception, or a <c>null</c> reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirOperationException.#ctor(System.String,System.Net.HttpStatusCode,Hl7.Fhir.Model.OperationOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.Fhir.Rest.FhirOperationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">The http status code associated with the message</param>
            <param name="outcome">The outcome of the operation <see cref="T:Hl7.Fhir.Model.OperationOutcome"/>.</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.FhirOperationException.#ctor(System.String,System.Net.HttpStatusCode,Hl7.Fhir.Model.OperationOutcome,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.Fhir.Rest.FhirOperationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">The http status code associated with the message</param>
            <param name="outcome">The outcome of the operation <see cref="T:Hl7.Fhir.Model.OperationOutcome"/>.</param>
            <param name="inner">The exception that is the cause of the current exception, or a <c>null</c> reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="E:Hl7.Fhir.Rest.HttpClientEventHandler.OnBeforeRequest">
            <summary>
            Called just before the Http call is done
            </summary>
        </member>
        <member name="E:Hl7.Fhir.Rest.HttpClientEventHandler.OnAfterResponse">
            <summary>
            Called just after the response was received
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpClientEventHandler.BeforeRequest(System.Net.Http.HttpRequestMessage,System.Byte[])">
            <summary>
            Inspect or modify the HttpRequestMessage just before the FhirClient issues a call to the server
            </summary>
            <param name="rawRequest">The request as it is about to be sent to the server</param>
            <param name="body">The data in the body of the request as it is about to be sent to the server</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpClientEventHandler.AfterResponse(System.Net.Http.HttpResponseMessage,System.Byte[])">
            <summary>
            Inspect the HttpResponseMessage as it came back from the server
            </summary>
            <remarks>You cannot read the body from the HttpResponseMessage, since it has
            already been read by the framework. Use the body parameter instead.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.ExtractResponseComponent(System.Net.Http.HttpResponseMessage)">
            <summary>
            Builds a <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/> out of the data in a <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.SetHttpHeaders(Hl7.Fhir.Model.Bundle.ResponseComponent,System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
            Add the headers from a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/> as extensions to a <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/>.
            </summary>
            <remarks>The headers will be added, even if they we already present on the <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/>.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.GetHttpHeaders(Hl7.Fhir.Model.Bundle.ResponseComponent)">
            <summary>
            Extract the headers founds as extensions on the <see cref="T:Hl7.Fhir.Model.Bundle.RequestComponent"/> and return them
            as a <see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/> collection.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.GetBodyAsString(System.Net.Http.HttpContent)">
            <summary>
            Returns the body, decoded as a string.
            </summary>
            <returns>The body as a string, or null if the body could not be decoded (e.g. contains invalid Unicode code points).</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.GetContentType(System.Net.Http.HttpContent)">
            <summary>
            Gets the content type from the header, removing all parameters including character 
            encoding and fhirVersion parameter.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.HttpContentParsers.ResponseData">
            <summary>
            Represents the result of parsing and validating the data coming in from the response.
            </summary>
            <param name="Response">Headers relevant to FHIR, as a <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/>.</param>
            <param name="BodyData">The unparsed data from the response. Maybe null if the response had no body.</param>
            <param name="BodyText">The data from the response, decoded to text. Maybe null if the response did not contain UTF-8 decodable data.</param>
            <param name="BodyResource">The data from the response, decoded as a resource. Maybe null if the response was not a (correct) FHIR payload.</param>
            <param name="Issue">An issue encountered while parsing or validating.</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.#ctor(Hl7.Fhir.Model.Bundle.ResponseComponent,System.Byte[],System.String,Hl7.Fhir.Model.Resource,System.Exception)">
            <summary>
            Represents the result of parsing and validating the data coming in from the response.
            </summary>
            <param name="Response">Headers relevant to FHIR, as a <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/>.</param>
            <param name="BodyData">The unparsed data from the response. Maybe null if the response had no body.</param>
            <param name="BodyText">The data from the response, decoded to text. Maybe null if the response did not contain UTF-8 decodable data.</param>
            <param name="BodyResource">The data from the response, decoded as a resource. Maybe null if the response was not a (correct) FHIR payload.</param>
            <param name="Issue">An issue encountered while parsing or validating.</param>
        </member>
        <member name="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.Response">
            <summary>Headers relevant to FHIR, as a <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/>.</summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.BodyData">
            <summary>The unparsed data from the response. Maybe null if the response had no body.</summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.BodyText">
            <summary>The data from the response, decoded to text. Maybe null if the response did not contain UTF-8 decodable data.</summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.BodyResource">
            <summary>The data from the response, decoded as a resource. Maybe null if the response was not a (correct) FHIR payload.</summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.Issue">
            <summary>An issue encountered while parsing or validating.</summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.ExtractResponseData(System.Net.Http.HttpResponseMessage,Hl7.Fhir.Serialization.IFhirSerializationEngine)">
            <summary>
            Extract headers into a <see cref="T:Hl7.Fhir.Model.Bundle.ResponseComponent"/>, the body as a byte array, as text and when possible, a parsed resource.
            </summary>
            <returns>A <see cref="T:Hl7.Fhir.Rest.HttpContentParsers.ResponseData"/> with a non-null <see cref="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.BodyResource"/> if the body contains FHIR data, 
            a non-null <see cref="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.BodyText"/> if the body is valid UTF-8 encoded text and the body data as a byte array, if there is a body.
            <see cref="P:Hl7.Fhir.Rest.HttpContentParsers.ResponseData.Issue"/> will be a <see cref="T:Hl7.Fhir.Serialization.DeserializationFailedException" /> when the Content-Type and serialization indicate this 
            is a FHIR payload, but it cannot be parsed correctly or a <see cref="T:Hl7.Fhir.Rest.UnsupportedBodyTypeException" /> when the Content-Type is not a FHIR
            serialization or the data is not recognizable as FHIR.</returns>
            <remarks>If the status of the response indicates failure, this function will be lenient and return the body data 
            instead of throwing an <see cref="T:Hl7.Fhir.Rest.UnsupportedBodyTypeException"/> when the content type or content itself is not recognizable as FHIR. This improves
            the chances of capturing diagnostic (non-FHIR) bodies returned by the server when an operation fails.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.TranslateUnsupportedBodyTypeException(Hl7.Fhir.Rest.HttpContentParsers.ResponseData,System.Net.HttpStatusCode)">
            <summary>
            Somewhat quircky, but the useful UnsupportedBodyTypeException is never thrown to the user, instead it is
            packaged inside a FhirOperationException. We're sticking to the design here for backwards-compatibility reasons.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.HttpContentParsers.TranslateLegacyParserException(Hl7.Fhir.Rest.HttpContentParsers.ResponseData,System.String)">
            <summary>
            The new <see cref="T:Hl7.Fhir.Serialization.IFhirSerializationEngine"/> interface expects all implementations to throw
            <see cref="T:Hl7.Fhir.Serialization.DeserializationFailedException"/>. If the serialization engine is the "old" engine, 
            it will have packaged its exception as an DeserializationFailedException to comply to this new
            contract. So, if the FhirClient is configured to use the old (original) serializers, we should 
            unpack the original FormatException.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.CONTENTLOCATION">
            <summary>
            "Content-Location" found in the HTTP Headers
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.LOCATION">
            <summary>
            "Location" found in the HTTP Headers
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.LASTMODIFIED">
            <summary>
            "Last-Modified" found in the HTTP Headers
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.ETAG">
            <summary>
            "ETag" found in the HTTP Headers
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.SECURITYCONTEXT">
            <summary>
            The header used to communicate the Binary security context
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.RESTPARAM_FORMAT">
            <summary>
            "_format" found as a parameter on the REST URL
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.HISTORY_PARAM_SINCE">
            <summary>
            "_since" found as a parameter on the REST History operation URL
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.HttpUtil.HISTORY_PARAM_COUNT">
            <summary>
            "_count" found as a parameter on the REST History operation URL
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SearchParameterHandling.Strict">
            <summary>
            Server should return an error for any unknown or unsupported parameter        
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SearchParameterHandling.Lenient">
            <summary>
            Server should ignore any unknown or unsupported parameter
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.Prefer.ReturnRepresentation">
            <summary>
            Prefer to receive the full resource in the body after completion of the interaction
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.Prefer.ReturnMinimal">
            <summary>
            Prefer to not a receive a body after completion of the interaction
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.Prefer.OperationOutcome">
            <summary>
            Prefer to receive an OperationOutcome resource containing hints and warnings about the 
            operation rather than the full resource
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.Prefer.RespondAsync">
            <summary>
            Prefer to run the operation as an asynchronous request
            (http://hl7.org/fhir/r4/async.html)
            - This may also be applicable in prior versions (though not part of that stamdard)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.ReturnPreference.Representation">
            <summary>
            Prefer to receive the full resource in the body after completion of the interaction
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.ReturnPreference.Minimal">
            <summary>
            Prefer to not a receive a body after completion of the interaction
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.ReturnPreference.OperationOutcome">
            <summary>
            Prefer to receive an OperationOutcome resource containing hints and warnings about the 
            operation rather than the full resource
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.ResourceIdentity">
            <summary>
            ResourceIdentity represents a Resource's Uri and can be used to construct such uri's or retrieve parts of the uri. 
            
            ResourceIdentities exist in three forms: 
              * As an url, where urls may be relative or absolute. The url form can be used in RESTful 
                calls to a FHIR server to represent a specific instance of a resource on that server. 
              * As the target of an http anchor, in which case the identity is just an id. This kind of id is used when
                the resource is contained within another resource and the id is "internal": valid only within the scope of
                that container resource. It can be referenced by just its id, prefixed by the http anchor '#' character.
              * As an urn, useful when you need to identify a resource outside of the context of a RESTful exchange,
                such as in a Document or Message or when the resource has not yet been assigned an id, like in a
                batch transaction.
            
            Depending on the form of ResourceIdentity, the identity consists of the following parts:
            
              * Url: the "base", in this case the server's base FHIR service endpoint; the "resource type"; the "logical id" and the "version id",
                all parts are optional, except the logical id.
              * Urn: the "base", in this case either urn:oid: or urn:uuid: and the "logical id", both are required
              * Anchor: just the "logical id"
            
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.#ctor(System.String)">
            <summary>
            Creates an Resource Identity instance for a Resource given a resource's location.
            </summary>
            <param name="uri">Relative or absolute location of a Resource</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.#ctor(System.Uri)">
            <summary>
            Creates an Resource Identity instance for a Resource given a resource's location.
            </summary>
            <param name="uri">Relative or absolute location of a Resource</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.Build(System.Uri,System.String,System.String,System.String)">
            <summary>
            Creates an absolute url representing a Resource identitity for a given resource type, id and optional version.
            </summary>
            <param name="baseUrl">Absolute path giving the FHIR service endpoint</param>
            <param name="resourceType">Name of the collection (resource type)</param>
            <param name="id">The resource's logical id</param>
            <param name="vid">The resource's version id</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.Build(System.String,System.String,System.String)">
            <summary>
            Creates a relative url representing a Resource identitity for a given resource type, id and optional version.
            </summary>
            <param name="resourceType">The resource type</param>
            <param name="id">The resource's logical id</param>
            <param name="vid">The resource's version id</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.Build(Hl7.Fhir.Rest.UrnType,System.String)">
            <summary>
            Creates an absolute urn representing the Resource identitity outside of a REST context
            </summary>
            <param name="urnType">Type of urn to create, either OID or UUID</param>
            <param name="id">The resource's logical id</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.Build(System.Uri,System.String)">
            <summary>
            Creates an absolute urn representing the Resource identitity outside of a REST context
            </summary>
            <param name="baseUrn">An urn, either an urn:oid: or urn:uuid:</param>
            <param name="id">The resource's logical id</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.Build(System.String)">
            <summary>
            Creates an local id that can be the target of an anchored reference to a contained resource elative url representing a Resource identitity for a given resource type, id and optional version.
            </summary>
            <param name="id">The resource's logical id</param>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.Rest.ResourceIdentity.BaseUri">
            <summary>
            This is the ResourceIdentity's base, either an url which is the FHIR service endpoint where the resource is located or
            an urn (urn:oid or urn:uuid).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.ResourceIdentity.ResourceType">
            <summary>
            The name of the resource as it occurs in the Resource url
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.ResourceIdentity.Id">
            <summary>
            The logical id of the resource as it occurs in the Resource url (without the Version)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.ResourceIdentity.VersionId">
            <summary>
            The version id of the resource as it occurs in the Resource url
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.ResourceIdentity.HasVersion">
            <summary>
            Indicates whether this ResourceIdentity is version-specific (has a _history part)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.WithVersion(System.String)">
            <summary>
            Returns a new ResourceIdentity made specific for the given version
            </summary>
            <param name="version">The version to add to the ResourceIdentity (part after the _history/)</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.MakeRelative">
            <summary>
            Returns a Uri that is a relative version of a url form ResourceIdentity
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.WithoutVersion">
            <summary>
            Turns a version-specific ResourceIdentity into a non-version-specific ResourceIdentity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.WithBase(System.String)">
            <summary>
            Relocate an absolute identity to a new base, or make a relative identity absolute to a base
            </summary>
            <param name="baseUri"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceIdentity.IsTargetOf(Hl7.Fhir.Rest.ResourceIdentity)">
            <summary>
            Find out whether one ResourceIdentity references another ResourceIdentity
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceReferenceExtensions.GetAbsoluteUriForReference(Hl7.Fhir.Model.ResourceReference,System.Uri)">
            <summary>
            When a ResourceReference is relative, use the parent resource's fullUrl (e.g. from a Bundle's entry)
            to make it absolute.
            </summary>
            <param name="reference">The ResourceReference to get the (possibily relative) url from</param>
            <param name="parentResourceUri">Absolute uri representing the location of the resource this reference is in.</param>
            <remarks>Implements (part of the logic) as described in bundle.html#6.7.4.1</remarks>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.ResourceReferenceExtensions.GetAbsoluteUriForReference(Hl7.Fhir.Model.ResourceReference,System.String)">
            <summary>
            When a ResourceReference is relative, use the parent resource's fullUrl (e.g. from a Bundle's entry)
            to make it absolute.
            </summary>
            <param name="reference">The ResourceReference to get the (possibily relative) url from</param>
            <param name="parentResourceUri">Absolute uri representing the location of the resource this reference is in.</param>
            <remarks>Implements (part of the logic) as described in bundle.html#6.7.4.1</remarks>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.RestUrl.AddPath(System.String[])">
            <summary>
            Add additional components to the end of the RestUrl
            </summary>
            <param name="components">one or more path components to add</param>
            <returns>The current RestUrl, so multiple AddPath statements can be combined in a fluent way.</returns>
            <example>If the current path is "http://hl7.org/svc", then adding ("fhir", "Patient") would
            return in a new RestUrl "http://hl7.org/svc/fhir/Patient"</example>
        </member>
        <member name="M:Hl7.Fhir.Rest.RestUrl.AddParam(System.String,System.String)">
            <summary>
            Add a query parameter to the RestUrl
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.RestUrl.IsEndpointFor(System.Uri)">
            <summary>
            Tests to see if this RestURL is contained at the base address provided in <paramref name="other"/>
            (This is a case insensitive test)
            </summary>
            <param name="other"></param>
            <returns>true when the other is the starting portion of the given <paramref name="other"/> URL</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.RestUrl.IsEndpointFor(System.String)">
            <summary>
            Tests to see if this RestURL is contained at the base address provided in <paramref name="other"/>
            (This is a case insensitive test)
            </summary>
            <param name="other"></param>
            <returns>true when the other is the starting portion of the given <paramref name="other"/> URL</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.RestUrl.IsSameUrl(Hl7.Fhir.Rest.RestUrl)">
            <summary>
            Implements comparison of two RestUrls based on the FHIR rules set out in http.html#2.1.0.1
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.RestUrl.NavigateTo(System.String)">
            <summary>
            Returs a new RestUrl that represents a location after navigating to the specified path
            </summary>
            <param name="path"></param>
            <returns></returns>
            <example>If the current path is "http://hl7.org/svc/patient", NavigatingTo("../observation") will 
            result in a ResourceLocation of "http://hl7.org/svc/observation" whereas if the current path is
            "http://hl7.org/svc/ (note the slash), NavigatingTo("../observation") will 
            result in a ResourceLocation of "http://hl7.org/svc/observation" 
            </example>
        </member>
        <member name="T:Hl7.Fhir.Rest.SearchParams">
            <summary>
            Contains criteria that can be passed to a search operation or conditional update/delete/create
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.SearchParams.#ctor">
            <summary>
            Construct an empty instance.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.SearchParams.#ctor(System.String,System.String)">
            <summary>
            Construct a new instance initialized with a single name/value.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SearchParams.RESERVED_PARAMETERS">
            <summary>
            List of all the search parameter that have some special meaning.
            Primarily used to filter to the non-special parameters.
            Notice that _query, _text, _filter and _content are predefined searches in the standard,
            but cannot be parsed as regular criteria. So they are included in the RESERVED_PARAMETERS 
            and thus not included in the Parameters property
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.SearchParams.Select(System.String[])">
            <summary>
            Initializes the <see cref="P:Hl7.Fhir.Rest.SearchParams.Elements"/> parameter with the given list of elements.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.SearchParams.Add(System.String,System.String)">
            <summary>
            Add a parameter with a given name and value.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value of the parameter as a FHIR datatype or Resource</param>
            <returns>this (Parameters), so you can chain AddParameter calls</returns>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Parameters">
            <summary>
            The 'regular' parameters. The parameters that have no special meaning.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Query">
            <summary>
            Gets or sets the special _query search parameter which asks the server to run a 
            specific named query instead of the standard FHIR search.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Text">
            <summary>
            Gets or sets the special _text search parameter which which search on the narrative of the resource. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Content">
            <summary>
            Gets or sets the special _text search parameter which which search on the entire content of the resource.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Count">
            <summary>
            Gets or sets the special _count search parameter, which limits the number
            of mathes returned per page in the pages search result
            </summary>
            <remark>The number of resources returned from the search may exceed this
            parameter, since additional _included resources for the matches are returned
            as well</remark>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Summary">
            <summary>
            Gets or sets the special _summary search parameter. If set to true,
            the server will not return all elements in each matching resource, but just
            the most important ones.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Filter">
            <summary>
            Gets or sets the special _filter search parameter to supply an advanced query expression
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SearchParams.SEARCH_PARAM_SORT">
            <summary>
            "_sort"
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Sort">
            <summary>
            Gets or sets the _sort parameter, to modify the sort order of the search result.
            Uses a tuple (name, sortorder).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Rest.SearchParams.Include">
            <summary>
            Returns a modifiable collection of _include parameters. These are used to include
            resources in the search result that the matched resources refer to.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.SearchParams.FromUriParamList(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Take a list of key/value pairs and turn them into a new <see cref="T:Hl7.Fhir.Rest.SearchParams"/> instance.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.SearchParams.ToUriParamList">
            <summary>
            Convert this instance into a <see cref="T:Hl7.Fhir.Rest.UriParamList"/>. 
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.SortOrder">
            <summary>
            Possible values for the "_sort" parameter
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.ContainedSearch">
            <summary>
            Possible values for the "_contained" parameter
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.IncludeModifier">
            <summary>
            Possible "_include" modifiers
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.IncludeModifier.None">
            <summary>
            No modifier on the include/revinclude parameter
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.IncludeModifier.Iterate">
            <summary>
            R4 only: Allows the include/revinclude process to iterate
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.IncludeModifier.Recurse">
            <summary>
            STU3 only: Allows the include/revinclude process to recurse
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.SummaryType">
            <summary>
            Possible "_summary" values
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SummaryType.True">
            <summary>
            Return only those elements marked as "summary" in the base definition of the resource(s)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SummaryType.Text">
            <summary>
            Return only the "text" element, and any mandatory elements
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SummaryType.Data">
            <summary>
            Remove the text element
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SummaryType.Count">
            <summary>
            Search only: just return a count of the matching resources, without returning the actual matches
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Rest.SummaryType.False">
            <summary>
            Return all parts of the resource(s)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Rest.ContainedResult">
            <summary>
            Values for the "_containedType" parameter.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.TaskExtensions.WaitNoResult(System.Threading.Tasks.Task)">
            <summary>
            Use the WaitNoResult so that the exception handling throws what you expect,
            and not the Aggregate exception
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:Hl7.Fhir.Rest.TransactionBuilder">
            <summary>
            Builder to describe a FHIR transaction Bundle
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.#ctor(System.String,Hl7.Fhir.Model.Bundle.BundleType)">
            <summary>
            Create a builder to describe a FHIR transaction Bundle
            </summary>
            <param name="baseUrl">URL of the FHIR server that is going to execute the transaction/batch</param>
            <param name="type">Specify that the server should perform a "batch" or a "transaction"</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.#ctor(System.Uri,Hl7.Fhir.Model.Bundle.BundleType)">
            <summary>
            Create a builder to describe a FHIR transaction Bundle
            </summary>
            <param name="baseUri">URL of the FHIR server that is going to execute the transaction/batch</param>
            <param name="type">Specify that the server should perform a "batch" or a "transaction"</param>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Get(System.String,System.String)">
            <summary>
            Add a "GET" entry to the transaction/batch
            </summary>
            <param name="url">relative or absolute url the transaction is supposed to "get"</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Get(System.Uri,System.String)">
            <summary>
            Add a "GET" entry to the transaction/batch
            </summary>
            <param name="uri">relative or absolute uri of the resource the transaction is supposed to return</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Read(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Add a "read" entry to the transaction/batch that returns a specific resource
            </summary>
            <param name="resourceType">type of the resource</param>
            <param name="id">id of the resource</param>
            <param name="versionId">optional version id of the resource</param>
            <param name="ifModifiedSince">optional date that specifies the resource is only to be returned if it has been modified after that date</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.VRead(System.String,System.String,System.String,System.String)">
            <summary>
            Add a "version read" entry to that transaction/batch
            </summary>
            <param name="resourceType">type of the resource</param>
            <param name="id">id of the resource</param>
            <param name="vid">version id of the resource</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Update(System.String,Hl7.Fhir.Model.Resource,System.String,System.String)">
            <summary>
            Add an "update" entry to the transaction/batch
            </summary>
            <param name="id">id of the resource</param>
            <param name="body">The newer version of the resource to be updated</param>
            <param name="versionId">optional version id of the resource</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Update(Hl7.Fhir.Rest.SearchParams,Hl7.Fhir.Model.Resource,System.String,System.String)">
            <summary>
            Add a "conditional update" entry to the transaction/batch
            </summary>
            <param name="condition">conditions on which a resource is supposed to be updated or not</param>
            <param name="body">the new version of the resource to be updated</param>
            <param name="versionId">optional version id of the resource</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Patch(System.String,System.String,Hl7.Fhir.Model.Parameters,System.String,System.String)">
            <summary>
            Add a "patch" entry to the transaction/batch
            </summary>
            <param name="resourceType">type of the resource to be patched</param>
            <param name="id">id of the resource to be patched</param>
            <param name="body">parameters resource that describes the patch operation</param>
            <param name="versionId">optional version id of the resource</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Patch(System.String,Hl7.Fhir.Rest.SearchParams,Hl7.Fhir.Model.Parameters,System.String,System.String)">
            <summary>
            Add a "patch" entry to the transaction/batch
            </summary>
            <param name="resourceType">type of the resource to be patched</param>
            <param name="condition">conditions on which the a resource is supposed to be patched</param>
            <param name="body">parameters resource that describes the patch operation</param>
            <param name="versionId">optional version id of the resource</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Delete(System.String,System.String,System.String)">
            <summary>
            Add a "delete" entry to the transaction/batch
            </summary>
            <param name="resourceType">type of the resource to be deleted</param>
            <param name="id">id of the resource to be deleted</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Delete(System.String,Hl7.Fhir.Rest.SearchParams,System.String)">
            <summary>
            Add a "conditional delete" entry to the transaction/batch
            </summary>
            <param name="resourceType">type of the resource to be deleted</param>
            <param name="condition">conditions on which the resource should be deleted</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Create(Hl7.Fhir.Model.Resource,System.String)">
            <summary>
            Add a "create" entry to the transaction/batch
            </summary>
            <param name="body">the resource that is to be created</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Create(Hl7.Fhir.Model.Resource,Hl7.Fhir.Rest.SearchParams,System.String)">
            <summary>
            Add a "create" entry to the transaction/batch
            </summary>
            <param name="body">the resource that is to be created</param>
            <param name="condition">conditions on which the resource is supposed to be created</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.CapabilityStatement(System.Nullable{Hl7.Fhir.Rest.SummaryType},System.String)">
            <summary>
            Add an entry to the transaction/batch that reads the CapabilityStatement of the server 
            </summary>
            <param name="summary">optional parameter that describes what kind of summary of the capability statement is to be returned</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.ResourceHistory(System.String,System.String,System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Add an entry to request the history of a single resource to the transaction/batch
            </summary>
            <param name="resourceType">type of the resource</param>
            <param name="id">id of the resource</param>
            <param name="summaryOnly">whether to return just a summary of all historical entries</param>
            <param name="pageSize">page size of the response bundle</param>
            <param name="since">date/time of the earliest historical entry</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.CollectionHistory(System.String,System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Add an entry to request the history of all resources of a certain type to the transaction/batch
            </summary>
            <param name="resourceType">type of the resource</param>
            <param name="summaryOnly">whether to return just a summary of all historical entries</param>
            <param name="pageSize">page size of the response bundle</param>
            <param name="since">date/time of the earliest historical entry</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.ServerHistory(System.Nullable{Hl7.Fhir.Rest.SummaryType},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Add an entry to request the history of all resources of the server to the transaction/batch
            </summary>
            <param name="summaryOnly">whether to return just a summary of all historical entries</param>
            <param name="pageSize">page size of the response bundle</param>
            <param name="since">date/time of the earliest historical entry</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.EndpointOperation(Hl7.Fhir.Rest.RestUrl,Hl7.Fhir.Model.Parameters,System.Boolean,System.String)">
            <summary>
            Add an entry to perform a FHIR operation on a certain endpoint of the server to the transaction/batch
            </summary>
            <param name="endpoint">The endpoint to perform the FHIR operation on</param>
            <param name="parameters">Parameters resource that describes the parameters of the operation</param>
            <param name="useGet">Whether to use a GET instead of POST to perform the operation</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.EndpointOperation(Hl7.Fhir.Rest.RestUrl,System.String,Hl7.Fhir.Model.Parameters,System.Boolean,System.String)">
            <summary>
            Add an entry to perform a FHIR operation on a certain endpoint of the server to the transaction/batch
            </summary>
            <param name="endpoint">The endpoint to perform the FHIR operation on</param>
            <param name="name">name of the operation to be performed</param>
            <param name="parameters">Parameters resource that describes the parameters of the operation</param>
            <param name="useGet">Whether to use a GET instead of POST to perform the operation</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.ServerOperation(System.String,Hl7.Fhir.Model.Parameters,System.Boolean,System.String)">
            <summary>
            Add an entry to perform a FHIR operation on the root of the server to the transaction/batch
            </summary>
            <param name="name">name of the operation to be performed</param>
            <param name="parameters">Parameters resource that describes the parameters of the operation</param>
            <param name="useGet">Whether to use a GET instead of POST to perform the operation</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.TypeOperation(System.String,System.String,Hl7.Fhir.Model.Parameters,System.Boolean,System.String)">
            <summary>
            Add an entry to perform a FHIR operation on a certain resource type to the transaction/batch
            </summary>
            <param name="resourceType">resource type on which the operation is to be performed</param>
            <param name="name">name of the operation to be performed</param>
            <param name="parameters">Parameters resource that describes the parameters of the operation</param>
            <param name="useGet">Whether to use a GET instead of POST to perform the operation</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.ResourceOperation(System.String,System.String,System.String,System.String,Hl7.Fhir.Model.Parameters,System.Boolean,System.String)">
            <summary>
            Add an entry to perform a FHIR operation on a certain resource to the transaction/batch
            </summary>
            <param name="resourceType">resource type of the resource on which the operation is to be performed</param>
            <param name="id">id of the resource</param>
            <param name="vid">version id of the resource</param>
            <param name="name">name of the operation to be performed</param>
            <param name="parameters">Parameters resource that describes the parameters of the operation</param>
            <param name="useGet">Whether to use a GET instead of POST to perform the operation</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Search(Hl7.Fhir.Rest.SearchParams,System.String,System.String)">
            <summary>
            Add a "search" entry to the transaction/batch
            </summary>
            <param name="q">search parameters that describe the query to use</param>
            <param name="resourceType">resource type to be searched on</param>       
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.SearchUsingPost(Hl7.Fhir.Rest.SearchParams,System.String,System.String)">
            <summary>
            Add a "search" entry to the transaction/batch that uses POST instead of GET to search.
            </summary>
            <param name="q">search parameters that describe the query to use</param>
            <param name="resourceType">resource type to be searched on</param>       
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.TransactionBuilder.Transaction(Hl7.Fhir.Model.Bundle,System.String)">
            <summary>
            Add a sub-transaction to the transaction/batch
            </summary>
            <param name="transaction">Bundle that describes the sub-transaction</param>
            <param name="bundleEntryFullUrl">Optional parameter to set the <c>fullUrl</c> of the <c>Bundle</c> entry.</param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Rest.UriParamList">
            <summary>
            Represents a list of FHIR search parameters, which is based on a list of (key,value) tuples,
            where the key may have a modifier appended. 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Rest.UriParamList.SplitParam(System.String)">
            <summary>
            Parses the possibly escaped key=value query parameter into a (key,value) Tuple
            </summary>
            <param name="param"></param>
            <returns>A Tuple&lt;string,string&gt; containing the key and value. Value maybe null if
            only the key was specified as a query parameter.</returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.UriParamList.MakeParam(System.String,System.String)">
            <summary>
            Converts a key,value pair into a query parameters, escaping the key and value
            of necessary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Rest.UriParamList.ToQueryString">
            <summary>
            Builds a query string based on a set of key,value pairs
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.AnnotationList">
            <summary>
            This class implements the interfaces IAnnotatable and IAnnotated. It can be used by the classes that also implements these
            interfaces to have a common implementation. 
            This list is thread safe
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.AnnotationList.OfType(System.Type)">
            <summary>
            Returns all annotations of type <paramref name="type"/>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.AnnotationList.IsEmpty">
            <summary>
            Gets a value that indicates whether there is an annotation present
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.AnnotationList.AddRange(Hl7.Fhir.Utility.AnnotationList)">
            <summary>
            Adds all the annotations from the <paramref name="source"/> to here. It will remove all existing annotations
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Hl7.Fhir.Utility.Cache`2.Settings">
            <summary>
            The settings for changing the behaviour of the case. Passed into the constructor and readonly here.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.Cache`2.Retrieve">
            <summary>
            The function that will be called when a cache miss is detected. If null, cache misses result in 
            a returned value of null for the given key.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Cache`2.GetValue(`0)">
            <summary>
            Retrieves a value from the cahce by key. If missing, the retrieve function passed to the constructor will be called.
            </summary>
            <param name="key"></param>
            <returns>The requested value. If there is no retriever function set, this may be <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Cache`2.GetValueOrAdd(`0,`1)">
            <summary>
            Retrieves a value from the cache by key. If missing, the passed <paramref name="value"/> is returned and added to the cache.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.CodedException">
            <summary>
            This is a class of Exceptions that is raised by the SDK and is coded with a unique code
            to enable callers to identify this exception and react appropriately on the code.
            </summary>
            <remarks>Most modules of the SDK using this Exception will create specific subclasses
            for this subclass, providing a list of codes used by that module.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Utility.CodedException.ErrorCode">
            <summary>
            The unique and permanent code for this error.
            </summary>
            <remarks>Developers can assume that these codes will not change in future versions.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumerableExtensions.WithValues``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Transforms an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with nullable contents <c>T?</c> into a (possibly smaller)
            enumerable of the non-nullable type <c>T</c>.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.EnumLiteralAttribute.System">
            <summary>
            The system name-space of the code system that this literal value comes from 
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.EnumUtility">
            <summary>
            A set of utility methods to work with serialized enumeration values.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetLiteral(System.Enum)">
            <summary>
            Retrieves the literal value for the code represented by this enum value, or the member name itself if there
            is no literal value defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetLiteral``1(``0)">
            <summary>
            Retrieves the literal value for the code represented by this enum <typeparamref name="T"/>, or the member name itself if there
            is no literal value defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetLiteral``1(System.Nullable{``0})">
            <summary>
            Retrieves the literal value for the code represented by this nullable enum <typeparamref name="T"/>, or the member name itself if there
            is no literal value defined, or null if the enum does not have a value.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetSystem(System.Enum)">
            <summary>
            Retrieves the system canonical for the code represented by this enum value, or <c>null</c> if there is no system defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetSystem``1(``0)">
            <summary>
            Retrieves the system canonical for the code represented by this enum <typeparamref name="T"/>, or <c>null</c> if there is no system defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetDocumentation(System.Enum)">
            <summary>
            Retrieves the description for this enum value or the enumeration value itself if there is no description defined.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.ParseLiteral(System.String,System.Type,System.Boolean)">
            <summary>
            Finds an enumeration value from <paramref name="enumType"/> where the literal is the same as <paramref name="rawValue"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.ParseLiteral``1(System.String,System.Boolean)">
            <summary>
            Finds an enumeration value from enum <typeparamref name="T"/> where the literal is the same as <paramref name="rawValue"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetName(System.Type)">
            <summary>
            Gets the human readable name defined for the enumeration <paramref name="enumType"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.EnumUtility.GetName``1">
            <summary>
            Gets the human readable name defined for the enumeration <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ExceptionSourceExtensions.Catch(Hl7.Fhir.Utility.IExceptionSource,Hl7.Fhir.Utility.ExceptionNotificationHandler,System.Boolean)">
            <summary>
            Registers an <see cref="T:Hl7.Fhir.Utility.ExceptionNotificationHandler" /> with an <see cref="T:Hl7.Fhir.Utility.IExceptionSource"/>.
            </summary>
            <param name="source"></param>
            <param name="handler"></param>
            <param name="forward">If true, also forwards the error to the original handler (if any).</param>
            <returns>An object that, when disposed, unregisters the handler from the source.</returns>
            <remarks>
            <para>This function can be used directly inside a <c>using</c> block, to scope the interception
            of exceptions by the given handler to that block.</para>
            <para>The <paramref name="handler"/> replaces the handler already in place in the source (of any), but
            as soon as executing leaves the block, the handler is unregistered, and the original handler restored.</para>
            <para>If the source originally had a handler set, the <paramref name="forward"/> can be used to forward
            the exception to the original handler, after invoking the handler passed in with <paramref name="handler"/>.</para>
            </remarks>
            <example>
            <code>
            using(source.Catch((o,a) => lastError = a)) 
            {
                 var children = source.Children();
            }
            </code></example>
        </member>
        <member name="T:Hl7.Fhir.Utility.ExtendedCodedException">
            <summary>
            This is a class of Exceptions that is raised by the SDK and is coded with a unique code
            to enable callers to identify this exception and react appropriately on the code.
            </summary>
            <remarks>Most modules of the SDK using this Exception will create specific subclasses
            for this subclass, providing a list of codes used by that module.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Utility.ExtendedCodedException.IssueSeverity">
            <summary>
            Severity of this specific issue.
            </summary>
            <remarks>
            Setter is public to permit others to upgrade/downgrade specific issues
            as needed.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Utility.ExtendedCodedException.IssueType">
            <summary>
            Type of issue to report in a FHIR OperationOutcome.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.ExtendedCodedException.BaseErrorMessage">
            <summary>
            The error message without any location information appended to it (which is in Exception.Message property).
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.ExtendedCodedException.LineNumber">
            <summary>
            The line number of the error in the original source data.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.ExtendedCodedException.Position">
            <summary>
            The position of the error on the line in the original source data.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.ExtendedCodedException.InstancePath">
            <summary>
            The InstancePath of the error in the resource in simple fhirpath format.
            </summary>
            <remarks>
            This is usually populated into the OperationOutcome.expression property.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.Parse(System.String)">
            <summary>
            Returns a FHIR version as an enum from a version number
            </summary>
            <param name="version">Fhir Release version number</param>
            <returns>Official FHIR Release</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.TryParse(System.String,System.Nullable{Hl7.Fhir.Specification.FhirRelease}@)">
            <summary>
            Converts a version number into a specific official FHIR Release
            </summary>
            <param name="version">Fhir Release version number</param>
            <param name="release">Official FHIR Release</param>
            <returns>true if the conversion succeeded; false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.FhirVersionFromRelease(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Returns the version number of the latest official FHIR releases
            </summary>
            <param name="fhirRelease">Official FHIR release</param>
            <returns>Latest version number</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.FhirReleaseFromMimeVersion(System.String)">
            <summary>
            Returns the official FHIR version based on the value of a MIME-Type parameter 'fhirversion'
            </summary>
            <param name="fhirMimeVersion">'fhirversion' MIME-Type parameter</param>
            <returns>Official FHIR Release</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.TryGetFhirReleaseFromMimeVersion(System.String,System.Nullable{Hl7.Fhir.Specification.FhirRelease}@)">
            <summary>
            Gets the official FHIR version based on the value of a MIME-Type parameter 'fhirversion'
            </summary>
            <param name="fhirMimeVersion">'fhirversion' MIME-Type parameter</param>
            <param name="release">Official FHIR Release</param>
            <returns>true if the conversion succeeded; false otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.MimeVersionFromFhirRelease(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Returns the value of the 'fhirversion' MIME-type parameter corresponding to a specific FHIR Version
            </summary>
            <param name="fhirRelease">Official FHIR release</param>
            <returns>Corresponding 'fhirversion' MIME-Type value, see http://hl7.org/fhir/http.html#version-parameter
            for more information.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.FhirReleaseFromCorePackageName(System.String)">
            <summary>
            Returns the corresponding FHIR release version of the specific FHIR Core package from HL7
            </summary>
            <param name="packageName">FHIR Core package name</param>
            <returns>Official FHIR Release</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.TryGetFhirReleaseFromCorePackageName(System.String,System.Nullable{Hl7.Fhir.Specification.FhirRelease}@)">
            <summary>
            Gets the corresponding FHIR release version of the specific FHIR Core package from HL7
            </summary>
            <param name="packageName">FHIR Core package name</param>
            <param name="release">Official FHIR Release</param>
            <returns>true if the conversion succeeded; false otherwise</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.FhirReleaseParser.CorePackageNameFromFhirRelease(Hl7.Fhir.Specification.FhirRelease)">
            <summary>
            Returns the corresponding FHIR core package of the specific FHIR Release version
            </summary>
            <param name="fhirRelease">FHIR Release version</param>
            <returns>FHIR Core package name</returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.IncludedXsdSchemaSet">
            <summary>
            Internal class that holds a set of compiled Xsd schema.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.IncludedXsdSchemaSet.#ctor(System.Reflection.Assembly,System.String[])">
            <summary>
            Create a schema set given a set of embedded resource keys to reach the schemas from.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.IncludedXsdSchemaSet.#ctor(Hl7.Fhir.Utility.IncludedXsdSchemaSet,System.Reflection.Assembly,System.String[])">
            <summary>
            Create a schema set given an existing set, and and a set of embedded resource keys to reach the schemas from.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.IncludedXsdSchemaSet.CompiledSchemas">
            <summary>
            Return the cached and compiled set of Xsd schemas.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.IntExtensions.Digits(System.Int32)">
            <summary>
            The number of digits in a non-negative number. Returns 1 for all
            negative numbers. That is ok because we are using it to calculate
            string length for a <see cref="T:System.Text.StringBuilder"/> for numbers that
            aren't supposed to be negative, but when they are it is just a little
            slower.
            </summary>
            <remarks>
            This approach is based on https://stackoverflow.com/a/51099524/268898
            where the poster offers performance benchmarks showing this is the
            fastest way to get a number of digits.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Utility.IPositionInfo">
            <summary>
            Represents an object that can provide line/position information within data being processed.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.IPositionInfo.LineNumber">
            <summary>
            The line number within the data, starting with 1 for the first line.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.IPositionInfo.LinePosition">
            <summary>
            The position within the line, starting with 1 for the first column.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.PositionInfo">
            <summary>
            A class representing line/position information within data being processed.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Utility.PositionInfo.LineNumber">
            <inheritdoc />
        </member>
        <member name="P:Hl7.Fhir.Utility.PositionInfo.LinePosition">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Utility.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.Exception,System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotSupported(System.String)">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented(System.String)">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.String)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,Hl7.Fhir.Utility.IPositionInfo)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.Int32,System.Int32)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.NullExtensions.IsNullOrEmpty(System.Collections.IList)">
            <summary>Determines if the list is <c>null</c> or empty.</summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.NullExtensions.IsNullOrEmpty(Hl7.Fhir.Model.Base)">
            <summary>
            Determines if the element is <c>null</c> or empty.
            For primitive values, verifies that the value equals <c>null</c>.
            For primitive string values, verifies that the string value is <c>null</c> or empty.
            Recursively verifies that all <see cref="P:Hl7.Fhir.Model.Base.Children"/> instances are <c>null</c> or empty.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Utility.PropertyInfoExtensions">
            <summary>
            Utility methods for generating delegates to support the deserializer.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.BuildFactoryMethod(System.Type)">
            <summary>
            Generates a function that creates an instance of the given type.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.BuildListFactoryMethod(System.Type)">
            <summary>
            Generates a function that creates an instance of a list of the given type.
            </summary>
            <remarks>The returned instance will actually be of type <see cref="T:System.Collections.Generic.List`1"/> where T is the given type.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an instance, gets the value of the given property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueGetter(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an object instance, gets the value of the given property.
            </summary>   
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an instance and a value, sets the value of the given property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.PropertyInfoExtensions.GetValueSetter(System.Reflection.PropertyInfo)">
            <summary>
            Generates a function that, when passed an object instance and a value, sets the value of the given property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetAttributeOnEnum``1(System.Enum)">
            <summary>
            Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumVal">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.FindPublicProperties(System.Type)">
            <summary>
            Returns all public, non-static properties for the given type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.HasDefaultPublicConstructor(System.Type)">
            <summary>
            Returns true if the type is a primitive value type that has a parameterless public constructor.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetNullableArgument(System.Type)">
            <summary>
            If the given type is a <see cref="T:System.Nullable`1"/>, this function will return T.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.IsTypedCollection(System.Type)">
            <summary>
            Returns true if the given type is a .NET2.0+ typed collection.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.SemVersion">
            <summary>
            A semantic version implementation.
            Conforms with v2.0.0 of http://semver.org
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Constructs a new instance of the <see cref="T:Hl7.Fhir.Utility.SemVersion" /> class.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="patch">The patch version.</param>
            <param name="prerelease">The prerelease version (e.g. "alpha").</param>
            <param name="build">The build metadata (e.g. "nightly.232").</param>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.#ctor(System.Version)">
            <summary>
            Constructs a new instance of the <see cref="T:Hl7.Fhir.Utility.SemVersion"/> class from
            a <see cref="T:System.Version"/>.
            </summary>
            <param name="version">The <see cref="T:System.Version"/> that is used to initialize
            the Major, Minor, Patch and Build.</param>
            <returns>A <see cref="T:Hl7.Fhir.Utility.SemVersion"/> with the same Major and Minor version.
            The Patch version will be the fourth part of the version number. The
            build meta data will contain the third part of the version number if
            it is greater than zero.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of a semantic version to its <see cref="T:Hl7.Fhir.Utility.SemVersion"/> equivalent.
            </summary>
            <param name="version">The version string.</param>
            <param name="strict">If set to <see langword="true"/> minor and patch version are required,
            otherwise they are optional.</param>
            <returns>The <see cref="T:Hl7.Fhir.Utility.SemVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="version"/> has an invalid format.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="version"/> is missing Minor or Patch versions and <paramref name="strict"/> is <see langword="true"/>.</exception>
            <exception cref="T:System.OverflowException">The Major, Minor, or Patch versions are larger than <code>int.MaxValue</code>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.TryParse(System.String,Hl7.Fhir.Utility.SemVersion@,System.Boolean)">
            <summary>
            Converts the string representation of a semantic version to its <see cref="T:Hl7.Fhir.Utility.SemVersion"/>
            equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="version">The version string.</param>
            <param name="semver">When the method returns, contains a <see cref="T:Hl7.Fhir.Utility.SemVersion"/> instance equivalent
            to the version string passed in, if the version string was valid, or <see langword="null"/> if the
            version string was not valid.</param>
            <param name="strict">If set to <see langword="true"/> minor and patch version are required,
            otherwise they are optional.</param>
            <returns><see langword="false"/> when a invalid version string is passed, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Equals(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Checks whether two semantic versions are equal.
            </summary>
            <param name="versionA">The first version to compare.</param>
            <param name="versionB">The second version to compare.</param>
            <returns><see langword="true"/> if the two values are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Compare(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares the specified versions.
            </summary>
            <param name="versionA">The first version to compare.</param>
            <param name="versionB">The second version to compare.</param>
            <returns>A signed number indicating the relative values of <paramref name="versionA"/> and <paramref name="versionB"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Change(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Make a copy of the current instance with changed properties.
            </summary>
            <param name="major">The value to replace the major version or <see langword="null"/> to leave it unchanged.</param>
            <param name="minor">The value to replace the minor version or <see langword="null"/> to leave it unchanged.</param>
            <param name="patch">The value to replace the patch version or <see langword="null"/> to leave it unchanged.</param>
            <param name="prerelease">The value to replace the prerelease version or <see langword="null"/> to leave it unchanged.</param>
            <param name="build">The value to replace the build metadata or <see langword="null"/> to leave it unchanged.</param>
            <returns>The new version object.</returns>
            <remarks>
            The change method is intended to be called using named argument syntax, passing only
            those fields to be changed.
            </remarks>
            <example>
            To change only the patch version:
            <code>version.Change(patch: 4)</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Major">
            <summary>
            Gets the major version.
            </summary>
            <value>
            The major version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Minor">
            <summary>
            Gets the minor version.
            </summary>
            <value>
            The minor version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Patch">
            <summary>
            Gets the patch version.
            </summary>
            <value>
            The patch version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Prerelease">
            <summary>
            Gets the prerelease version.
            </summary>
            <value>
            The prerelease version. Empty string if this is a release version.
            </value>
        </member>
        <member name="P:Hl7.Fhir.Utility.SemVersion.Build">
            <summary>
            Gets the build metadata.
            </summary>
            <value>
            The build metadata. Empty string if there is no build metadata.
            </value>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.ToString">
            <summary>
            Returns the <see cref="T:System.String" /> equivalent of this version.
            </summary>
            <returns>
            The <see cref="T:System.String" /> equivalent of this version.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="obj" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="obj" />.
             Greater than zero: This instance follows <paramref name="obj" /> in the sort order.
            </returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="obj"/> is not a <see cref="T:Hl7.Fhir.Utility.SemVersion"/>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.CompareTo(Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="other" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="other" />.
             Greater than zero: This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.PrecedenceMatches(Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Returns whether two semantic versions have the same precedence. Versions
            that differ only by build metadata have the same precedence.
            </summary>
            <param name="other">The semantic version to compare to.</param>
            <returns><see langword="true"/> if the version precedences are equal.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.CompareByPrecedence(Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions by precedence as defined in the SemVer spec. Versions
            that differ only by build metadata have the same precedence.
            </summary>
            <param name="other">The semantic version.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings:
             Less than zero: This instance precedes <paramref name="other" /> in the sort order.
             Zero: This instance occurs in the same position in the sort order as <paramref name="other" />.
             Greater than zero: This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance, otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">The <paramref name="obj"/> is not a <see cref="T:Hl7.Fhir.Utility.SemVersion"/>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_Implicit(System.String)~Hl7.Fhir.Utility.SemVersion">
            <summary>
            Implicit conversion from <see cref="T:System.String"/> to <see cref="T:Hl7.Fhir.Utility.SemVersion"/>.
            </summary>
            <param name="version">The semantic version.</param>
            <returns>The <see cref="T:Hl7.Fhir.Utility.SemVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The version number has an invalid format.</exception>
            <exception cref="T:System.OverflowException">The Major, Minor, or Patch versions are larger than <code>int.MaxValue</code>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_Equality(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions for equality.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_Inequality(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions for inequality.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is not equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_GreaterThan(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_GreaterThanOrEqual(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than or equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_LessThan(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.SemVersion.op_LessThanOrEqual(Hl7.Fhir.Utility.SemVersion,Hl7.Fhir.Utility.SemVersion)">
            <summary>
            Compares two semantic versions.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than or equal to right <see langword="true"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="F:Hl7.Fhir.Utility.SerializationUtil.BASEFHIRSCHEMAS">
            <summary>
            A set of Xsd schemas used by the full FHIR schemaset. These include xml.xsd, xmldsig-core-schema.xsd and fhir-xhtml.xsd.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.JObjectFromReader(Newtonsoft.Json.JsonReader)">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.JObjectFromReaderAsync(Newtonsoft.Json.JsonReader)" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.JObjectFromJsonText(System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.JObjectFromJsonTextAsync(System.String)" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.WriteXmlToBytes(System.Action{System.Xml.XmlWriter})">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.WriteXmlToBytesAsync(System.Func{System.Xml.XmlWriter,System.Threading.Tasks.Task})" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.WriteXmlToString(System.Action{System.Xml.XmlWriter},System.Boolean,System.Boolean)">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.WriteXmlToStringAsync(System.Func{System.Xml.XmlWriter,System.Threading.Tasks.Task},System.Boolean,System.Boolean)" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.WriteXmlToDocument(System.Action{System.Xml.XmlWriter})">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.WriteXmlToDocumentAsync(System.Func{System.Xml.XmlWriter,System.Threading.Tasks.Task})" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.WriteJsonToString(System.Action{Newtonsoft.Json.JsonWriter},System.Boolean,System.Boolean)">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.WriteJsonToStringAsync(System.Func{Newtonsoft.Json.JsonWriter,System.Threading.Tasks.Task},System.Boolean,System.Boolean)" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.WriteJsonToBytes(System.Action{Newtonsoft.Json.JsonWriter})">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.WriteJsonToBytesAsync(System.Func{Newtonsoft.Json.JsonWriter,System.Threading.Tasks.Task})" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.WriteJsonToDocument(System.Action{Newtonsoft.Json.JsonWriter})">
            <inheritdoc cref="M:Hl7.Fhir.Utility.SerializationUtil.WriteJsonToDocumentAsync(System.Func{Newtonsoft.Json.JsonWriter,System.Threading.Tasks.Task})" />
        </member>
        <member name="M:Hl7.Fhir.Utility.SerializationUtil.SanitizeXml(System.String)">
            <summary>
            Replace all the XML specific special characters with the XHTML equivalents
            </summary>
            <remarks>
            this is based on own research plus combining with results shown here:
            http://www.codeproject.com/Articles/298519/Fast-Token-Replacement-in-Csharp
            The RegEx approach does not require multiple passes or string creations
            while replacing all the items.
            It occurs in O(n) StringBuilder concatenations + O(n) dictionary lookups
            </remarks>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.StringExtensions.MatchesPrefix(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            See if text matches prefix, where the prefix can be either a
            string, or string ending in '*'. In the latter case a prefix match
            is done, otherwise the full strings are compared.
            </summary>
            <param name="text"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.StringExtensions.MatchesPrefix(System.String,System.String)">
            <summary>
            See if text matches prefix, where the prefix can be either a
            string, or string ending in '*'. In the latter case a prefix match
            is done, otherwise the full strings are compared.
            </summary>
            <param name="text"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Utility.Unit">
            <summary>
            Units is the formal type with one element and has no representation in .NET.
            It is used to provide a type where none is wanted or expected, e.g. to supply
            a mandatory generic type argument to a monad when no real value needs to be
            represented in the monad.
            </summary>
            <remarks>It's unfortunate that Microsoft does not allow us to use the already
            existing System.Void type for this - which is defined more or less equivalently.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.ElementDefinitionSummary.IsModifier">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Specification.FhirRelease">
            <summary>
            The major FHIR publication releases.
            </summary>
            <remarks>Note: this is set is ordered, so "older release" is less than "newer release".</remarks>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.DSTU1">
            <summary>
            FHIR Release DSTU1
            http://hl7.org/fhir/DSTU1
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.DSTU2">
            <summary>
            FHIR Release DSTU2 
            http://hl7.org/fhir/DSTU2
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.STU3">
            <summary>
            FHIR Release STU3 
            http://hl7.org/fhir/STU3
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.R4">
            <summary>
            FHIR Release 4 
            http://hl7.org/fhir/R4
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.R5">
            <summary>
            FHIR Release 5 
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.FhirRelease.R4B">
            <summary>
            FHIR Release 4B 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.IElementDefinitionSummary.IsModifier">
            <summary>
            If this modifies the meaning of other elements
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.IElementDefinitionSummary.DefaultTypeName">
            <summary>
            Logical Models where a choice type is represented by ElementDefinition.representation = typeAttr might define a default type (elementdefinition-defaulttype extension). null in most cases.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.IElementDefinitionSummary.NonDefaultNamespace">
            <summary>
            This is the namespace used for the xml node representing this element.
            Only need to be set if different from "http://hl7.org/fhir".
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.IElementDefinitionSummary.Representation">
            <summary>
            The kind of node used to represent this element in XML.
            Default is <see cref="F:Hl7.Fhir.Specification.XmlRepresentation.XmlElement"/>.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.IStructureDefinitionSummary">
            <summary>
            A class representing a complex type, with child elements. 
            </summary>
            <remarks>
             In FHIR, this interface represents definitions of Resources, datatypes and BackboneElements. 
             BackboneElements will have the TypeName set to "BackboneElement" (in resources) or "Element" (in datatypes)
             and IsAbstract set to true.
             </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy">
            <summary>Defines options for the <see cref="T:Hl7.Fhir.Specification.Source.CachedResolver"/> that determine how to load a resource.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy.LoadOnDemand">
            <summary>Return from cache, if present. Otherwise (re-)load from source and update cache.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy.LoadFromCache">
            <summary>Return from cache, if present. Do NOT (re-)load from source. Do NOT update cache.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy.LoadFromSource">
            <summary>Force (re-)load from source and update cache.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolver">
            <summary>Reads and caches FHIR artifacts (Profiles, ValueSets, ...) from an internal <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolver.DEFAULT_CACHE_DURATION">
            <summary>Default expiration time for cached entries.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.#ctor(Hl7.Fhir.Specification.Source.ISyncOrAsyncResourceResolver,System.Int32)">
            <summary>Creates a new artifact resolver that caches loaded resources in memory.</summary>
            <param name="source">Resolver from which artifacts are initially resolved on a cache miss.</param>
            <param name="cacheDuration">Default expiration time of a cache entry, in seconds.</param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.Source">
            <summary>
            Returns the resolver for which access is cached, as specified in the constructor.
            </summary>
            <remarks>May return <code>null</code> if the source is an exclusively asynchronous resolver.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.AsyncResolver">
            <summary>
            Returns the resolver for which access is cached, as specified in the constructor.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.CacheDuration">
            <summary>Gets the default expiration time of a cache entry.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUri(System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUriAsync(System.String)"/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUriAsync(System.String)">
            <summary>Retrieve the artifact with the specified url.</summary>
            <param name="url">The url of the target artifact.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUri(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)">
            <inheritdoc cref="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUriAsync(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)"/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUriAsync(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)">
            <summary>Retrieve the artifact with the specified url.</summary>
            <param name="url">The url of the target artifact.</param>
            <param name="strategy">Option flag to control the loading strategy.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUri(System.String)">
            <inheritdoc cref="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUriAsync(System.String)" />
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUriAsync(System.String)">
            <summary>Retrieve the conformance resource with the specified canonical url.</summary>
            <param name="url">The canonical url of the target conformance resource.</param>
            <returns>A conformance <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUri(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)">
            <inheritdoc cref="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUriAsync(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)" />
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUriAsync(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)">
            <summary>Retrieve the conformance resource with the specified canonical url.</summary>
            <param name="url">The canonical url of the target conformance resource.</param>
            <param name="strategy">Option flag to control the loading strategy.</param>
            <returns>A conformance <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.InvalidateByUri(System.String)">
            <summary>Clear the cache entry for the artifact with the specified url, if it exists.</summary>
            <param name="url">The url of the target resource.</param>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.InvalidateByCanonicalUri(System.String)">
            <summary>Clear the cache entry for the conformance resource with the specified canonical uri, if it exists.</summary>
            <param name="url">The canonical url of the target conformance resource.</param>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.Clear">
            <summary>Clear the memory cache by removing all existing cache entries.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.IsCachedUri(System.String)">
            <summary>Determines if the memory cache contains a resource with the specified url.</summary>
            <returns><c>true</c> if the resource is cached, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.IsCachedCanonicalUri(System.String)">
            <summary>Determines if the memory cache contains a conformance resource with the specified canonical url.</summary>
            <returns><c>true</c> if the conformance resource is cached, or <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventArgs">
            <summary>Event arguments for the <see cref="T:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventHandler"/> delegate.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventArgs.Url">
            <summary>Returns the url of the cached resource.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventArgs.Resource">
            <summary>Returns a reference to the cached resource.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventHandler">
            <summary>Handles the <see cref="E:Hl7.Fhir.Specification.Source.CachedResolver.Load"/> event that is fired when a new resources is loaded into the cache.</summary>
        </member>
        <member name="E:Hl7.Fhir.Specification.Source.CachedResolver.Load">
            <summary>Occurs when a artifact is loaded into the cache.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.OnLoad(System.String,Hl7.Fhir.Model.Resource)">
            <summary>Called when an artifact is loaded into the cache.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.CacheEntry`1.IsExpired">
            <summary>Returns a boolean value that indicates if the cache entry is expired.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.IArtifactSource">
            <summary>Interface for browsing and resolving FHIR artifacts by filename.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IArtifactSource.ListArtifactNames">
            <summary>Gets a list of artifact filenames.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IArtifactSource.LoadArtifactByName(System.String)">
            <summary>Load the artifact with the specified filename.</summary>
            <remarks>
            This method does not support duplicate file names in separate subfolders of the content directory.
            The ISummarySource interface provides methods to unambiguously retrieve specific
            artifacts from the associated summary instance.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.#ctor">
            <summary>
            Reads FHIR artifacts (Profiles, ValueSets, CodeSystems etc.) from memory.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.#ctor(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.Resource})">
            <summary>
            Reads FHIR artifacts (Profiles, ValueSets, CodeSystems etc.) from memory.
            </summary>
            <param name="resources">Resources to be loaded in memory.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.#ctor(Hl7.Fhir.Model.Resource[])">
            <summary>
            Reads FHIR artifacts (Profiles, ValueSets, CodeSystems etc.) from memory.
            </summary>
            <param name="resource">One or more resources to be loaded in memory..</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.Reload(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.Resource})">
            <summary>
            Reloads the memory resource provider with new resources
            </summary>
            <param name="resources">resources to be loaded in memory</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.Reload(Hl7.Fhir.Model.Resource[])">
            <summary>
            Reloads the memory resource provider with new resources
            </summary>
            <param name="resources">resources to be loaded in memory</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.Clear">
            <summary>
            Clears the memory of the resource provider.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.Add(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.Resource})">
            <summary>
            Adds a resource to memory
            </summary>
            <param name="resources">Resouces to be loaden in memory</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.Add(Hl7.Fhir.Model.Resource[])">
            <summary>
            Adds a resource to memory
            </summary>
            <param name="resources">One or multiple resouces to be loaded in memory</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.ResolveByCanonicalUri(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.ResolveByCanonicalUriAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.ResolveByUri(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.InMemoryResourceResolver.ResolveByUriAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.IResourceResolver">
            <summary>Interface for resolving FHIR artifacts by (canonical) uri.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IResourceResolver.ResolveByUri(System.String)">
            <summary>Find a resource based on its relative or absolute uri.</summary>
            <param name="uri">A resource uri.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IResourceResolver.ResolveByCanonicalUri(System.String)">
            <summary>Find a (conformance) resource based on its canonical uri.</summary>
            <param name="uri">The canonical url of a (conformance) resource.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IAsyncResourceResolver.ResolveByUriAsync(System.String)">
            <summary>Find a resource based on its relative or absolute uri.</summary>
            <param name="uri">A resource uri.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IAsyncResourceResolver.ResolveByCanonicalUriAsync(System.String)">
            <summary>Find a (conformance) resource based on its canonical uri.</summary>
            <param name="uri">The canonical url of a (conformance) resource.</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ISyncOrAsyncResourceResolver">
            <summary>
            Empty marker interface to allow sync-backwards compatible code to support both sync and async resolvers.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.MultiResolver">
            <summary>
            Reads FHIR artifacts (Profiles, ValueSets, ...) from a list of other IArtifactSources
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.MultiResolver.Sources">
            <summary>
            Return all child resolvers that support synchronous resolution.
            </summary>
            <remarks>The collections returned by the <see cref="P:Hl7.Fhir.Specification.Source.MultiResolver.Sources"/> and <see cref="P:Hl7.Fhir.Specification.Source.MultiResolver.AsyncSources" /> properties are 
            not necessarily disjunct.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.MultiResolver.AsyncSources">
            <summary>
            Return all child resolvers that support asynchronous resolution.
            </summary>
            <remarks>The collections returned by the <see cref="P:Hl7.Fhir.Specification.Source.MultiResolver.AsyncSources"/> and <see cref="P:Hl7.Fhir.Specification.Source.MultiResolver.Sources" /> properties are 
            not necessarily disjunct.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.SyncToAsyncResolver">
            <summary>
            Implements <see cref="T:Hl7.Fhir.Specification.Source.IAsyncResourceResolver" /> on top of an <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver" />
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SyncToAsyncResolverExtensions.AsAsync(Hl7.Fhir.Specification.Source.ISyncOrAsyncResourceResolver)">
            <summary>
            Converts a (possibly non-async) resource resolver to an async one.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <remarks>Note that this async method will block on the possibly synchronous source. This method
            is meant for temporary backwards-compatiblity reasons only.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ZipCacher">
            <summary>
            Internal class which gives access to files within a zip whilst avoiding unpacking that zip on every access.
            The ZipCacher will unpack the zip once and store the contents in a cache directory, serving files from this cache.
            When the ZipCacher detects the zip is more recent than its cache, it will update the cache directory automatically.
            
            The ZipCacher will normally reuse the cache from a previous instantiation of ZipCacher. When using a shared cache over
            multiple ZipCachers, keep in mind that it uses the filesystem for its state, and is not thread-safe.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipCacher.CachePath">
            <summary>
            The full path to the directory where the files from the zip will be cached.
            </summary>
            <remarks>Note that actual extraction will take place in a directory with the name of the zip file
            to make the same cache path useable for different zip files.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipCacher.ZipPath">
            <summary>
            The full path to the zip with the contents to extract/cache.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.#ctor(System.String,System.String)">
            <summary>
            Creates a ZipCaches that maintains the extracted files of a zip file in the given directory.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.GetContents">
            <summary>
            Returns a list of files present in the zip, returning a full path to the file
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.IsActual">
            <summary>
            Returns true if the ZipCacher has an up-to-date cache for the zip file it manages.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.EnsureActual">
            <summary>
            Makes sure the cache is extracted and up to date.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.GetContentDirectory">
            <summary>
            Returns the directory where the contents of the zip are extracted. 
            </summary>
            <remarks>Note that this function will update the cache before returning the directory name.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.Refresh">
            <summary>
            Clears the cache and re-extracts the zip into the cache directory.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.getCachedZipDirectory">
            <summary>
            Gets the cache directory, or creates an empty cache directory if it does not exist
            </summary>
            <returns>Information about the existing (or new) cache directory</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.BuildDefaultCacheDirectoryName(System.Reflection.Assembly)">
            <summary>
            Builds a directory name to use as the target of the unzipped data. The name is based
            on the product and version information of the assembly given.
            </summary>
            <param name="satellite">The assembly from which to take product and version information.</param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ClosureParameters.Name">
            <summary>
            The name that defines the particular context for the subsumption based closure table.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ClosureParameters.Concept">
            <summary>
            Concepts to add to the closure table.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ClosureParameters.Version">
            <summary>
            A request to resynchronise - request to send all new entries since the nominated version was sent by the server.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService">
            <summary>
            Base class for checking Code terminology
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.#ctor(System.String,System.String,System.String[])">
            <summary>
            Base class for checking terminology of codes that are part of a value set.
            </summary>
            <param name="terminologyType">String representation of the code type which is being checked. Exclusively used for error messages</param>
            <param name="codeSystem">Name of the specification defining the members of the value set</param>
            <param name="codeValueSets">uri's of the definitions of the code system. This can be multiple, if a FHIR version has changed this at some point.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.Closure(Hl7.Fhir.Model.Parameters,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.CodeSystemValidateCode(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.Expand(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.Lookup(Hl7.Fhir.Model.Parameters,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.Subsumes(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.Translate(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.CustomValueSetTerminologyService.ValueSetValidateCode(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.FileSystemName">
            <summary>
            Provides methods for matching file system names.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.FileSystemName.TranslateWin32Expression(System.String)">
            <summary>
            Change '*' and '?' to '&lt;', '&gt;' and '"' to match Win32 behavior. For compatibility, Windows
            changes some wildcards to provide a closer match to historical DOS 8.3 filename matching.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.FileSystemName.MatchesWin32Expression(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)">
             <summary>
             Return true if the given expression matches the given name. Supports the following wildcards:
             '*', '?', '&lt;', '&gt;', '"'. The backslash character '\' escapes.
             </summary>
             <param name="expression">The expression to match with, such as "*.foo".</param>
             <param name="name">The name to check against the expression.</param>
             <param name="ignoreCase">True to ignore case (default).</param>
             <remarks>
             This is based off of System.IO.PatternMatcher used in FileSystemWatcher, which is based off
             of RtlIsNameInExpression, which defines the rules for matching DOS wildcards ('*', '?', '&lt;', '&gt;', '"').
            
             Like PatternMatcher, matching will not line up with Win32 behavior unless you transform the expression
             using <see cref="M:Hl7.Fhir.Specification.Terminology.FileSystemName.TranslateWin32Expression(System.String)"/>
             </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.FileSystemName.MatchesSimpleExpression(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Return true if the given expression matches the given name. '*' and '?' are wildcards, '\' escapes.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ICodeValidationTerminologyService.ValueSetValidateCode(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <summary>
            Validate that a coded value is in the set of codes allowed by a value set.
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="id">Id of a specific ValueSet which is used to validate against</param>
            <param name="useGet"> Use the GET instead of POST Http method</param>
            <returns>Output parameters containing the result of the operation</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/valueset-operation-validate-code.html">$validate-codes</seealso> operation.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ICodeValidationTerminologyService.Subsumes(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <summary>
            Test the subsumption relationship between code/Coding A and code/Coding B given the semantics of subsumption in the underlying code system
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="id">Id of the code system in which subsumption testing is to be performed.</param>
            <param name="useGet">Use the GET instead of POST Http method</param>
            <returns>Output parameters containing the subsumption relationship between code/Coding "A" and code/Coding "B".</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/codesystem-operation-subsumes.html">$subsumes</seealso> operation.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.ICodeSystemTerminologyService">
            <summary>
            Subset of the FHIR terminology service (http://hl7.org/fhir/terminology-service.html) that concerns lookup and validation of single codes.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ICodeSystemTerminologyService.CodeSystemValidateCode(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <summary>
            Validate that a coded value is in the code system.
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="id">Id of a specific CodeSystem which is used to validate against</param>
            <param name="useGet">Use the GET instead of POST Http method</param>
            <returns>Output parameters containing the result of the operation</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/codesystem-operation-validate-code.html">$validate-code</seealso> operation.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ICodeSystemTerminologyService.Lookup(Hl7.Fhir.Model.Parameters,System.Boolean)">
            <summary>
            Given a code/system, or a Coding, get additional details about the concept, including definition, status, designations, and properties.
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="useGet">Use the GET instead of POST Http method</param>
            <returns>Output parameters containing the result of the operation</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/codesystem-operation-lookup.html">$lookup</seealso> operation.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.IMappingTerminologyService">
            <summary>
            Subset of the FHIR terminology service (http://hl7.org/fhir/terminology-service.html) that concerns mapping between valuesets.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.IMappingTerminologyService.Translate(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <summary>
            Translates a code from one value set to another, based on the existing value set and concept maps resources, and/or other additional knowledge of the processor.
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="id">Id of the ConceptMap used for the translation</param>
            <param name="useGet">Use the GET instead of POST Http method</param>
            <returns>Output parameter containing the result of the translation</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/conceptmap-operation-translate.html">$translate</seealso> operation.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.ITerminologyServiceWithClosure">
            <summary>
            Subset of the FHIR terminology service (http://hl7.org/fhir/terminology-service.html) that concerns closure maintenance.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ITerminologyServiceWithClosure.Closure(Hl7.Fhir.Model.Parameters,System.Boolean)">
            <summary>
            Provides support for ongoing maintenance of a client-side transitive closure table based on server-side terminological logic. 
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="useGet">Use the GET instead of POST Http method</param>
            <returns>Output parameters containing a ConceptMap with a list of new entries (code / system --> code/system) that the client should add to its closure table.</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/conceptmap-operation-closure.html">$closure</seealso> operation.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.IExpandingTerminologyService">
            <summary>
            Subset of the FHIR terminology service (http://hl7.org/fhir/terminology-service.html) that concerns calculation of value set expansions.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.IExpandingTerminologyService.Expand(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <summary>
            The definition of a value set is used to create a simple collection of codes suitable for use for data entry or validation.
            </summary>
            <param name="parameters">Input parameters for the operation</param>
            <param name="id">Id of a specific ValueSet to expand</param>
            <param name="useGet">Use the GET instead of POST Http method</param>
            <returns>Output parameters containing the expanded ValueSet</returns>
            <exception cref="T:Hl7.Fhir.Rest.FhirOperationException">Thrown when the terminology service encounters an error</exception>
            <remarks>This function corresponds to the <seealso href="http://hl7.org/fhir/valueset-operation-expand.html">$expand</seealso> operation.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.LanguageTerminologyService">
            <summary>
            Checks if codes are valid language types
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.Code">
            <summary>
            The code that is to be located. If a code is provided, a system must be provided.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.System">
            <summary>
            The system for the code that is to be located.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.Version">
            <summary>
            The version of the system, if one was provided in the source data.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.Coding">
            <summary>
            A coding to look up.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.Date">
            <summary>
            The date for which the information should be returned.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.DisplayLanguage">
            <summary>
            The requested language for display.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.LookupParameters.Property">
            <summary>
            A property that the client wishes to be returned in the output.
            </summary>
            <remarks>If no properties are specified, the server chooses what to return.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.MimeTypeTerminologyService">
            <summary>
            Checks if codes are valid Mime-Types (urn:ietf:bcp:13)
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.MultiTerminologyService">
            <summary>
            Aggregation of multiple terminology services. 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.#ctor(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Terminology.ITerminologyService})">
            <summary>
            A collection of multiple terminology services to allow for one or multiple fallback services when validating codes for example.
            </summary>
            <param name="services">Terminology services to be used. Note that the first service in the list will be used first, the others will be used for fallback based on their order.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.#ctor(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings})">
            <summary>
            A collection of multiple terminology services to allow for one or multiple fallback services when validating codes for example.
            </summary>
            <param name="settings">Routing settings to be used. You can add settings to prefer certain terminology services, the others will still be used based as fallback based on their order.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.#ctor(Hl7.Fhir.Specification.Terminology.ITerminologyService[])">
            <summary>
            A collection of multiple terminology services to allow for one or multiple fallback services when validating codes for example.
            </summary>
            <param name="services">Terminology services to be used. Note that the first service in the list will be used first, the others will be used for fallback based on their order.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.#ctor(Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings[])">
            <summary>
            A collection of multiple terminology services to allow for one or multiple fallback services when validating codes for example.
            </summary>
            <param name="services">Orderable terminology services to be used. You can set the order of the services to be used using the settings, the others will be used for fallback based on their order.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.AddLast(Hl7.Fhir.Specification.Terminology.ITerminologyService)">
            <summary>
            Add an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> at the back of the order of terminologyServices to be used.
            </summary>
            <param name="service"><see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> to be added.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.AddLast(Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings)">
            <summary>
            Add an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> including their routing settings at the back of the order of terminology services to be used.
            </summary>
            <param name="settings"><see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> to be added.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.AddFirst(Hl7.Fhir.Specification.Terminology.ITerminologyService)">
            <summary>
            Add an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> at the front of the order of terminology services to be used.
            </summary>
            <param name="service"><see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> to be added.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.AddFirst(Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings)">
            <summary>
            Add an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> including their routing settings at the front of the order of terminology services to be used.
            </summary>
            <param name="settings"><see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> to be added.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Insert(System.Int32,Hl7.Fhir.Specification.Terminology.ITerminologyService)">
            <summary>
            Insert an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> in the list of terminology services to be used at a specific index.
            </summary>
            <param name="index"></param>
            <param name="service"><see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> to be added.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Insert(System.Int32,Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings)">
            <summary>
            Insert an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> including their routing settings in the list of terminology services to be used at a specific index.
            </summary>
            <param name="index"></param>
            <param name="settings"><see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> to be added.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.ValueSetValidateCode(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.CodeSystemValidateCode(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Expand(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Lookup(Hl7.Fhir.Model.Parameters,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Translate(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Subsumes(Hl7.Fhir.Model.Parameters,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.MultiTerminologyService.Closure(Hl7.Fhir.Model.Parameters,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.SubsumesParameters.CodeA">
            <summary>
            The "A" code that is to be tested. If a code is provided, a system must be provided.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.SubsumesParameters.CodeB">
            <summary>
            The "B" code that is to be tested. If a code is provided, a system must be provided.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.SubsumesParameters.System">
            <summary>
            The code system in which subsumption testing is to be performed. 
            This must be provided unless the operation is invoked on a code system instance.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.SubsumesParameters.Version">
            <summary>
            The version of the code system, if one was provided in the source data.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.SubsumesParameters.CodingA">
            <summary>
            The "A" Coding that is to be tested.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.SubsumesParameters.CodingB">
            <summary>
            The "B" Coding that is to be tested.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings">
            <summary>
            Settings to manage routing mechanism of an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.#ctor(Hl7.Fhir.Specification.Terminology.ITerminologyService)">
            <summary>
            Settings to manage routing mechanism of an <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/>.
            <param name="service"><see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> to be managed</param>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.Service">
            <summary>
            The <see cref="T:Hl7.Fhir.Specification.Terminology.ITerminologyService"/> these routing settings are about
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.PreferredValueSets">
            <summary>
            (Canonicals of) ValueSets for which this service is preferred to use. When there are no
            valueset preferred (the list is empty), then the service applies to all incoming valuesets.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.#ctor(Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.CopyTo(Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings.CreateDefault(Hl7.Fhir.Specification.Terminology.ITerminologyService)">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.TerminologyServiceRoutingSettings"/> instance with default property values.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Url">
            <summary>
            A canonical reference to a value set.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Context">
            <summary>
            The context of the value set, so that the server can resolve this to a value set to validate against.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.ValueSet">
            <summary>
            The value set is provided directly as part of the request.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.ValueSetVersion">
            <summary>
            The identifier that is used to identify a specific version of the value set to be used when validating the code.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Code">
            <summary>
            The code that is to be validated.
            </summary>
            <remarks>If a code is provided, a system or a context must be provided.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.System">
            <summary>
            The system for the code that is to be validated
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.SystemVersion">
            <summary>
            The version of the system.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Display">
            <summary>
            The display associated with the code.
            </summary>
            <remarks>If a display is provided a code must be provided.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Coding">
            <summary>
            A coding to validate.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.CodeableConcept">
            <summary>
            A full codeableConcept to validate.
            </summary>
            <remarks>The server returns true if one of the coding values is in the value set, and may also validate that the codings are not in conflict with each other if more than one is present.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Date">
            <summary>
            The date for which the validation should be checked.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Abstract">
            <summary>
            If this parameter has a value of true, the client is stating that the validation is being performed in a context where a concept designated as 'abstract' is appropriate/allowed to be used, and the server should regard abstract codes as valid.
            If this parameter is false, abstract codes are not considered to be valid.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.DisplayLanguage">
            <summary>
            Specifies the language to be used for description when validating the display property.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValidateCodeParameters.Build">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings">
            <summary>Configuration settings for the "ValueSetExpander" class.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.DefaultMaxExpansionSize">
            <summary>Default value of the <see cref="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.MaxExpansionSize"/> property.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.ValueSetSource">
            <summary>
            The <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> or <see cref="T:Hl7.Fhir.Specification.Source.IAsyncResourceResolver" /> to use when a reference 
            to another valueset is encountered.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.MaxExpansionSize">
            <summary>
            The maximum number of concepts to include in an expansion before the expander raises an error.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.IncludeDesignations">
            <summary>
            Controls whether concept designations are to be included or excluded in value set expansions
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.#ctor(Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.CopyTo(Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.XmlRepresentation">
            <summary>
            Xml Serialization used for primitive values
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.AllowedTypesAttribute">
            <summary>
            Validates the type of a property against the allowed type choices.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.AllowedTypesAttribute.Types">
            <summary>
            The list of types that are allowed for the instance.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.AllowedTypesAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Validation.AllowedTypesAttribute.IsAllowedType(System.Type)">
            <summary>
            Determine whether the given type is allowed according to this attribute.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.CardinalityAttribute">
            <summary>
            Validates a List instance against the cardinality min/max rules.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.CardinalityAttribute.Min">
            <summary>
            The minimum number of occurrences.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.CardinalityAttribute.Max">
            <summary>
            The maximum number of occurences. Use <c>-1</c> for unlimited.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.CardinalityAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Validation.CodedValidationException">
            <summary>
            An error found during validation of POCO's using the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> validators.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.CodePatternAttribute">
            <summary>
            Validates a code value against the FHIR rules for code.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.CodePatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Validation.DatePatternAttribute">
            <summary>
            Validates a date value against the FHIR rules for date.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.DatePatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Validation.DateTimePatternAttribute">
            <summary>
            Validates a datetime value against the FHIR rules for datetime.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.DateTimePatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Validation.DotNetAttributeValidation">
            <summary>
            Utility methods for invoking .NET's <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>-based validation mechanism.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.DotNetAttributeValidation.Validate(Hl7.Fhir.Model.Base,System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)">
            <summary>
            Validate and object and its members against any <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />s present. 
            Will throw when a validation error is encountered.
            </summary>
            <param name="value">The object to validate</param>
            <param name="recurse">Whether to validate the object recursively, by also validating the contents of each property of the object.</param>
            <param name="narrativeValidation">The kind of narrative validation to perform when validating <see cref="T:Hl7.Fhir.Model.XHtml"/>.</param>
        </member>
        <member name="M:Hl7.Fhir.Validation.DotNetAttributeValidation.Validate(System.Object,System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)">
            <inheritdoc cref="M:Hl7.Fhir.Validation.DotNetAttributeValidation.Validate(Hl7.Fhir.Model.Base,System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)"/>
        </member>
        <member name="M:Hl7.Fhir.Validation.DotNetAttributeValidation.TryValidate(Hl7.Fhir.Model.Base,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)">
            <summary>
            Validate an object and its members against any <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />s present. 
            </summary>
            <remarks>If <paramref name="validationResults"/> is <c>null</c>, no errors will be returned.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Validation.DotNetAttributeValidation.TryValidate(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)">
            <inheritdoc cref="M:Hl7.Fhir.Validation.DotNetAttributeValidation.TryValidate(Hl7.Fhir.Model.Base,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)"/>
        </member>
        <member name="M:Hl7.Fhir.Validation.DotNetAttributeValidation.TryValidate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <inheritdoc cref="M:Hl7.Fhir.Validation.DotNetAttributeValidation.TryValidate(Hl7.Fhir.Model.Base,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean,Hl7.Fhir.Validation.NarrativeValidationKind)"/>
        </member>
        <member name="M:Hl7.Fhir.Validation.DotNetAttributeValidation.IntoEmptyProperty(System.ComponentModel.DataAnnotations.ValidationContext,System.String)">
            <summary>
            This is very similar to IntoPath except that it doesn't walk into the actual property
            as the property does not exist, but we do need to set the membername so that the error message
            is created correctly identifies the location in the message (in the context of the location)
            </summary>
            <param name="ctx"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Validation.IdPatternAttribute">
            <summary>
            Validates an id value against the FHIR rules for id.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.IdPatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Validation.NarrativeValidationKind">
            <summary>
            Determine the kind of narrative validation is done.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Validation.NarrativeValidationKind.None">
            <summary>
            No validation is performed.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Validation.NarrativeValidationKind.Xml">
            <summary>
            Value is validated to be well-formed xml.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Validation.NarrativeValidationKind.FhirXhtml">
            <summary>
            Value is well-formed Xml and is valid against the FHIR rules for Narrative Xhtml.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.NarrativeXhtmlPatternAttribute">
            <summary>
            Validates an xhtml value against the FHIR rules for xhtml.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.NarrativeXhtmlPatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Hl7.Fhir.Validation.NarrativeXhtmlPatternAttribute.IsValid(System.Object,Hl7.Fhir.Validation.NarrativeValidationKind,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates whether the value is a string of well-formatted Xml.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.OidPatternAttribute">
            <summary>
            Validates an Oid value against the FHIR rules for oid.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.OidPatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Hl7.Fhir.Validation.TimePatternAttribute">
            <summary>
            Validates a datetime value against the FHIR rules for time.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.TimePatternAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Validation.UriPatternAttribute">
            <summary>
            Validates an Uri value against the FHIR rules for Uri.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.UuidPatternAttribute">
            <summary>
            Validates an Uuid value against the FHIR rules for Uuid.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.ValidateEnumCodeAttribute">
            <summary>
            Validates a code value against the FHIR rules for code.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidateEnumCodeAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Hl7.Fhir.Validation.ValidationContextExtensions">
            <summary>
            Extension methods on <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> to support POCO validation.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.SetValidateRecursively(System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
            <summary>
            Alters the ValidationContext to indicate that validation should or should not recurse into nested objects
            (i.e. validate members of the validated objects complex members recursively)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.ValidateRecursively(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Gets the indication from the ValidationContext whether validation should recurse into nested objects
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.SetNarrativeValidationKind(System.ComponentModel.DataAnnotations.ValidationContext,Hl7.Fhir.Validation.NarrativeValidationKind)">
            <summary>
            Alters the ValidationContext to indicate the kind of narrative validation the
            <see cref="T:Hl7.Fhir.Validation.NarrativeXhtmlPatternAttribute"/> should perform.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.GetNarrativeValidationKind(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Gets the kind of narrative validation the <see cref="T:Hl7.Fhir.Validation.NarrativeXhtmlPatternAttribute"/> should perform
            from the ValidationContext.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.SetPositionInfo(System.ComponentModel.DataAnnotations.ValidationContext,Hl7.Fhir.Utility.IPositionInfo)">
            <summary>
            Alters the ValidationContext to include line/position information for the validation errors to use.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.GetPositionInfo(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Gets the position information for the validation errors from the ValidationContext.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.SetLocation(System.ComponentModel.DataAnnotations.ValidationContext,System.String)">
            <summary>
            Alters the ValidationContext to include the human-readable location for the validation errors to use.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.SetLocation(System.ComponentModel.DataAnnotations.ValidationContext,Hl7.Fhir.Serialization.PathStack)">
            <summary>
            Alters the ValidationContext to include the human-readable location for the validation errors to use.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationContextExtensions.GetLocation(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Gets the human-readable location for the validation errors from the ValidationContext.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.CompiledExpressionExtensions.Scalar(Hl7.FhirPath.CompiledExpression,Hl7.Fhir.ElementModel.ITypedElement,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression against a given context and returns a single result
            </summary>
            <param name="evaluator">Expression which is to be evaluated</param>
            <param name="input">Input at which the expression is evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>The single result of an expression</returns>
        </member>
        <member name="M:Hl7.FhirPath.CompiledExpressionExtensions.Predicate(Hl7.FhirPath.CompiledExpression,Hl7.Fhir.ElementModel.ITypedElement,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression and returns true for expression being evaluated as true or empty, otherwise false.
            </summary>
            <param name="evaluator">Expression which is to be evaluated</param>
            <param name="input">Input at which the expression is evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>True if expression returns true of empty, otheriwse false</returns>
        </member>
        <member name="M:Hl7.FhirPath.CompiledExpressionExtensions.IsTrue(Hl7.FhirPath.CompiledExpression,Hl7.Fhir.ElementModel.ITypedElement,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression and returns true for expression being evaluated as true, and false if the expression returns false or empty.
            </summary>
            <param name="evaluator">Expression which is to be evaluated</param>
            <param name="input">Input at which the expression is evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>True if expression returns true , and false if expression returns empty of false.</returns>
        </member>
        <member name="M:Hl7.FhirPath.CompiledExpressionExtensions.IsBoolean(Hl7.FhirPath.CompiledExpression,System.Boolean,Hl7.Fhir.ElementModel.ITypedElement,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates if the result of an expression is equal to a given boolean.
            </summary>
            <param name = "evaluator"> Expression which is to be evaluated</param>
            <param name="value">boolean that is to be compared to the result of the expression</param>
            <param name="input">Input at which the expression is evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>True if the result of an expression is equal to a given boolean, otherwise false</returns>
        </member>
        <member name="M:Hl7.FhirPath.EvaluationContext.#ctor(Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Create an EvaluationContext with the given value for <c>%resource</c>.
            </summary>
            <param name="resource">The data that will be represented by %resource</param>
        </member>
        <member name="M:Hl7.FhirPath.EvaluationContext.#ctor(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            Create an EvaluationContext with the given value for <c>%resource</c> and <c>%rootResource</c>.
            </summary>
            <param name="resource">The data that will be represented by <c>%resource</c>.</param>
            <param name="rootResource">The data that will be represented by <c>%rootResource</c>.</param>
        </member>
        <member name="P:Hl7.FhirPath.EvaluationContext.RootResource">
            <summary>
            The data represented by <c>%rootResource</c>.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.EvaluationContext.Resource">
            <summary>
            The data represented by <c>%resource</c>.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.EvaluationContext.Tracer">
            <summary>
            A delegate that handles the output for the <c>trace()</c> function.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Expressions.ClosureExtensions.SetOriginalContext(Hl7.FhirPath.Expressions.Closure,System.Collections.Generic.IEnumerable{Hl7.Fhir.ElementModel.ITypedElement})">
            <summary>
            The original node that was passed to the evaluation engine before starting evaluation.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Expressions.ClosureExtensions.SetResource(Hl7.FhirPath.Expressions.Closure,System.Collections.Generic.IEnumerable{Hl7.Fhir.ElementModel.ITypedElement})">
            <summary>
            The original resource current context is part of. When evaluating a datatype, this would be the
            resource the element is part of. Do not go past a root resource into a bundle, if it is contained
            in a bundle.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Expressions.ClosureExtensions.SetRootResource(Hl7.FhirPath.Expressions.Closure,System.Collections.Generic.IEnumerable{Hl7.Fhir.ElementModel.ITypedElement})">
            <summary>
            When a DomainResource contains another resource, and that contained resource is the focus (%resource) 
            then %rootResource refers to the container resource.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Expressions.SymbolTableInit.AddStandardFP(Hl7.FhirPath.Expressions.SymbolTable)">
            <summary>
            Add the function library for the standard FhirPath Normative dialect to the <see cref="T:Hl7.FhirPath.Expressions.SymbolTable"/>.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Expressions.Typecasts.UnboxTo(System.Object,System.Type)">
            <summary>
            This will unpack the instance 
            </summary>
            <param name="instance"></param>
            <param name="to">The level to unbox to.</param>
            <returns></returns>
            <remarks>The level of unboxing is specified using a type. The highest level
            being an <see cref="T:System.Collections.Generic.IEnumerable`1"/> followed by 
            <see cref="T:Hl7.Fhir.ElementModel.ITypedElement"/> followed by a primitive runtime type.
            </remarks>
        </member>
        <member name="T:Hl7.FhirPath.FhirPathCompilerCache">
            <summary>
            A combination of a configured <see cref="T:Hl7.FhirPath.FhirPathCompiler" /> and a set of cached <see cref="T:Hl7.FhirPath.CompiledExpression"/> 
            produced by that compiler.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.GetCompiledExpression(System.String)">
            <summary>
            Returns a <see cref="T:Hl7.FhirPath.CompiledExpression"/> for the given FhirPath expression.
            </summary>
            <remarks>The expression will be retrieved from the cache if available, otherwise
            it will be added to the cache.</remarks>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.Select(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression against a given context and returns the result(s)
            </summary>
            <param name="input">Input on which the expression is being evaluated</param>
            <param name="expression">Expression which is to be evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>The result(s) of the expression</returns>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.Scalar(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression against a given context and returns a single result
            </summary>
            <param name="input">Input on which the expression is being evaluated</param>
            <param name="expression">Expression which is to be evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>The single result of the expression, and null if the expression returns multiple results</returns>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.Predicate(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression and returns true for expression being evaluated as true or empty, otherwise false.
            </summary>
            <param name="input">Input on which the expression is being evaluated</param>
            <param name="expression">Expression which is to be evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>True if expression returns true of empty, otheriwse false</returns>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.IsTrue(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <summary>
            Evaluates an expression and returns true for expression being evaluated as true, and false if the expression returns false or empty.
            </summary>
            <param name="input">Input on which the expression is being evaluated</param>
            <param name="expression">Expression which is to be evaluated</param>
            <param name="ctx">Context of the evaluation</param>
            <returns>True if expression returns true , and false if expression returns empty of false.</returns>
        </member>
        <member name="M:Hl7.FhirPath.FhirPathCompilerCache.IsBoolean(Hl7.Fhir.ElementModel.ITypedElement,System.String,System.Boolean,Hl7.FhirPath.EvaluationContext)">
             <summary>
            Evaluates if the result of an expression is equal to a given boolean.
             </summary>
             <param name="input">Input on which the expression is being evaluated</param>
             <param name="value">Boolean that is to be compared to the result of the expression</param>
             <param name="expression">Expression which is to be evaluated</param>
             <param name="ctx">Context of the evaluation</param>
             <returns>True if the result of an expression is equal to a given boolean, otherwise false</returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToBoolean(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toBoolean() function
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToBoolean(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToBoolean() function
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToInteger(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toInteger() function
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToInteger(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToInteger() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToDecimal(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toDecimal() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToDecimal(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToDecimal() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToLong(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toLong() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToLong(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToLong() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToQuantity(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toQuantity() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToQuantity(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToQuantity() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToStringRepresentation(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toString() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToString(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToString() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToDate(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toDate() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToDate(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToDate() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToDateTime(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toDateTime() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToDateTime(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToDateTime() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ToTime(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath toTime() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Functions.ConversionOperators.ConvertsToTime(Hl7.Fhir.ElementModel.Types.Any)">
            <summary>
            FhirPath convertsToTime() function.
            </summary>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.CommentParser">
            <summary>
            Constructs customizable comment parsers.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.Single">
            <summary>
            Single-line comment header.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.NewLine">
            <summary>
            Newline character preference.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.MultiOpen">
            <summary>
            Multi-line comment opener.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.MultiClose">
            <summary>
            Multi-line comment closer.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.CommentParser.#ctor">
            <summary>
            Initializes a Comment with C-style headers and Windows newlines.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.CommentParser.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a Comment with custom multi-line headers and newline characters.
            Single-line headers are made null, it is assumed they would not be used.
            </summary>
            <param name="multiOpen"></param>
            <param name="multiClose"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.CommentParser.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a Comment with custom headers and newline characters.
            </summary>
            <param name="single"></param>
            <param name="multiOpen"></param>
            <param name="multiClose"></param>
            <param name="newLine"></param>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.SingleLineComment">
            <summary>
            Parse a single-line comment.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.MultiLineComment">
            <summary>
            Parse a multi-line comment.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.CommentParser.AnyComment">
            <summary>
            Parse a comment.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.Single">
            <summary>
            Single-line comment header.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.NewLine">
            <summary>
            Newline character preference.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.MultiOpen">
            <summary>
            Multi-line comment opener.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.MultiClose">
            <summary>
            Multi-line comment closer.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.SingleLineComment">
            <summary>
            Parse a single-line comment.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.MultiLineComment">
            <summary>
            Parse a multi-line comment.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IComment.AnyComment">
            <summary>
            Parse a comment.
            </summary>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.IInput">
            <summary>
            Represents an input for parsing.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.IInput.Advance">
            <summary>
            Advances the input.
            </summary>
            <returns>A new <see cref="T:Hl7.FhirPath.Sprache.IInput" /> that is advanced.</returns>
            <exception cref="T:System.InvalidOperationException">The input is already at the end of the source.</exception>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.Source">
            <summary>
            Gets the whole source.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.Current">
            <summary>
            Gets the current <see cref="T:System.Char" />.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.AtEnd">
            <summary>
            Gets a value indicating whether the end of the source is reached.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.Position">
            <summary>
            Gets the current positon.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.Line">
            <summary>
            Gets the current line number.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.Column">
            <summary>
            Gets the current column.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IInput.Memos">
            <summary>
            Memos used by this input
            </summary>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.Input">
            <summary>
            Represents an input for parsing.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.FhirPath.Sprache.Input" /> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.Advance">
            <summary>
            Advances the input.
            </summary>
            <returns>A new <see cref="T:Hl7.FhirPath.Sprache.IInput" /> that is advanced.</returns>
            <exception cref="T:System.InvalidOperationException">The input is already at the end of the source.</exception>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Input.Source">
            <summary>
            Gets the whole source.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Input.Current">
            <summary>
            Gets the current <see cref="T:System.Char" />.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Input.AtEnd">
            <summary>
            Gets a value indicating whether the end of the source is reached.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Input.Position">
            <summary>
            Gets the current positon.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Input.Line">
            <summary>
            Gets the current line number.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Input.Column">
            <summary>
            Gets the current column.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Hl7.FhirPath.Sprache.Input" />.
            </returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hl7.FhirPath.Sprache.Input" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hl7.FhirPath.Sprache.Input" />; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.Equals(Hl7.FhirPath.Sprache.IInput)">
            <summary>
            Indicates whether the current <see cref="T:Hl7.FhirPath.Sprache.Input" /> is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.op_Equality(Hl7.FhirPath.Sprache.Input,Hl7.FhirPath.Sprache.Input)">
            <summary>
            Indicates whether the left <see cref="T:Hl7.FhirPath.Sprache.Input" /> is equal to the right <see cref="T:Hl7.FhirPath.Sprache.Input" />.
            </summary>
            <param name="left">The left <see cref="T:Hl7.FhirPath.Sprache.Input" />.</param>
            <param name="right">The right <see cref="T:Hl7.FhirPath.Sprache.Input" />.</param>
            <returns>true if both objects are equal.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Input.op_Inequality(Hl7.FhirPath.Sprache.Input,Hl7.FhirPath.Sprache.Input)">
            <summary>
            Indicates whether the left <see cref="T:Hl7.FhirPath.Sprache.Input" /> is not equal to the right <see cref="T:Hl7.FhirPath.Sprache.Input" />.
            </summary>
            <param name="left">The left <see cref="T:Hl7.FhirPath.Sprache.Input" />.</param>
            <param name="right">The right <see cref="T:Hl7.FhirPath.Sprache.Input" />.</param>
            <returns>true if the objects are not equal.</returns>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.IPositionAware`1">
            <summary>
            An interface for objects that have a source <see cref="T:Hl7.FhirPath.Sprache.Position"/>.
            </summary>
            <typeparam name="T">Type of the matched result.</typeparam>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.IPositionAware`1.SetPos(Hl7.FhirPath.Sprache.Position,System.Int32)">
            <summary>
            Set the start <see cref="T:Hl7.FhirPath.Sprache.Position"/> and the matched length.
            </summary>
            <param name="startPos">The start position</param>
            <param name="length">The matched length.</param>
            <returns>The matched result.</returns>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.IResult`1">
            <summary>
            Represents a parsing result.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IResult`1.Value">
            <summary>
            Gets the resulting value.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IResult`1.WasSuccessful">
            <summary>
            Gets a value indicating whether wether parsing was successful.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IResult`1.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IResult`1.Expectations">
            <summary>
            Gets the parser expectations in case of error.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IResult`1.Remainder">
            <summary>
            Gets the remainder of the input.
            </summary>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.IOption`1">
            <summary>
            Represents an optional result.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IOption`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.IOption`1.IsDefined">
            <summary>
            Gets a value indicating whether this instance is defined.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.IOption`1.GetOrDefault">
            <summary>
            Gets the matched result or a default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.IOption`1.Get">
            <summary>
            Gets the matched result.
            </summary>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.OptionExtensions">
            <summary>
            Extensions for <see cref="T:Hl7.FhirPath.Sprache.IOption`1"/>.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.OptionExtensions.GetOrElse``1(Hl7.FhirPath.Sprache.IOption{``0},``0)">
            <summary>
            Gets the value or else returns a default value.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="option"></param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.Parse">
            <summary>
            Parsers and combinators.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Char(System.Predicate{System.Char},System.String)">
            <summary>
            TryParse a single character matching 'predicate'
            </summary>
            <param name="predicate"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.CharExcept(System.Predicate{System.Char},System.String)">
            <summary>
            Parse a single character except those matching <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Characters not to match.</param>
            <param name="description">Description of characters that don't match.</param>
            <returns>A parser for characters except those matching <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Char(System.Char)">
            <summary>
            Parse a single character c.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Chars(System.Char[])">
            <summary>
            Parse a single character of any in c
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Chars(System.String)">
            <summary>
            Parse a single character of any in c
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.CharExcept(System.Char)">
            <summary>
            Parse a single character except c.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.CharExcept(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Parses a single character except for those in the given parameters
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.CharExcept(System.String)">
            <summary>
            Parses a single character except for those in c
            </summary>  
            <param name="c"></param>
            <returns></returns> 
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.IgnoreCase(System.Char)">
            <summary>
            Parse a single character in a case-insensitive fashion.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.IgnoreCase(System.String)">
            <summary>
            Parse a string in a case-insensitive fashion.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.AnyChar">
            <summary>
            Parse any character.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.WhiteSpace">
            <summary>
            Parse a whitespace.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Digit">
            <summary>
            Parse a digit.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Letter">
            <summary>
            Parse a letter.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.LetterOrDigit">
            <summary>
            Parse a letter or digit.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Lower">
            <summary>
            Parse a lowercase letter.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Upper">
            <summary>
            Parse an uppercase letter.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Numeric">
            <summary>
            Parse a numeric character.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.String(System.String)">
            <summary>
            Parse a string of characters.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Not``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Constructs a parser that will fail if the given parser succeeds,
            and will succeed if the given parser fails. In any case, it won't
            consume any input. It's like a negative look-ahead in regex.
            </summary>
            <typeparam name="T">The result type of the given parser</typeparam>
            <param name="parser">The parser to wrap</param>
            <returns>A parser that is the opposite of the given parser.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Then``2(Hl7.FhirPath.Sprache.Parser{``0},System.Func{``0,Hl7.FhirPath.Sprache.Parser{``1}})">
            <summary>
            Parse first, and if successful, then parse second.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Many``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse a stream of elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
            <remarks>Implemented imperatively to decrease stack usage.</remarks>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.XMany``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse a stream of elements. If any element is partially parsed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
            <remarks>Implemented imperatively to decrease stack usage.</remarks>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.AtLeastOnce``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            TryParse a stream of elements with at least one item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.XAtLeastOnce``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            TryParse a stream of elements with at least one item. Except the first
            item, all other items will be matched with the <code>XMany</code> operator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.End``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse end-of-input.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Select``2(Hl7.FhirPath.Sprache.Parser{``0},System.Func{``0,``1})">
            <summary>
            Take the result of parsing, and project it onto a different domain.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Token``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse the token, embedded in any amount of whitespace characters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Ref``1(System.Func{Hl7.FhirPath.Sprache.Parser{``0}})">
            <summary>
            Refer to another parser indirectly. This allows circular compile-time dependency between parsers.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Text(Hl7.FhirPath.Sprache.Parser{System.Collections.Generic.IEnumerable{System.Char}})">
            <summary>
            Convert a stream of characters to a string.
            </summary>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Or``1(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse first, if it succeeds, return first, otherwise try second.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Named``1(Hl7.FhirPath.Sprache.Parser{``0},System.String)">
            <summary>
            Names part of the grammar for help with error messages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.XOr``1(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse first, if it succeeds, return first, otherwise try second.
            Assumes that the first parsed character will determine the parser chosen (see Try).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Once``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Parse a stream of elements containing only one item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Concat``1(Hl7.FhirPath.Sprache.Parser{System.Collections.Generic.IEnumerable{``0}},Hl7.FhirPath.Sprache.Parser{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenate two streams of elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Return``1(``0)">
            <summary>
            Succeed immediately and return value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Return``2(Hl7.FhirPath.Sprache.Parser{``0},``1)">
            <summary>
            Version of Return with simpler inline syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Except``2(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``1})">
            <summary>
            Attempt parsing only if the <paramref name="except"/> parser fails.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="except"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Until``2(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``1})">
            <summary>
            Parse a sequence of items until a terminator is reached.
            Returns the sequence, discarding the terminator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="parser"></param>
            <param name="until"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Where``1(Hl7.FhirPath.Sprache.Parser{``0},System.Func{``0,System.Boolean})">
            <summary>
            Succeed if the parsed value matches predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.SelectMany``3(Hl7.FhirPath.Sprache.Parser{``0},System.Func{``0,Hl7.FhirPath.Sprache.Parser{``1}},System.Func{``0,``1,``2})">
            <summary>
            Monadic combinator Then, adapted for Linq comprehension syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="parser"></param>
            <param name="selector"></param>
            <param name="projector"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.ChainOperator``2(Hl7.FhirPath.Sprache.Parser{``1},Hl7.FhirPath.Sprache.Parser{``0},System.Func{``1,``0,``0,``0})">
            <summary>
            Chain a left-associative operator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOp"></typeparam>
            <param name="op"></param>
            <param name="operand"></param>
            <param name="apply"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.XChainOperator``2(Hl7.FhirPath.Sprache.Parser{``1},Hl7.FhirPath.Sprache.Parser{``0},System.Func{``1,``0,``0,``0})">
            <summary>
            Chain a left-associative operator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOp"></typeparam>
            <param name="op"></param>
            <param name="operand"></param>
            <param name="apply"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.ChainRightOperator``2(Hl7.FhirPath.Sprache.Parser{``1},Hl7.FhirPath.Sprache.Parser{``0},System.Func{``1,``0,``0,``0})">
            <summary>
            Chain a right-associative operator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOp"></typeparam>
            <param name="op"></param>
            <param name="operand"></param>
            <param name="apply"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.XChainRightOperator``2(Hl7.FhirPath.Sprache.Parser{``1},Hl7.FhirPath.Sprache.Parser{``0},System.Func{``1,``0,``0,``0})">
            <summary>
            Chain a right-associative operator.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOp"></typeparam>
            <param name="op"></param>
            <param name="operand"></param>
            <param name="apply"></param>
            <returns></returns>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Number">
            <summary>
            Parse a number.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.Decimal">
            <summary>
            Parse a decimal number using the current culture's separator character.
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.DecimalInvariant">
            <summary>
            Parse a decimal number with separator '.'.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Optional``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Construct a parser that indicates the given parser
            is optional. The returned parser will succeed on
            any input no matter whether the given parser
            succeeds or not.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Positioned``1(Hl7.FhirPath.Sprache.Parser{``0})">
            <summary>
            Construct a parser that will set the position to the position-aware
            T on succsessful match.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.LineEnd">
            <summary>
            \n or \r\n
            </summary>
        </member>
        <member name="F:Hl7.FhirPath.Sprache.Parse.LineTerminator">
            <summary>
            line ending or end of input
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Identifier(Hl7.FhirPath.Sprache.Parser{System.Char},Hl7.FhirPath.Sprache.Parser{System.Char})">
            <summary>
            Parser for identifier starting with <paramref name="firstLetterParser"/> and continuing with <paramref name="tailLetterParser"/>
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Regex(System.String,System.String)">
            <summary>
            Construct a parser from the given regular expression.
            </summary>
            <param name="pattern">The regex expression.</param>
            <param name="description">Description of characters that don't match.</param>
            <returns>a parse of string</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Regex(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Construct a parser from the given regular expression.
            </summary>
            <param name="regex">The regex expression.</param>
            <param name="description">Description of characters that don't match.</param>
            <returns>a parse of string</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.RegexMatch(System.String,System.String)">
            <summary>
            Construct a parser from the given regular expression, returning a parser of
            type <see cref="T:System.Text.RegularExpressions.Match"/>.
            </summary>
            <param name="pattern">The regex expression.</param>
            <param name="description">Description of characters that don't match.</param>
            <returns>A parser of regex match objects.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.RegexMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Construct a parser from the given regular expression, returning a parser of
            type <see cref="T:System.Text.RegularExpressions.Match"/>.
            </summary>
            <param name="regex">The regex expression.</param>
            <param name="description">Description of characters that don't match.</param>
            <returns>A parser of regex match objects.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.OptimizeRegex(System.Text.RegularExpressions.Regex)">
            <summary>
            Optimize the regex by only matching successfully at the start of the input.
            Do this by wrapping the whole regex in non-capturing parentheses preceded by
             a `^'.
            </summary>
            <remarks>
            This method is invoked via reflection in unit tests. If renamed, the tests
            will need to be modified or they will fail.
            </remarks>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.DelimitedBy``2(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``1})">
            <summary>
            
            </summary>
            <param name="parser"></param>
            <param name="delimiter"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.XDelimitedBy``2(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``1})">
            <summary>
            Fails on the first itemParser failure, if it reads at least one character.
            </summary>
            <param name="itemParser"></param>
            <param name="delimiter"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Repeat``1(Hl7.FhirPath.Sprache.Parser{``0},System.Int32)">
            <summary>
            
            </summary>
            <param name="parser"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Repeat``1(Hl7.FhirPath.Sprache.Parser{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="parser"></param>
            <param name="maximumCount"></param>
            <param name="minimumCount"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Parse.Contained``3(Hl7.FhirPath.Sprache.Parser{``0},Hl7.FhirPath.Sprache.Parser{``1},Hl7.FhirPath.Sprache.Parser{``2})">
            <summary>
            
            </summary>
            <param name="parser"></param>
            <param name="open"></param>
            <param name="close"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.ParseException">
            <summary>
            Represents an error that occurs during parsing.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.ParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.FhirPath.Sprache.ParseException" /> class.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.FhirPath.Sprache.ParseException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.FhirPath.Sprache.ParseException" /> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.Parser`1">
            <summary>
            Represents a parser.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="input">The input to parse.</param>
            <returns>The result of the parser.</returns>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.ParserExtensions">
            <summary>
            Contains some extension methods for <see cref="T:Hl7.FhirPath.Sprache.Parser`1" />.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.ParserExtensions.TryParse``1(Hl7.FhirPath.Sprache.Parser{``0},System.String)">
            <summary>
            Tries to parse the input without throwing an exception.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="parser">The parser.</param>
            <param name="input">The input.</param>
            <returns>The result of the parser</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.ParserExtensions.Parse``1(Hl7.FhirPath.Sprache.Parser{``0},System.String)">
            <summary>
            Parses the specified input string.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="parser">The parser.</param>
            <param name="input">The input.</param>
            <returns>The result of the parser.</returns>
            <exception cref="T:Hl7.FhirPath.Sprache.ParseException">It contains the details of the parsing error.</exception>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.Position">
            <summary>
            Represents a position in the input.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Hl7.FhirPath.Sprache.Position" /> class.
            </summary>
            <param name="pos">The position.</param>
            <param name="line">The line number.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.FromInput(Hl7.FhirPath.Sprache.IInput)">
            <summary>
            Creates an new <see cref="T:Hl7.FhirPath.Sprache.Position"/> instance from a given <see cref="T:Hl7.FhirPath.Sprache.IInput"/> object.
            </summary>
            <param name="input">The current input.</param>
            <returns>A new <see cref="T:Hl7.FhirPath.Sprache.Position"/> instance.</returns>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Position.Pos">
            <summary>
            Gets the current positon.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Position.Line">
            <summary>
            Gets the current line number.
            </summary>
        </member>
        <member name="P:Hl7.FhirPath.Sprache.Position.Column">
            <summary>
            Gets the current column.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hl7.FhirPath.Sprache.Position" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hl7.FhirPath.Sprache.Position" />; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.Equals(Hl7.FhirPath.Sprache.Position)">
            <summary>
            Indicates whether the current <see cref="T:Hl7.FhirPath.Sprache.Position" /> is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.op_Equality(Hl7.FhirPath.Sprache.Position,Hl7.FhirPath.Sprache.Position)">
            <summary>
            Indicates whether the left <see cref="T:Hl7.FhirPath.Sprache.Position" /> is equal to the right <see cref="T:Hl7.FhirPath.Sprache.Position" />.
            </summary>
            <param name="left">The left <see cref="T:Hl7.FhirPath.Sprache.Position" />.</param>
            <param name="right">The right <see cref="T:Hl7.FhirPath.Sprache.Position" />.</param>
            <returns>true if both objects are equal.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.op_Inequality(Hl7.FhirPath.Sprache.Position,Hl7.FhirPath.Sprache.Position)">
            <summary>
            Indicates whether the left <see cref="T:Hl7.FhirPath.Sprache.Position" /> is not equal to the right <see cref="T:Hl7.FhirPath.Sprache.Position" />.
            </summary>
            <param name="left">The left <see cref="T:Hl7.FhirPath.Sprache.Position" />.</param>
            <param name="right">The right <see cref="T:Hl7.FhirPath.Sprache.Position" />.</param>
            <returns>true if the objects are not equal.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Hl7.FhirPath.Sprache.Position" />.
            </returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Position.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Hl7.FhirPath.Sprache.Result">
            <summary>
            Contains helper functions to create <see cref="T:Hl7.FhirPath.Sprache.IResult`1"/> instances.
            </summary>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Result.Success``1(``0,Hl7.FhirPath.Sprache.IInput)">
            <summary>
            Creates a success result.
            </summary>
            <typeparam name="T">The type of the result (value).</typeparam>
            <param name="value">The sucessfully parsed value.</param>
            <param name="remainder">The remainder of the input.</param>
            <returns>The new <see cref="T:Hl7.FhirPath.Sprache.IResult`1"/>.</returns>
        </member>
        <member name="M:Hl7.FhirPath.Sprache.Result.Failure``1(Hl7.FhirPath.Sprache.IInput,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a failure result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="remainder">The remainder of the input.</param>
            <param name="message">The error message.</param>
            <param name="expectations">The parser expectations.</param>
            <returns>The new <see cref="T:Hl7.FhirPath.Sprache.IResult`1"/>.</returns>
        </member>
        <member name="M:Hl7.FhirPath.IValueProviderFPExtensions.Select(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <inheritdoc cref="M:Hl7.FhirPath.FhirPathCompilerCache.Select(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)"/>
        </member>
        <member name="M:Hl7.FhirPath.IValueProviderFPExtensions.Scalar(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <inheritdoc cref="M:Hl7.FhirPath.FhirPathCompilerCache.Scalar(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)"/>
        </member>
        <member name="M:Hl7.FhirPath.IValueProviderFPExtensions.Predicate(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <inheritdoc cref="M:Hl7.FhirPath.FhirPathCompilerCache.Predicate(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)"/>
        </member>
        <member name="M:Hl7.FhirPath.IValueProviderFPExtensions.IsTrue(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)">
            <inheritdoc cref="M:Hl7.FhirPath.FhirPathCompilerCache.IsTrue(Hl7.Fhir.ElementModel.ITypedElement,System.String,Hl7.FhirPath.EvaluationContext)"/>
        </member>
        <member name="M:Hl7.FhirPath.IValueProviderFPExtensions.IsBoolean(Hl7.Fhir.ElementModel.ITypedElement,System.String,System.Boolean,Hl7.FhirPath.EvaluationContext)">
            <inheritdoc cref="M:Hl7.FhirPath.FhirPathCompilerCache.IsBoolean(Hl7.Fhir.ElementModel.ITypedElement,System.String,System.Boolean,Hl7.FhirPath.EvaluationContext)"/>
        </member>
        <member name="M:Hl7.FhirPath.IValueProviderFPExtensions.ReInitializeCache(Hl7.FhirPath.FhirPathCompiler,System.Nullable{System.Int32})">
            <summary>
            Reinitialize the cache. This method is only meant for the unit tests, but can be made public later. We need some refactoring here, I (MV) think.
            </summary>
            <param name="compiler">A userdefined compiler</param>
            <param name="cacheSize">the new size for the cache</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
